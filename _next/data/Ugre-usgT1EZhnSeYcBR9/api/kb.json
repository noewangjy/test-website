{"pageProps":{"title":"KnowledgeBase","teaser":"A storage class for entities and aliases of a specific knowledge base (ontology)","tag":"class","source":"spacy/kb/kb.pyx","version":2.2,"slug":"/api/kb","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    pre: \"pre\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    del: \"del\",\n    strong: \"strong\",\n    em: \"em\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {InlineCode, Infobox} = _components;\n  if (!Infobox) _missingMdxReference(\"Infobox\", true);\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.section, {\n      children: [_jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"KnowledgeBase\"\n        }), \" object is an abstract class providing a method to generate\\n\", _jsx(_components.a, {\n          href: \"/api/kb#candidate\",\n          children: _jsx(InlineCode, {\n            children: \"Candidate\"\n          })\n        }), \" objects, which are plausible external\\nidentifiers given a certain textual mention. Each such \", _jsx(InlineCode, {\n          children: \"Candidate\"\n        }), \" holds\\ninformation from the relevant KB entities, such as its frequency in text and\\npossible aliases. Each entity in the knowledge base also has a pretrained entity\\nvector of a fixed size.\"]\n      }), _jsxs(_components.p, {\n        children: [\"Beyond that, \", _jsx(InlineCode, {\n          children: \"KnowledgeBase\"\n        }), \" classes have to implement a number of utility\\nfunctions called by the \", _jsx(_components.a, {\n          href: \"/api/entitylinker\",\n          children: _jsx(InlineCode, {\n            children: \"EntityLinker\"\n          })\n        }), \" component.\"]\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"This class was not abstract up to spaCy version 3.5. The \", _jsx(InlineCode, {\n            children: \"KnowledgeBase\"\n          }), \"\\nimplementation up to that point is available as\\n\", _jsx(_components.a, {\n            href: \"/api/inmemorylookupkb\",\n            children: _jsx(InlineCode, {\n              children: \"InMemoryLookupKB\"\n            })\n          }), \" from 3.5 onwards.\"]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-init\",\n      children: [_jsx(_components.h2, {\n        id: \"init\",\n        tag: \"method\",\n        children: \"KnowledgeBase.__init__ \"\n      }), _jsxs(_components.p, {\n        children: [_jsx(InlineCode, {\n          children: \"KnowledgeBase\"\n        }), \" is an abstract class and cannot be instantiated. Its child\\nclasses should call \", _jsx(InlineCode, {\n          children: \"__init__()\"\n        }), \" to set up some necessary attributes.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.kb import KnowledgeBase\\nfrom spacy.vocab import Vocab\\n\\nclass FullyImplementedKB(KnowledgeBase):\\n  def __init__(self, vocab: Vocab, entity_vector_length: int):\\n      super().__init__(vocab, entity_vector_length)\\n      ...\\nvocab = nlp.vocab\\nkb = FullyImplementedKB(vocab=vocab, entity_vector_length=64)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vocab\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The shared vocabulary. \", _jsx(_components.del, {\n                children: \"Vocab\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entity_vector_length\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Length of the fixed-size entity vectors. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-entity_vector_length\",\n      children: [_jsx(_components.h2, {\n        id: \"entity_vector_length\",\n        tag: \"property\",\n        children: \"KnowledgeBase.entity_vector_length \"\n      }), _jsx(_components.p, {\n        children: \"The length of the fixed-size entity vectors in the knowledge base.\"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Length of the fixed-size entity vectors. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_candidates\",\n      children: [_jsx(_components.h2, {\n        id: \"get_candidates\",\n        tag: \"method\",\n        children: \"KnowledgeBase.get_candidates \"\n      }), _jsxs(_components.p, {\n        children: [\"Given a certain textual mention as input, retrieve a list of candidate entities\\nof type \", _jsx(_components.a, {\n          href: \"/api/kb#candidate\",\n          children: _jsx(InlineCode, {\n            children: \"Candidate\"\n          })\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.lang.en import English\\nnlp = English()\\ndoc = nlp(\\\"Douglas Adams wrote 'The Hitchhiker's Guide to the Galaxy'.\\\")\\ncandidates = kb.get_candidates(doc[0:2])\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"mention\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The textual mention or alias. \", _jsx(_components.del, {\n                children: \"Span\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"An iterable of relevant \", _jsx(InlineCode, {\n                children: \"Candidate\"\n              }), \" objects. \", _jsx(_components.del, {\n                children: \"Iterable[Candidate]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_candidates_batch\",\n      children: [_jsx(_components.h2, {\n        id: \"get_candidates_batch\",\n        tag: \"method\",\n        children: \"KnowledgeBase.get_candidates_batch \"\n      }), _jsxs(_components.p, {\n        children: [\"Same as \", _jsx(_components.a, {\n          href: \"/api/kb#get_candidates\",\n          children: _jsx(InlineCode, {\n            children: \"get_candidates()\"\n          })\n        }), \", but for an arbitrary\\nnumber of mentions. The \", _jsx(_components.a, {\n          href: \"/api/entitylinker\",\n          children: _jsx(InlineCode, {\n            children: \"EntityLinker\"\n          })\n        }), \" component will call\\n\", _jsx(InlineCode, {\n          children: \"get_candidates_batch()\"\n        }), \" instead of \", _jsx(InlineCode, {\n          children: \"get_candidates()\"\n        }), \", if the config parameter\\n\", _jsx(InlineCode, {\n          children: \"candidates_batch_size\"\n        }), \" is greater or equal than 1.\"]\n      }), _jsxs(_components.p, {\n        children: [\"The default implementation of \", _jsx(InlineCode, {\n          children: \"get_candidates_batch()\"\n        }), \" executes\\n\", _jsx(InlineCode, {\n          children: \"get_candidates()\"\n        }), \" in a loop. We recommend implementing a more efficient way to\\nretrieve candidates for multiple mentions at once, if performance is of concern\\nto you.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.lang.en import English\\nnlp = English()\\ndoc = nlp(\\\"Douglas Adams wrote 'The Hitchhiker's Guide to the Galaxy'.\\\")\\ncandidates = kb.get_candidates((doc[0:2], doc[3:]))\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"mentions\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The textual mention or alias. \", _jsx(_components.del, {\n                children: \"Iterable[Span]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"An iterable of iterable with relevant \", _jsx(InlineCode, {\n                children: \"Candidate\"\n              }), \" objects. \", _jsx(_components.del, {\n                children: \"Iterable[Iterable[Candidate]]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_alias_candidates\",\n      children: [_jsx(_components.h2, {\n        id: \"get_alias_candidates\",\n        tag: \"method\",\n        children: \"KnowledgeBase.get_alias_candidates \"\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"This method is \", _jsx(_components.em, {\n            children: \"not\"\n          }), \" available from spaCy 3.5 onwards.\"]\n        })\n      }), _jsxs(_components.p, {\n        children: [\"From spaCy 3.5 on \", _jsx(InlineCode, {\n          children: \"KnowledgeBase\"\n        }), \" is an abstract class (with\\n\", _jsx(_components.a, {\n          href: \"/api/inmemorylookupkb\",\n          children: _jsx(InlineCode, {\n            children: \"InMemoryLookupKB\"\n          })\n        }), \" being a drop-in replacement) to\\nallow more flexibility in customizing knowledge bases. Some of its methods were\\nmoved to \", _jsx(_components.a, {\n          href: \"/api/inmemorylookupkb\",\n          children: _jsx(InlineCode, {\n            children: \"InMemoryLookupKB\"\n          })\n        }), \" during this refactoring,\\none of those being \", _jsx(InlineCode, {\n          children: \"get_alias_candidates()\"\n        }), \". This method is now available as\\n\", _jsx(_components.a, {\n          href: \"/api/inmemorylookupkb#get_alias_candidates\",\n          children: _jsx(InlineCode, {\n            children: \"InMemoryLookupKB.get_alias_candidates()\"\n          })\n        }), \".\\nNote:\\n\", _jsx(_components.a, {\n          href: \"/api/inmemorylookupkb#get_candidates\",\n          children: _jsx(InlineCode, {\n            children: \"InMemoryLookupKB.get_candidates()\"\n          })\n        }), \"\\ndefaults to\\n\", _jsx(_components.a, {\n          href: \"/api/inmemorylookupkb#get_alias_candidates\",\n          children: _jsx(InlineCode, {\n            children: \"InMemoryLookupKB.get_alias_candidates()\"\n          })\n        }), \".\"]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_vector\",\n      children: [_jsx(_components.h2, {\n        id: \"get_vector\",\n        tag: \"method\",\n        children: \"KnowledgeBase.get_vector \"\n      }), _jsx(_components.p, {\n        children: \"Given a certain entity ID, retrieve its pretrained entity vector.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"vector = kb.get_vector(\\\"Q42\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entity\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The entity ID. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The entity vector. \", _jsx(_components.del, {\n                children: \"Iterable[float]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_vectors\",\n      children: [_jsx(_components.h2, {\n        id: \"get_vectors\",\n        tag: \"method\",\n        children: \"KnowledgeBase.get_vectors \"\n      }), _jsxs(_components.p, {\n        children: [\"Same as \", _jsx(_components.a, {\n          href: \"/api/kb#get_vector\",\n          children: _jsx(InlineCode, {\n            children: \"get_vector()\"\n          })\n        }), \", but for an arbitrary number of\\nentity IDs.\"]\n      }), _jsxs(_components.p, {\n        children: [\"The default implementation of \", _jsx(InlineCode, {\n          children: \"get_vectors()\"\n        }), \" executes \", _jsx(InlineCode, {\n          children: \"get_vector()\"\n        }), \" in a loop.\\nWe recommend implementing a more efficient way to retrieve vectors for multiple\\nentities at once, if performance is of concern to you.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"vectors = kb.get_vectors((\\\"Q42\\\", \\\"Q3107329\\\"))\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entities\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The entity IDs. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The entity vectors. \", _jsx(_components.del, {\n                children: \"Iterable[Iterable[numpy.ndarray]]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-to_disk\",\n      children: [_jsx(_components.h2, {\n        id: \"to_disk\",\n        tag: \"method\",\n        children: \"KnowledgeBase.to_disk \"\n      }), _jsx(_components.p, {\n        children: \"Save the current state of the knowledge base to a directory.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"kb.to_disk(path)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"path\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A path to a directory, which will be created if it doesn’t exist. Paths may be either strings or \", _jsx(InlineCode, {\n                children: \"Path\"\n              }), \"-like objects. \", _jsx(_components.del, {\n                children: \"Union[str, Path]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"List of components to exclude. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-from_disk\",\n      children: [_jsx(_components.h2, {\n        id: \"from_disk\",\n        tag: \"method\",\n        children: \"KnowledgeBase.from_disk \"\n      }), _jsxs(_components.p, {\n        children: [\"Restore the state of the knowledge base from a given directory. Note that the\\n\", _jsx(_components.a, {\n          href: \"/api/vocab\",\n          children: _jsx(InlineCode, {\n            children: \"Vocab\"\n          })\n        }), \" should also be the same as the one used to create the KB.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.vocab import Vocab\\nvocab = Vocab().from_disk(\\\"/path/to/vocab\\\")\\nkb = FullyImplementedKB(vocab=vocab, entity_vector_length=64)\\nkb.from_disk(\\\"/path/to/kb\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"loc\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A path to a directory. Paths may be either strings or \", _jsx(InlineCode, {\n                children: \"Path\"\n              }), \"-like objects. \", _jsx(_components.del, {\n                children: \"Union[str, Path]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"List of components to exclude. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The modified \", _jsx(InlineCode, {\n                children: \"KnowledgeBase\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"KnowledgeBase\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-candidate\",\n      children: [_jsx(_components.h2, {\n        id: \"candidate\",\n        tag: \"class\",\n        children: \"Candidate \"\n      }), _jsxs(_components.p, {\n        children: [\"A \", _jsx(InlineCode, {\n          children: \"Candidate\"\n        }), \" object refers to a textual mention (alias) that may or may not be\\nresolved to a specific entity from a \", _jsx(InlineCode, {\n          children: \"KnowledgeBase\"\n        }), \". This will be used as input\\nfor the entity linking algorithm which will disambiguate the various candidates\\nto the correct one. Each candidate \", _jsx(InlineCode, {\n          children: \"(alias, entity)\"\n        }), \" pair is assigned to a\\ncertain prior probability.\"]\n      }), _jsx(_components.h3, {\n        id: \"candidate-init\",\n        tag: \"method\",\n        children: \"Candidate.__init__ \"\n      }), _jsxs(_components.p, {\n        children: [\"Construct a \", _jsx(InlineCode, {\n          children: \"Candidate\"\n        }), \" object. Usually this constructor is not called directly,\\nbut instead these objects are returned by the \", _jsx(InlineCode, {\n          children: \"get_candidates\"\n        }), \" method of the\\n\", _jsx(_components.a, {\n          href: \"/api/entitylinker\",\n          children: _jsx(InlineCode, {\n            children: \"entity_linker\"\n          })\n        }), \" pipe.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.kb import Candidate\\ncandidate = Candidate(kb, entity_hash, entity_freq, entity_vector, alias_hash, prior_prob)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"kb\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The knowledge base that defined this candidate. \", _jsx(_components.del, {\n                children: \"KnowledgeBase\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entity_hash\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The hash of the entity’s KB ID. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entity_freq\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The entity frequency as recorded in the KB. \", _jsx(_components.del, {\n                children: \"float\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"alias_hash\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The hash of the textual mention or alias. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"prior_prob\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The prior probability of the \", _jsx(InlineCode, {\n                children: \"alias\"\n              }), \" referring to the \", _jsx(InlineCode, {\n                children: \"entity\"\n              }), \". \", _jsx(_components.del, {\n                children: \"float\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-candidate-attributes\",\n      children: [_jsx(_components.h2, {\n        id: \"candidate-attributes\",\n        children: \"Candidate attributes \"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entity\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The entity’s unique KB identifier. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entity_\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The entity’s unique KB identifier. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"alias\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The alias or textual mention. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"alias_\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The alias or textual mention. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"prior_prob\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The prior probability of the \", _jsx(InlineCode, {\n                children: \"alias\"\n              }), \" referring to the \", _jsx(InlineCode, {\n                children: \"entity\"\n              }), \". \", _jsx(_components.del, {\n                children: \"long\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entity_freq\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The frequency of the entity in a typical corpus. \", _jsx(_components.del, {\n                children: \"long\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entity_vector\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The pretrained vector of the entity. \", _jsx(_components.del, {\n                children: \"numpy.ndarray\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"KnowledgeBase","teaser":"A storage class for entities and aliases of a specific knowledge base (ontology)","tag":"class","source":"spacy/kb/kb.pyx","version":2.2},"scope":{}},"sectionTitle":"API Documentation","theme":"green","section":"api","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false,"next":null},"__N_SSG":true}