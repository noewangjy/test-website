{"pageProps":{"title":"EditTreeLemmatizer","tag":"class","source":"spacy/pipeline/edit_tree_lemmatizer.py","version":3.3,"teaser":"Pipeline component for lemmatization","api_base_class":"/api/pipe","api_string_name":"trainable_lemmatizer","api_trainable":true,"slug":"/api/edittreelemmatizer","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    del: \"del\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    pre: \"pre\",\n    code: \"code\",\n    em: \"em\"\n  }, _provideComponents(), props.components), {InlineCode, Infobox} = _components;\n  if (!Infobox) _missingMdxReference(\"Infobox\", true);\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.section, {\n      children: [_jsxs(_components.p, {\n        children: [\"A trainable component for assigning base forms to tokens. This lemmatizer uses\\n\", _jsx(_components.strong, {\n          children: \"edit trees\"\n        }), \" to transform tokens into base forms. The lemmatization model\\npredicts which edit tree is applicable to a token. The edit tree data structure\\nand construction method used by this lemmatizer were proposed in\\n\", _jsx(_components.a, {\n          href: \"https://aclanthology.org/D15-1272.pdf\",\n          children: \"Joint Lemmatization and Morphological Tagging with Lemming\"\n        }), \"\\n(Thomas MÃ¼ller et al., 2015).\"]\n      }), _jsxs(_components.p, {\n        children: [\"For a lookup and rule-based lemmatizer, see \", _jsx(_components.a, {\n          href: \"/api/lemmatizer\",\n          children: _jsx(InlineCode, {\n            children: \"Lemmatizer\"\n          })\n        }), \".\"]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-assigned-attributes\",\n      children: [_jsx(_components.h2, {\n        id: \"assigned-attributes\",\n        children: \"Assigned Attributes \"\n      }), _jsxs(_components.p, {\n        children: [\"Predictions are assigned to \", _jsx(InlineCode, {\n          children: \"Token.lemma\"\n        }), \".\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Location\"\n            }), _jsx(_components.th, {\n              children: \"Value\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"Token.lemma\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The lemma (hash). \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"Token.lemma_\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The lemma. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-config\",\n      children: [_jsx(_components.h2, {\n        id: \"config\",\n        children: \"Config and implementation \"\n      }), _jsxs(_components.p, {\n        children: [\"The default config is defined by the pipeline component factory and describes\\nhow the component should be configured. You can override its settings via the\\n\", _jsx(InlineCode, {\n          children: \"config\"\n        }), \" argument on \", _jsx(_components.a, {\n          href: \"/api/language#add_pipe\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.add_pipe\"\n          })\n        }), \" or in your\\n\", _jsxs(_components.a, {\n          href: \"/usage/training#config\",\n          children: [_jsx(InlineCode, {\n            children: \"config.cfg\"\n          }), \" for training\"]\n        }), \". See the\\n\", _jsx(_components.a, {\n          href: \"/api/architectures\",\n          children: \"model architectures\"\n        }), \" documentation for details on the\\narchitectures and their arguments and hyperparameters.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.pipeline.edit_tree_lemmatizer import DEFAULT_EDIT_TREE_LEMMATIZER_MODEL\\nconfig = {\\\"model\\\": DEFAULT_EDIT_TREE_LEMMATIZER_MODEL}\\nnlp.add_pipe(\\\"trainable_lemmatizer\\\", config=config, name=\\\"lemmatizer\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Setting\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"model\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A model instance that predicts the edit tree probabilities. The output vectors should match the number of edit trees in size, and be normalized as probabilities (all scores between 0 and 1, with the rows summing to \", _jsx(InlineCode, {\n                children: \"1\"\n              }), \"). Defaults to \", _jsx(_components.a, {\n                href: \"/api/architectures#Tagger\",\n                children: \"Tagger\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Model[List[Doc], List[Floats2d]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"backoff\"\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(_components.del, {\n                children: \"Token\"\n              }), \" attribute to use when no applicable edit tree is found. Defaults to \", _jsx(InlineCode, {\n                children: \"orth\"\n              }), \". \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"min_tree_freq\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Minimum frequency of an edit tree in the training set to be used. Defaults to \", _jsx(InlineCode, {\n                children: \"3\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"overwrite\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether existing annotation is overwritten. Defaults to \", _jsx(InlineCode, {\n                children: \"False\"\n              }), \". \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"top_k\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of most probable edit trees to try before resorting to \", _jsx(InlineCode, {\n                children: \"backoff\"\n              }), \". Defaults to \", _jsx(InlineCode, {\n                children: \"1\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"scorer\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The scoring method. Defaults to \", _jsx(_components.a, {\n                href: \"/api/scorer#score_token_attr\",\n                children: _jsx(InlineCode, {\n                  children: \"Scorer.score_token_attr\"\n                })\n              }), \" for the attribute \", _jsx(InlineCode, {\n                children: \"\\\"lemma\\\"\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Optional[Callable]\"\n              })]\n            })]\n          })]\n        })]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          github: \"https://github.com/explosion/spaCy/tree/master/spacy/pipeline/edit_tree_lemmatizer.py\",\n          children: \"https://github.com/explosion/spaCy/tree/master/spacy/pipeline/edit_tree_lemmatizer.py\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-init\",\n      children: [_jsx(_components.h2, {\n        id: \"init\",\n        tag: \"method\",\n        children: \"EditTreeLemmatizer.__init__ \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"# Construction via add_pipe with default model\\nlemmatizer = nlp.add_pipe(\\\"trainable_lemmatizer\\\", name=\\\"lemmatizer\\\")\\n\\n# Construction via create_pipe with custom model\\nconfig = {\\\"model\\\": {\\\"@architectures\\\": \\\"my_tagger\\\"}}\\nlemmatizer = nlp.add_pipe(\\\"trainable_lemmatizer\\\", config=config, name=\\\"lemmatizer\\\")\\n\\n# Construction from class\\nfrom spacy.pipeline import EditTreeLemmatizer\\nlemmatizer = EditTreeLemmatizer(nlp.vocab, model)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Create a new pipeline instance. In your application, you would normally use a\\nshortcut for this and instantiate the component using its string name and\\n\", _jsx(_components.a, {\n          href: \"/api/language#add_pipe\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.add_pipe\"\n          })\n        }), \".\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vocab\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The shared vocabulary. \", _jsx(_components.del, {\n                children: \"Vocab\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"model\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A model instance that predicts the edit tree probabilities. The output vectors should match the number of edit trees in size, and be normalized as probabilities (all scores between 0 and 1, with the rows summing to \", _jsx(InlineCode, {\n                children: \"1\"\n              }), \"). \", _jsx(_components.del, {\n                children: \"Model[List[Doc], List[Floats2d]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"String name of the component instance. Used to add entries to the \", _jsx(InlineCode, {\n                children: \"losses\"\n              }), \" during training. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"backoff\"\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(_components.del, {\n                children: \"Token\"\n              }), \" attribute to use when no applicable edit tree is found. Defaults to \", _jsx(InlineCode, {\n                children: \"orth\"\n              }), \". \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"min_tree_freq\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Minimum frequency of an edit tree in the training set to be used. Defaults to \", _jsx(InlineCode, {\n                children: \"3\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"overwrite\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether existing annotation is overwritten. Defaults to \", _jsx(InlineCode, {\n                children: \"False\"\n              }), \". \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"top_k\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of most probable edit trees to try before resorting to \", _jsx(InlineCode, {\n                children: \"backoff\"\n              }), \". Defaults to \", _jsx(InlineCode, {\n                children: \"1\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"scorer\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The scoring method. Defaults to \", _jsx(_components.a, {\n                href: \"/api/scorer#score_token_attr\",\n                children: _jsx(InlineCode, {\n                  children: \"Scorer.score_token_attr\"\n                })\n              }), \" for the attribute \", _jsx(InlineCode, {\n                children: \"\\\"lemma\\\"\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Optional[Callable]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-call\",\n      children: [_jsx(_components.h2, {\n        id: \"call\",\n        tag: \"method\",\n        children: \"EditTreeLemmatizer.__call__ \"\n      }), _jsxs(_components.p, {\n        children: [\"Apply the pipe to one document. The document is modified in place, and returned.\\nThis usually happens under the hood when the \", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \" object is called on a text\\nand all pipeline components are applied to the \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" in order. Both\\n\", _jsx(_components.a, {\n          href: \"/api/edittreelemmatizer#call\",\n          children: _jsx(InlineCode, {\n            children: \"__call__\"\n          })\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"/api/edittreelemmatizer#pipe\",\n          children: _jsx(InlineCode, {\n            children: \"pipe\"\n          })\n        }), \" delegate to the\\n\", _jsx(_components.a, {\n          href: \"/api/edittreelemmatizer#predict\",\n          children: _jsx(InlineCode, {\n            children: \"predict\"\n          })\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"/api/edittreelemmatizer#set_annotations\",\n          children: _jsx(InlineCode, {\n            children: \"set_annotations\"\n          })\n        }), \" methods.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"This is a sentence.\\\")\\nlemmatizer = nlp.add_pipe(\\\"trainable_lemmatizer\\\", name=\\\"lemmatizer\\\")\\n# This usually happens under the hood\\nprocessed = lemmatizer(doc)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"doc\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The document to process. \", _jsx(_components.del, {\n                children: \"Doc\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The processed document. \", _jsx(_components.del, {\n                children: \"Doc\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-pipe\",\n      children: [_jsx(_components.h2, {\n        id: \"pipe\",\n        tag: \"method\",\n        children: \"EditTreeLemmatizer.pipe \"\n      }), _jsxs(_components.p, {\n        children: [\"Apply the pipe to a stream of documents. This usually happens under the hood\\nwhen the \", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \" object is called on a text and all pipeline components are\\napplied to the \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" in order. Both \", _jsx(_components.a, {\n          href: \"/api/edittreelemmatizer#call\",\n          children: _jsx(InlineCode, {\n            children: \"__call__\"\n          })\n        }), \"\\nand \", _jsx(_components.a, {\n          href: \"/api/edittreelemmatizer#pipe\",\n          children: _jsx(InlineCode, {\n            children: \"pipe\"\n          })\n        }), \" delegate to the\\n\", _jsx(_components.a, {\n          href: \"/api/edittreelemmatizer#predict\",\n          children: _jsx(InlineCode, {\n            children: \"predict\"\n          })\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"/api/edittreelemmatizer#set_annotations\",\n          children: _jsx(InlineCode, {\n            children: \"set_annotations\"\n          })\n        }), \" methods.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"lemmatizer = nlp.add_pipe(\\\"trainable_lemmatizer\\\", name=\\\"lemmatizer\\\")\\nfor doc in lemmatizer.pipe(docs, batch_size=50):\\n    pass\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"stream\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A stream of documents. \", _jsx(_components.del, {\n                children: \"Iterable[Doc]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"batch_size\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of documents to buffer. Defaults to \", _jsx(InlineCode, {\n                children: \"128\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"YIELDS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The processed documents in order. \", _jsx(_components.del, {\n                children: \"Doc\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-initialize\",\n      children: [_jsx(_components.h2, {\n        id: \"initialize\",\n        tag: \"method\",\n        version: \"3\",\n        children: \"EditTreeLemmatizer.initialize \"\n      }), _jsxs(_components.p, {\n        children: [\"Initialize the component for training. \", _jsx(InlineCode, {\n          children: \"get_examples\"\n        }), \" should be a function that\\nreturns an iterable of \", _jsx(_components.a, {\n          href: \"/api/example\",\n          children: _jsx(InlineCode, {\n            children: \"Example\"\n          })\n        }), \" objects. \", _jsx(_components.strong, {\n          children: \"At least one example\\nshould be supplied.\"\n        }), \" The data examples are used to \", _jsx(_components.strong, {\n          children: \"initialize the model\"\n        }), \" of\\nthe component and can either be the full training data or a representative\\nsample. Initialization includes validating the network,\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/usage-models#validation\",\n          children: \"inferring missing shapes\"\n        }), \" and\\nsetting up the label scheme based on the data. This method is typically called\\nby \", _jsx(_components.a, {\n          href: \"/api/language#initialize\",\n          children: _jsx(InlineCode, {\n            children: \"Language.initialize\"\n          })\n        }), \" and lets you customize\\narguments it receives via the\\n\", _jsx(_components.a, {\n          href: \"/api/data-formats#config-initialize\",\n          children: _jsx(InlineCode, {\n            children: \"[initialize.components]\"\n          })\n        }), \" block in the\\nconfig.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"lemmatizer = nlp.add_pipe(\\\"trainable_lemmatizer\\\", name=\\\"lemmatizer\\\")\\nlemmatizer.initialize(lambda: examples, nlp=nlp)\\n\"\n          })\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            title: \"config.cfg\",\n            children: \"[initialize.components.lemmatizer]\\n\\n[initialize.components.lemmatizer.labels]\\n@readers = \\\"spacy.read_labels.v1\\\"\\npath = \\\"corpus/labels/lemmatizer.json\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"get_examples\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Function that returns gold-standard annotations in the form of \", _jsx(_components.a, {\n                href: \"/api/example\",\n                children: _jsx(InlineCode, {\n                  children: \"Example\"\n                })\n              }), \" objects. Must contain at least one \", _jsx(InlineCode, {\n                children: \"Example\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Callable[[], Iterable[Example]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"nlp\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The current \", _jsx(InlineCode, {\n                children: \"nlp\"\n              }), \" object. Defaults to \", _jsx(InlineCode, {\n                children: \"None\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Optional[Language]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"labels\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The label information to add to the component, as provided by the \", _jsx(_components.a, {\n                href: \"#label_data\",\n                children: _jsx(InlineCode, {\n                  children: \"label_data\"\n                })\n              }), \" property after initialization. To generate a reusable JSON file from your data, you should run the \", _jsx(_components.a, {\n                href: \"/api/cli#init-labels\",\n                children: _jsx(InlineCode, {\n                  children: \"init labels\"\n                })\n              }), \" command. If no labels are provided, the \", _jsx(InlineCode, {\n                children: \"get_examples\"\n              }), \" callback is used to extract the labels from the data, which may be a lot slower. \", _jsx(_components.del, {\n                children: \"Optional[Iterable[str]]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-predict\",\n      children: [_jsx(_components.h2, {\n        id: \"predict\",\n        tag: \"method\",\n        children: \"EditTreeLemmatizer.predict \"\n      }), _jsxs(_components.p, {\n        children: [\"Apply the componentâs model to a batch of \", _jsx(_components.a, {\n          href: \"/api/doc\",\n          children: _jsx(InlineCode, {\n            children: \"Doc\"\n          })\n        }), \" objects, without\\nmodifying them.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"lemmatizer = nlp.add_pipe(\\\"trainable_lemmatizer\\\", name=\\\"lemmatizer\\\")\\ntree_ids = lemmatizer.predict([doc1, doc2])\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"docs\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The documents to predict. \", _jsx(_components.del, {\n                children: \"Iterable[Doc]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsx(_components.td, {\n              children: \"The modelâs prediction for each document.\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-set_annotations\",\n      children: [_jsx(_components.h2, {\n        id: \"set_annotations\",\n        tag: \"method\",\n        children: \"EditTreeLemmatizer.set_annotations \"\n      }), _jsxs(_components.p, {\n        children: [\"Modify a batch of \", _jsx(_components.a, {\n          href: \"/api/doc\",\n          children: _jsx(InlineCode, {\n            children: \"Doc\"\n          })\n        }), \" objects, using pre-computed tree\\nidentifiers.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"lemmatizer = nlp.add_pipe(\\\"trainable_lemmatizer\\\", name=\\\"lemmatizer\\\")\\ntree_ids = lemmatizer.predict([doc1, doc2])\\nlemmatizer.set_annotations([doc1, doc2], tree_ids)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"docs\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The documents to modify. \", _jsx(_components.del, {\n                children: \"Iterable[Doc]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"tree_ids\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The identifiers of the edit trees to apply, produced by \", _jsx(InlineCode, {\n                children: \"EditTreeLemmatizer.predict\"\n              }), \".\"]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-update\",\n      children: [_jsx(_components.h2, {\n        id: \"update\",\n        tag: \"method\",\n        children: \"EditTreeLemmatizer.update \"\n      }), _jsxs(_components.p, {\n        children: [\"Learn from a batch of \", _jsx(_components.a, {\n          href: \"/api/example\",\n          children: _jsx(InlineCode, {\n            children: \"Example\"\n          })\n        }), \" objects containing the\\npredictions and gold-standard annotations, and update the componentâs model.\\nDelegates to \", _jsx(_components.a, {\n          href: \"/api/edittreelemmatizer#predict\",\n          children: _jsx(InlineCode, {\n            children: \"predict\"\n          })\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"/api/edittreelemmatizer#get_loss\",\n          children: _jsx(InlineCode, {\n            children: \"get_loss\"\n          })\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"lemmatizer = nlp.add_pipe(\\\"trainable_lemmatizer\\\", name=\\\"lemmatizer\\\")\\noptimizer = nlp.initialize()\\nlosses = lemmatizer.update(examples, sgd=optimizer)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"examples\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A batch of \", _jsx(_components.a, {\n                href: \"/api/example\",\n                children: _jsx(InlineCode, {\n                  children: \"Example\"\n                })\n              }), \" objects to learn from. \", _jsx(_components.del, {\n                children: \"Iterable[Example]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"drop\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The dropout rate. \", _jsx(_components.del, {\n                children: \"float\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"sgd\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"An optimizer. Will be created via \", _jsx(_components.a, {\n                href: \"#create_optimizer\",\n                children: _jsx(InlineCode, {\n                  children: \"create_optimizer\"\n                })\n              }), \" if not set. \", _jsx(_components.del, {\n                children: \"Optional[Optimizer]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"losses\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Optional record of the loss during training. Updated using the component name as the key. \", _jsx(_components.del, {\n                children: \"Optional[Dict[str, float]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The updated \", _jsx(InlineCode, {\n                children: \"losses\"\n              }), \" dictionary. \", _jsx(_components.del, {\n                children: \"Dict[str, float]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_loss\",\n      children: [_jsx(_components.h2, {\n        id: \"get_loss\",\n        tag: \"method\",\n        children: \"EditTreeLemmatizer.get_loss \"\n      }), _jsx(_components.p, {\n        children: \"Find the loss and gradient of loss for the batch of documents and their\\npredicted scores.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"lemmatizer = nlp.add_pipe(\\\"trainable_lemmatizer\\\", name=\\\"lemmatizer\\\")\\nscores = lemmatizer.model.begin_update([eg.predicted for eg in examples])\\nloss, d_loss = lemmatizer.get_loss(examples, scores)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"examples\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The batch of examples. \", _jsx(_components.del, {\n                children: \"Iterable[Example]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"scores\"\n              })\n            }), _jsx(_components.td, {\n              children: \"Scores representing the modelâs predictions.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The loss and the gradient, i.e. \", _jsx(InlineCode, {\n                children: \"(loss, gradient)\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Tuple[float, float]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-create_optimizer\",\n      children: [_jsx(_components.h2, {\n        id: \"create_optimizer\",\n        tag: \"method\",\n        children: \"EditTreeLemmatizer.create_optimizer \"\n      }), _jsx(_components.p, {\n        children: \"Create an optimizer for the pipeline component.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"lemmatizer = nlp.add_pipe(\\\"trainable_lemmatizer\\\", name=\\\"lemmatizer\\\")\\noptimizer = lemmatizer.create_optimizer()\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The optimizer. \", _jsx(_components.del, {\n                children: \"Optimizer\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-use_params\",\n      children: [_jsx(_components.h2, {\n        id: \"use_params\",\n        tag: \"method, contextmanager\",\n        children: \"EditTreeLemmatizer.use_params \"\n      }), _jsx(_components.p, {\n        children: \"Modify the pipeâs model, to use the given parameter values. At the end of the\\ncontext, the original parameters are restored.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"lemmatizer = nlp.add_pipe(\\\"trainable_lemmatizer\\\", name=\\\"lemmatizer\\\")\\nwith lemmatizer.use_params(optimizer.averages):\\n    lemmatizer.to_disk(\\\"/best_model\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"params\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The parameter values to use in the model. \", _jsx(_components.del, {\n                children: \"dict\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-to_disk\",\n      children: [_jsx(_components.h2, {\n        id: \"to_disk\",\n        tag: \"method\",\n        children: \"EditTreeLemmatizer.to_disk \"\n      }), _jsx(_components.p, {\n        children: \"Serialize the pipe to disk.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"lemmatizer = nlp.add_pipe(\\\"trainable_lemmatizer\\\", name=\\\"lemmatizer\\\")\\nlemmatizer.to_disk(\\\"/path/to/lemmatizer\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"path\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A path to a directory, which will be created if it doesnât exist. Paths may be either strings or \", _jsx(InlineCode, {\n                children: \"Path\"\n              }), \"-like objects. \", _jsx(_components.del, {\n                children: \"Union[str, Path]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"String names of \", _jsx(_components.a, {\n                href: \"#serialization-fields\",\n                children: \"serialization fields\"\n              }), \" to exclude. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-from_disk\",\n      children: [_jsx(_components.h2, {\n        id: \"from_disk\",\n        tag: \"method\",\n        children: \"EditTreeLemmatizer.from_disk \"\n      }), _jsx(_components.p, {\n        children: \"Load the pipe from disk. Modifies the object in place and returns it.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"lemmatizer = nlp.add_pipe(\\\"trainable_lemmatizer\\\", name=\\\"lemmatizer\\\")\\nlemmatizer.from_disk(\\\"/path/to/lemmatizer\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"path\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A path to a directory. Paths may be either strings or \", _jsx(InlineCode, {\n                children: \"Path\"\n              }), \"-like objects. \", _jsx(_components.del, {\n                children: \"Union[str, Path]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"String names of \", _jsx(_components.a, {\n                href: \"#serialization-fields\",\n                children: \"serialization fields\"\n              }), \" to exclude. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The modified \", _jsx(InlineCode, {\n                children: \"EditTreeLemmatizer\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"EditTreeLemmatizer\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-to_bytes\",\n      children: [_jsx(_components.h2, {\n        id: \"to_bytes\",\n        tag: \"method\",\n        children: \"EditTreeLemmatizer.to_bytes \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"lemmatizer = nlp.add_pipe(\\\"trainable_lemmatizer\\\", name=\\\"lemmatizer\\\")\\nlemmatizer_bytes = lemmatizer.to_bytes()\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"Serialize the pipe to a bytestring.\"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"String names of \", _jsx(_components.a, {\n                href: \"#serialization-fields\",\n                children: \"serialization fields\"\n              }), \" to exclude. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The serialized form of the \", _jsx(InlineCode, {\n                children: \"EditTreeLemmatizer\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"bytes\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-from_bytes\",\n      children: [_jsx(_components.h2, {\n        id: \"from_bytes\",\n        tag: \"method\",\n        children: \"EditTreeLemmatizer.from_bytes \"\n      }), _jsx(_components.p, {\n        children: \"Load the pipe from a bytestring. Modifies the object in place and returns it.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"lemmatizer_bytes = lemmatizer.to_bytes()\\nlemmatizer = nlp.add_pipe(\\\"trainable_lemmatizer\\\", name=\\\"lemmatizer\\\")\\nlemmatizer.from_bytes(lemmatizer_bytes)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"bytes_data\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The data to load from. \", _jsx(_components.del, {\n                children: \"bytes\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"String names of \", _jsx(_components.a, {\n                href: \"#serialization-fields\",\n                children: \"serialization fields\"\n              }), \" to exclude. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The \", _jsx(InlineCode, {\n                children: \"EditTreeLemmatizer\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"EditTreeLemmatizer\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-labels\",\n      children: [_jsx(_components.h2, {\n        id: \"labels\",\n        tag: \"property\",\n        children: \"EditTreeLemmatizer.labels \"\n      }), _jsx(_components.p, {\n        children: \"The labels currently added to the component.\"\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        title: \"Interpretability of the labels\",\n        children: _jsxs(_components.p, {\n          children: [\"The \", _jsx(InlineCode, {\n            children: \"EditTreeLemmatizer\"\n          }), \" labels are not useful by themselves, since they are\\nidentifiers of edit trees.\"]\n        })\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The labels added to the component. \", _jsx(_components.del, {\n                children: \"Tuple[str, â¦]\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-label_data\",\n      children: [_jsx(_components.h2, {\n        id: \"label_data\",\n        tag: \"property\",\n        version: \"3\",\n        children: \"EditTreeLemmatizer.label_data \"\n      }), _jsxs(_components.p, {\n        children: [\"The labels currently added to the component and their internal meta information.\\nThis is the data generated by \", _jsx(_components.a, {\n          href: \"/api/cli#init-labels\",\n          children: _jsx(InlineCode, {\n            children: \"init labels\"\n          })\n        }), \" and used by\\n\", _jsx(_components.a, {\n          href: \"/api/edittreelemmatizer#initialize\",\n          children: _jsx(InlineCode, {\n            children: \"EditTreeLemmatizer.initialize\"\n          })\n        }), \" to\\ninitialize the model with a pre-defined label set.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"labels = lemmatizer.label_data\\nlemmatizer.initialize(lambda: [], nlp=nlp, labels=labels)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The label data added to the component. \", _jsx(_components.del, {\n                children: \"Tuple[str, â¦]\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-serialization-fields\",\n      children: [_jsx(_components.h2, {\n        id: \"serialization-fields\",\n        children: \"Serialization fields \"\n      }), _jsxs(_components.p, {\n        children: [\"During serialization, spaCy will export several data fields used to restore\\ndifferent aspects of the object. If needed, you can exclude them from\\nserialization by passing in the string names via the \", _jsx(InlineCode, {\n          children: \"exclude\"\n        }), \" argument.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"data = lemmatizer.to_disk(\\\"/path\\\", exclude=[\\\"vocab\\\"])\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vocab\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The shared \", _jsx(_components.a, {\n                href: \"/api/vocab\",\n                children: _jsx(InlineCode, {\n                  children: \"Vocab\"\n                })\n              }), \".\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"cfg\"\n              })\n            }), _jsx(_components.td, {\n              children: \"The config file. You usually donât want to exclude this.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"model\"\n              })\n            }), _jsx(_components.td, {\n              children: \"The binary model data. You usually donât want to exclude this.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"trees\"\n              })\n            }), _jsx(_components.td, {\n              children: \"The edit trees. You usually donât want to exclude this.\"\n            })]\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"EditTreeLemmatizer","tag":"class","source":"spacy/pipeline/edit_tree_lemmatizer.py","version":3.3,"teaser":"Pipeline component for lemmatization","api_base_class":"/api/pipe","api_string_name":"trainable_lemmatizer","api_trainable":true},"scope":{}},"sectionTitle":"API Documentation","theme":"green","section":"api","apiDetails":{"stringName":"trainable_lemmatizer","baseClass":null,"trainable":true},"isIndex":false,"next":null},"__N_SSG":true}