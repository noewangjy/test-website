{"pageProps":{"title":"Vectors","teaser":"Store, save and load word vectors","tag":"class","source":"spacy/vectors.pyx","version":2,"slug":"/api/vectors","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    pre: \"pre\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    em: \"em\",\n    del: \"del\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {InlineCode, Tag} = _components;\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  if (!Tag) _missingMdxReference(\"Tag\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.section, {\n      children: [_jsxs(_components.p, {\n        children: [\"Vectors data is kept in the \", _jsx(InlineCode, {\n          children: \"Vectors.data\"\n        }), \" attribute, which should be an\\ninstance of \", _jsx(InlineCode, {\n          children: \"numpy.ndarray\"\n        }), \" (for CPU vectors) or \", _jsx(InlineCode, {\n          children: \"cupy.ndarray\"\n        }), \" (for GPU\\nvectors).\"]\n      }), _jsxs(_components.p, {\n        children: [\"As of spaCy v3.2, \", _jsx(InlineCode, {\n          children: \"Vectors\"\n        }), \" supports two types of vector tables:\"]\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(InlineCode, {\n            children: \"default\"\n          }), \": A standard vector table (as in spaCy v3.1 and earlier) where each\\nkey is mapped to one row in the vector table. Multiple keys can be mapped to\\nthe same vector, and not all of the rows in the table need to be assigned – so\\n\", _jsx(InlineCode, {\n            children: \"vectors.n_keys\"\n          }), \" may be greater or smaller than \", _jsx(InlineCode, {\n            children: \"vectors.shape[0]\"\n          }), \".\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(InlineCode, {\n            children: \"floret\"\n          }), \": Only supports vectors trained with\\n\", _jsx(_components.a, {\n            href: \"https://github.com/explosion/floret\",\n            children: \"floret\"\n          }), \", an extended version of\\n\", _jsx(_components.a, {\n            href: \"https://fasttext.cc\",\n            children: \"fastText\"\n          }), \" that produces compact vector tables by\\ncombining fastText’s subword ngrams with Bloom embeddings. The compact tables\\nare similar to the \", _jsx(_components.a, {\n            href: \"https://thinc.ai/docs/api-layers#hashembed\",\n            children: _jsx(InlineCode, {\n              children: \"HashEmbed\"\n            })\n          }), \"\\nembeddings already used in many spaCy components. Each word is represented as\\nthe sum of one or more rows as determined by the settings related to character\\nngrams and the hash table.\"]\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-init\",\n      children: [_jsx(_components.h2, {\n        id: \"init\",\n        tag: \"method\",\n        children: \"Vectors.__init__ \"\n      }), _jsxs(_components.p, {\n        children: [\"Create a new vector store. With the default mode, you can set the vector values\\nand keys directly on initialization, or supply a \", _jsx(InlineCode, {\n          children: \"shape\"\n        }), \" keyword argument to\\ncreate an empty table you can add vectors to later. In floret mode, the complete\\nvector data and settings must be provided on initialization and cannot be\\nmodified later.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.vectors import Vectors\\n\\nempty_vectors = Vectors(shape=(10000, 300))\\n\\ndata = numpy.zeros((3, 300), dtype='f')\\nkeys = [\\\"cat\\\", \\\"dog\\\", \\\"rat\\\"]\\nvectors = Vectors(data=data, keys=keys)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"strings\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The string store. A new string store is created if one is not provided. Defaults to \", _jsx(InlineCode, {\n                children: \"None\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Optional[StringStore]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"shape\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Size of the table as \", _jsx(InlineCode, {\n                children: \"(n_entries, n_columns)\"\n              }), \", the number of entries and number of columns. Not required if you’re initializing the object with \", _jsx(InlineCode, {\n                children: \"data\"\n              }), \" and \", _jsx(InlineCode, {\n                children: \"keys\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Tuple[int, int]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"data\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The vector data. \", _jsx(_components.del, {\n                children: \"numpy.ndarray[ndim=2, dtype=float32]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"keys\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A sequence of keys aligned with the data. \", _jsx(_components.del, {\n                children: \"Iterable[Union[str, int]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A name to identify the vectors table. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"mode\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3.2\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"Vectors mode: \", _jsx(InlineCode, {\n                children: \"\\\"default\\\"\"\n              }), \" or \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/floret\",\n                children: _jsx(InlineCode, {\n                  children: \"\\\"floret\\\"\"\n                })\n              }), \" (default: \", _jsx(InlineCode, {\n                children: \"\\\"default\\\"\"\n              }), \"). \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"minn\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3.2\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"The floret char ngram minn (default: \", _jsx(InlineCode, {\n                children: \"0\"\n              }), \"). \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"maxn\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3.2\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"The floret char ngram maxn (default: \", _jsx(InlineCode, {\n                children: \"0\"\n              }), \"). \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"hash_count\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3.2\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"The floret hash count. Supported values: 1—4 (default: \", _jsx(InlineCode, {\n                children: \"1\"\n              }), \"). \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"hash_seed\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3.2\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"The floret hash seed (default: \", _jsx(InlineCode, {\n                children: \"0\"\n              }), \"). \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"bow\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3.2\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"The floret BOW string (default: \", _jsx(InlineCode, {\n                children: \"\\\"<\\\"\"\n              }), \"). \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"eow\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3.2\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"The floret EOW string (default: \", _jsx(InlineCode, {\n                children: \"\\\">\\\"\"\n              }), \"). \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-getitem\",\n      children: [_jsx(_components.h2, {\n        id: \"getitem\",\n        tag: \"method\",\n        children: \"Vectors.__getitem__ \"\n      }), _jsxs(_components.p, {\n        children: [\"Get a vector by key. If the key is not found in the table, a \", _jsx(InlineCode, {\n          children: \"KeyError\"\n        }), \" is\\nraised.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"cat_id = nlp.vocab.strings[\\\"cat\\\"]\\ncat_vector = nlp.vocab.vectors[cat_id]\\nassert cat_vector == nlp.vocab[\\\"cat\\\"].vector\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"key\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The key to get the vector for. \", _jsx(_components.del, {\n                children: \"Union[int, str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The vector for the key. \", _jsx(_components.del, {\n                children: \"numpy.ndarray[ndim=1, dtype=float32]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-setitem\",\n      children: [_jsx(_components.h2, {\n        id: \"setitem\",\n        tag: \"method\",\n        children: \"Vectors.__setitem__ \"\n      }), _jsxs(_components.p, {\n        children: [\"Set a vector for the given key. Not supported for \", _jsx(InlineCode, {\n          children: \"floret\"\n        }), \" mode.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"cat_id = nlp.vocab.strings[\\\"cat\\\"]\\nvector = numpy.random.uniform(-1, 1, (300,))\\nnlp.vocab.vectors[cat_id] = vector\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"key\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The key to set the vector for. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vector\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The vector to set. \", _jsx(_components.del, {\n                children: \"numpy.ndarray[ndim=1, dtype=float32]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-iter\",\n      children: [_jsx(_components.h2, {\n        id: \"iter\",\n        tag: \"method\",\n        children: \"Vectors.__iter__ \"\n      }), _jsxs(_components.p, {\n        children: [\"Iterate over the keys in the table. In \", _jsx(InlineCode, {\n          children: \"floret\"\n        }), \" mode, the keys table is not\\nused.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"for key in nlp.vocab.vectors:\\n   print(key, nlp.vocab.strings[key])\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"YIELDS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A key in the table. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-len\",\n      children: [_jsx(_components.h2, {\n        id: \"len\",\n        tag: \"method\",\n        children: \"Vectors.__len__ \"\n      }), _jsx(_components.p, {\n        children: \"Return the number of vectors in the table.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"vectors = Vectors(shape=(3, 300))\\nassert len(vectors) == 3\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of vectors in the table. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-contains\",\n      children: [_jsx(_components.h2, {\n        id: \"contains\",\n        tag: \"method\",\n        children: \"Vectors.__contains__ \"\n      }), _jsxs(_components.p, {\n        children: [\"Check whether a key has been mapped to a vector entry in the table. In \", _jsx(InlineCode, {\n          children: \"floret\"\n        }), \"\\nmode, returns \", _jsx(InlineCode, {\n          children: \"True\"\n        }), \" for all keys.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"cat_id = nlp.vocab.strings[\\\"cat\\\"]\\nnlp.vocab.vectors.add(cat_id, numpy.random.uniform(-1, 1, (300,)))\\nassert cat_id in vectors\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"key\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The key to check. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether the key has a vector entry. \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-add\",\n      children: [_jsx(_components.h2, {\n        id: \"add\",\n        tag: \"method\",\n        children: \"Vectors.add \"\n      }), _jsxs(_components.p, {\n        children: [\"Add a key to the table, optionally setting a vector value as well. Keys can be\\nmapped to an existing vector by setting \", _jsx(InlineCode, {\n          children: \"row\"\n        }), \", or a new vector can be added. Not\\nsupported for \", _jsx(InlineCode, {\n          children: \"floret\"\n        }), \" mode.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"vector = numpy.random.uniform(-1, 1, (300,))\\ncat_id = nlp.vocab.strings[\\\"cat\\\"]\\nnlp.vocab.vectors.add(cat_id, vector=vector)\\nnlp.vocab.vectors.add(\\\"dog\\\", row=0)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"key\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The key to add. \", _jsx(_components.del, {\n                children: \"Union[str, int]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vector\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"An optional vector to add for the key. \", _jsx(_components.del, {\n                children: \"numpy.ndarray[ndim=1, dtype=float32]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"row\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"An optional row number of a vector to map the key to. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The row the vector was added to. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-resize\",\n      children: [_jsx(_components.h2, {\n        id: \"resize\",\n        tag: \"method\",\n        children: \"Vectors.resize \"\n      }), _jsxs(_components.p, {\n        children: [\"Resize the underlying vectors array. If \", _jsx(InlineCode, {\n          children: \"inplace=True\"\n        }), \", the memory is\\nreallocated. This may cause other references to the data to become invalid, so\\nonly use \", _jsx(InlineCode, {\n          children: \"inplace=True\"\n        }), \" if you’re sure that’s what you want. If the number of\\nvectors is reduced, keys mapped to rows that have been deleted are removed.\\nThese removed items are returned as a list of \", _jsx(InlineCode, {\n          children: \"(key, row)\"\n        }), \" tuples. Not supported\\nfor \", _jsx(InlineCode, {\n          children: \"floret\"\n        }), \" mode.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"removed = nlp.vocab.vectors.resize((10000, 300))\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"shape\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A \", _jsx(InlineCode, {\n                children: \"(rows, dims)\"\n              }), \" tuple describing the number of rows and dimensions. \", _jsx(_components.del, {\n                children: \"Tuple[int, int]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"inplace\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Reallocate the memory. \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The removed items as a list of \", _jsx(InlineCode, {\n                children: \"(key, row)\"\n              }), \" tuples. \", _jsx(_components.del, {\n                children: \"List[Tuple[int, int]]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-keys\",\n      children: [_jsx(_components.h2, {\n        id: \"keys\",\n        tag: \"method\",\n        children: \"Vectors.keys \"\n      }), _jsxs(_components.p, {\n        children: [\"A sequence of the keys in the table. In \", _jsx(InlineCode, {\n          children: \"floret\"\n        }), \" mode, the keys table is not\\nused.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"for key in nlp.vocab.vectors.keys():\\n    print(key, nlp.vocab.strings[key])\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The keys. \", _jsx(_components.del, {\n                children: \"Iterable[int]\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-values\",\n      children: [_jsx(_components.h2, {\n        id: \"values\",\n        tag: \"method\",\n        children: \"Vectors.values \"\n      }), _jsxs(_components.p, {\n        children: [\"Iterate over vectors that have been assigned to at least one key. Note that some\\nvectors may be unassigned, so the number of vectors returned may be less than\\nthe length of the vectors table. In \", _jsx(InlineCode, {\n          children: \"floret\"\n        }), \" mode, the keys table is not used.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"for vector in nlp.vocab.vectors.values():\\n    print(vector)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"YIELDS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A vector in the table. \", _jsx(_components.del, {\n                children: \"numpy.ndarray[ndim=1, dtype=float32]\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-items\",\n      children: [_jsx(_components.h2, {\n        id: \"items\",\n        tag: \"method\",\n        children: \"Vectors.items \"\n      }), _jsxs(_components.p, {\n        children: [\"Iterate over \", _jsx(InlineCode, {\n          children: \"(key, vector)\"\n        }), \" pairs, in order. In \", _jsx(InlineCode, {\n          children: \"floret\"\n        }), \" mode, the keys table\\nis empty.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"for key, vector in nlp.vocab.vectors.items():\\n   print(key, nlp.vocab.strings[key], vector)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"YIELDS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"(key, vector)\"\n              }), \" pairs, in order. \", _jsx(_components.del, {\n                children: \"Tuple[int, numpy.ndarray[ndim=1, dtype=float32]]\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-find\",\n      children: [_jsx(_components.h2, {\n        id: \"find\",\n        tag: \"method\",\n        children: \"Vectors.find \"\n      }), _jsxs(_components.p, {\n        children: [\"Look up one or more keys by row, or vice versa. Not supported for \", _jsx(InlineCode, {\n          children: \"floret\"\n        }), \" mode.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"row = nlp.vocab.vectors.find(key=\\\"cat\\\")\\nrows = nlp.vocab.vectors.find(keys=[\\\"cat\\\", \\\"dog\\\"])\\nkey = nlp.vocab.vectors.find(row=256)\\nkeys = nlp.vocab.vectors.find(rows=[18, 256, 985])\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"key\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Find the row that the given key points to. Returns int, \", _jsx(InlineCode, {\n                children: \"-1\"\n              }), \" if missing. \", _jsx(_components.del, {\n                children: \"Union[str, int]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"keys\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Find rows that the keys point to. Returns \", _jsx(InlineCode, {\n                children: \"numpy.ndarray\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Iterable[Union[str, int]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"row\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Find the first key that points to the row. Returns integer. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"rows\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Find the keys that point to the rows. Returns \", _jsx(InlineCode, {\n                children: \"numpy.ndarray\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Iterable[int]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The requested key, keys, row or rows. \", _jsx(_components.del, {\n                children: \"Union[int, numpy.ndarray[ndim=1, dtype=float32]]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-shape\",\n      children: [_jsx(_components.h2, {\n        id: \"shape\",\n        tag: \"property\",\n        children: \"Vectors.shape \"\n      }), _jsxs(_components.p, {\n        children: [\"Get \", _jsx(InlineCode, {\n          children: \"(rows, dims)\"\n        }), \" tuples of number of rows and number of dimensions in the\\nvector table.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"vectors = Vectors(shape(1, 300))\\nvectors.add(\\\"cat\\\", numpy.random.uniform(-1, 1, (300,)))\\nrows, dims = vectors.shape\\nassert rows == 1\\nassert dims == 300\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A \", _jsx(InlineCode, {\n                children: \"(rows, dims)\"\n              }), \" pair. \", _jsx(_components.del, {\n                children: \"Tuple[int, int]\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-size\",\n      children: [_jsx(_components.h2, {\n        id: \"size\",\n        tag: \"property\",\n        children: \"Vectors.size \"\n      }), _jsxs(_components.p, {\n        children: [\"The vector size, i.e. \", _jsx(InlineCode, {\n          children: \"rows * dims\"\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"vectors = Vectors(shape=(500, 300))\\nassert vectors.size == 150000\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The vector size. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-is_full\",\n      children: [_jsx(_components.h2, {\n        id: \"is_full\",\n        tag: \"property\",\n        children: \"Vectors.is_full \"\n      }), _jsxs(_components.p, {\n        children: [\"Whether the vectors table is full and has no slots are available for new keys.\\nIf a table is full, it can be resized using\\n\", _jsx(_components.a, {\n          href: \"/api/vectors#resize\",\n          children: _jsx(InlineCode, {\n            children: \"Vectors.resize\"\n          })\n        }), \". In \", _jsx(InlineCode, {\n          children: \"floret\"\n        }), \" mode, the table is always\\nfull and cannot be resized.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"vectors = Vectors(shape=(1, 300))\\nvectors.add(\\\"cat\\\", numpy.random.uniform(-1, 1, (300,)))\\nassert vectors.is_full\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether the vectors table is full. \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-n_keys\",\n      children: [_jsx(_components.h2, {\n        id: \"n_keys\",\n        tag: \"property\",\n        children: \"Vectors.n_keys \"\n      }), _jsxs(_components.p, {\n        children: [\"Get the number of keys in the table. Note that this is the number of \", _jsx(_components.em, {\n          children: \"all\"\n        }), \" keys,\\nnot just unique vectors. If several keys are mapped to the same vectors, they\\nwill be counted individually. In \", _jsx(InlineCode, {\n          children: \"floret\"\n        }), \" mode, the keys table is not used.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"vectors = Vectors(shape=(10, 300))\\nassert len(vectors) == 10\\nassert vectors.n_keys == 0\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of all keys in the table. Returns \", _jsx(InlineCode, {\n                children: \"-1\"\n              }), \" for floret vectors. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-most_similar\",\n      children: [_jsx(_components.h2, {\n        id: \"most_similar\",\n        tag: \"method\",\n        children: \"Vectors.most_similar \"\n      }), _jsxs(_components.p, {\n        children: [\"For each of the given vectors, find the \", _jsx(InlineCode, {\n          children: \"n\"\n        }), \" most similar entries to it by\\ncosine. Queries are by vector. Results are returned as a\\n\", _jsx(InlineCode, {\n          children: \"(keys, best_rows, scores)\"\n        }), \" tuple. If \", _jsx(InlineCode, {\n          children: \"queries\"\n        }), \" is large, the calculations are\\nperformed in chunks to avoid consuming too much memory. You can set the\\n\", _jsx(InlineCode, {\n          children: \"batch_size\"\n        }), \" to control the size/space trade-off during the calculations. Not\\nsupported for \", _jsx(InlineCode, {\n          children: \"floret\"\n        }), \" mode.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"queries = numpy.asarray([numpy.random.uniform(-1, 1, (300,))])\\nmost_similar = nlp.vocab.vectors.most_similar(queries, n=10)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"queries\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"An array with one or more vectors. \", _jsx(_components.del, {\n                children: \"numpy.ndarray\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"batch_size\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The batch size to use. Default to \", _jsx(InlineCode, {\n                children: \"1024\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"n\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of entries to return for each query. Defaults to \", _jsx(InlineCode, {\n                children: \"1\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"sort\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether to sort the entries returned by score. Defaults to \", _jsx(InlineCode, {\n                children: \"True\"\n              }), \". \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The most similar entries as a \", _jsx(InlineCode, {\n                children: \"(keys, best_rows, scores)\"\n              }), \" tuple. \", _jsx(_components.del, {\n                children: \"Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_batch\",\n      children: [_jsx(_components.h2, {\n        id: \"get_batch\",\n        tag: \"method\",\n        version: \"3.2\",\n        children: \"Vectors.get_batch \"\n      }), _jsx(_components.p, {\n        children: \"Get the vectors for the provided keys efficiently as a batch.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"words = [\\\"cat\\\", \\\"dog\\\"]\\nvectors = nlp.vocab.vectors.get_batch(words)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"keys\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The keys. \", _jsx(_components.del, {\n                children: \"Iterable[Union[int, str]]\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-to_ops\",\n      children: [_jsx(_components.h2, {\n        id: \"to_ops\",\n        tag: \"method\",\n        children: \"Vectors.to_ops \"\n      }), _jsx(_components.p, {\n        children: \"Change the embedding matrix to use different Thinc ops.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from thinc.api import NumpyOps\\n\\nvectors.to_ops(NumpyOps())\\n\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"ops\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The Thinc ops to switch the embedding matrix to. \", _jsx(_components.del, {\n                children: \"Ops\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-to_disk\",\n      children: [_jsx(_components.h2, {\n        id: \"to_disk\",\n        tag: \"method\",\n        children: \"Vectors.to_disk \"\n      }), _jsx(_components.p, {\n        children: \"Save the current state to a directory.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"vectors.to_disk(\\\"/path/to/vectors\\\")\\n\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"path\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A path to a directory, which will be created if it doesn’t exist. Paths may be either strings or \", _jsx(InlineCode, {\n                children: \"Path\"\n              }), \"-like objects. \", _jsx(_components.del, {\n                children: \"Union[str, Path]\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-from_disk\",\n      children: [_jsx(_components.h2, {\n        id: \"from_disk\",\n        tag: \"method\",\n        children: \"Vectors.from_disk \"\n      }), _jsx(_components.p, {\n        children: \"Loads state from a directory. Modifies the object in place and returns it.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"vectors = Vectors(StringStore())\\nvectors.from_disk(\\\"/path/to/vectors\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"path\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A path to a directory. Paths may be either strings or \", _jsx(InlineCode, {\n                children: \"Path\"\n              }), \"-like objects. \", _jsx(_components.del, {\n                children: \"Union[str, Path]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The modified \", _jsx(InlineCode, {\n                children: \"Vectors\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"Vectors\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-to_bytes\",\n      children: [_jsx(_components.h2, {\n        id: \"to_bytes\",\n        tag: \"method\",\n        children: \"Vectors.to_bytes \"\n      }), _jsx(_components.p, {\n        children: \"Serialize the current state to a binary string.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"vectors_bytes = vectors.to_bytes()\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The serialized form of the \", _jsx(InlineCode, {\n                children: \"Vectors\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"bytes\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-from_bytes\",\n      children: [_jsx(_components.h2, {\n        id: \"from_bytes\",\n        tag: \"method\",\n        children: \"Vectors.from_bytes \"\n      }), _jsx(_components.p, {\n        children: \"Load state from a binary string.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"fron spacy.vectors import Vectors\\nvectors_bytes = vectors.to_bytes()\\nnew_vectors = Vectors(StringStore())\\nnew_vectors.from_bytes(vectors_bytes)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"data\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The data to load from. \", _jsx(_components.del, {\n                children: \"bytes\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The \", _jsx(InlineCode, {\n                children: \"Vectors\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"Vectors\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-attributes\",\n      children: [_jsx(_components.h2, {\n        id: \"attributes\",\n        children: \"Attributes \"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"data\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Stored vectors data. \", _jsx(InlineCode, {\n                children: \"numpy\"\n              }), \" is used for CPU vectors, \", _jsx(InlineCode, {\n                children: \"cupy\"\n              }), \" for GPU vectors. \", _jsx(_components.del, {\n                children: \"Union[numpy.ndarray[ndim=1, dtype=float32], cupy.ndarray[ndim=1, dtype=float32]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"key2row\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Dictionary mapping word hashes to rows in the \", _jsx(InlineCode, {\n                children: \"Vectors.data\"\n              }), \" table. \", _jsx(_components.del, {\n                children: \"Dict[int, int]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"keys\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Array keeping the keys in order, such that \", _jsx(InlineCode, {\n                children: \"keys[vectors.key2row[key]] == key\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Union[numpy.ndarray[ndim=1, dtype=float32], cupy.ndarray[ndim=1, dtype=float32]]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Vectors","teaser":"Store, save and load word vectors","tag":"class","source":"spacy/vectors.pyx","version":2},"scope":{}},"sectionTitle":"API Documentation","theme":"green","section":"api","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false,"next":null},"__N_SSG":true}