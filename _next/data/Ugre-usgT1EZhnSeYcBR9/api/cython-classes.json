{"pageProps":{"title":"Cython Classes","menu":[["Doc","doc"],["Token","token"],["Span","span"],["Lexeme","lexeme"],["Vocab","vocab"],["StringStore","stringstore"]],"slug":"/api/cython-classes","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    del: \"del\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {InlineCode, Infobox} = _components;\n  if (!Infobox) _missingMdxReference(\"Infobox\", true);\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.section, {\n      id: \"section-doc\",\n      children: [_jsx(_components.h2, {\n        id: \"doc\",\n        tag: \"cdef class\",\n        source: \"spacy/tokens/doc.pxd\",\n        children: \"Doc \"\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" object holds an array of \", _jsx(_components.a, {\n          href: \"/api/cython-structs#tokenc\",\n          children: _jsx(InlineCode, {\n            children: \"TokenC\"\n          })\n        }), \"\\nstructs.\"]\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"This section documents the extra C-level attributes and methods that can’t be\\naccessed from Python. For the Python documentation, see \", _jsx(_components.a, {\n            href: \"/api/doc\",\n            children: _jsx(InlineCode, {\n              children: \"Doc\"\n            })\n          }), \".\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"doc_attributes\",\n        children: \"Attributes \"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"mem\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A memory pool. Allocated memory will be freed once the \", _jsx(InlineCode, {\n                children: \"Doc\"\n              }), \" object is garbage collected. \", _jsx(_components.del, {\n                children: \"cymem.Pool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vocab\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A reference to the shared \", _jsx(InlineCode, {\n                children: \"Vocab\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"Vocab\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"c\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A pointer to a \", _jsx(_components.a, {\n                href: \"/api/cython-structs#tokenc\",\n                children: _jsx(InlineCode, {\n                  children: \"TokenC\"\n                })\n              }), \" struct. \", _jsx(_components.del, {\n                children: \"TokenC*\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"length\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of tokens in the document. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"max_length\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The underlying size of the \", _jsx(InlineCode, {\n                children: \"Doc.c\"\n              }), \" array. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })]\n        })]\n      }), _jsx(_components.h3, {\n        id: \"doc_push_back\",\n        tag: \"method\",\n        children: \"Doc.push_back \"\n      }), _jsxs(_components.p, {\n        children: [\"Append a token to the \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \". The token can be provided as a\\n\", _jsx(_components.a, {\n          href: \"/api/cython-structs#lexemec\",\n          children: _jsx(InlineCode, {\n            children: \"LexemeC\"\n          })\n        }), \" or\\n\", _jsx(_components.a, {\n          href: \"/api/cython-structs#tokenc\",\n          children: _jsx(InlineCode, {\n            children: \"TokenC\"\n          })\n        }), \" pointer, using Cython’s\\n\", _jsx(_components.a, {\n          href: \"http://cython.readthedocs.io/en/latest/src/userguide/fusedtypes.html\",\n          children: \"fused types\"\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.tokens cimport Doc\\nfrom spacy.vocab cimport Vocab\\n\\ndoc = Doc(Vocab())\\nlexeme = doc.vocab.get(\\\"hello\\\")\\ndoc.push_back(lexeme, True)\\nassert doc.text == \\\"hello \\\"\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"lex_or_tok\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The word to append to the \", _jsx(InlineCode, {\n                children: \"Doc\"\n              }), \". \", _jsx(_components.del, {\n                children: \"LexemeOrToken\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"has_space\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether the word has trailing whitespace. \", _jsx(_components.del, {\n                children: \"bint\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-token\",\n      children: [_jsx(_components.h2, {\n        id: \"token\",\n        tag: \"cdef class\",\n        source: \"spacy/tokens/token.pxd\",\n        children: \"Token \"\n      }), _jsxs(_components.p, {\n        children: [\"A Cython class providing access and methods for a\\n\", _jsx(_components.a, {\n          href: \"/api/cython-structs#tokenc\",\n          children: _jsx(InlineCode, {\n            children: \"TokenC\"\n          })\n        }), \" struct. Note that the \", _jsx(InlineCode, {\n          children: \"Token\"\n        }), \" object does\\nnot own the struct. It only receives a pointer to it.\"]\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"This section documents the extra C-level attributes and methods that can’t be\\naccessed from Python. For the Python documentation, see \", _jsx(_components.a, {\n            href: \"/api/token\",\n            children: _jsx(InlineCode, {\n              children: \"Token\"\n            })\n          }), \".\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"token_attributes\",\n        children: \"Attributes \"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vocab\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A reference to the shared \", _jsx(InlineCode, {\n                children: \"Vocab\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"Vocab\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"c\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A pointer to a \", _jsx(_components.a, {\n                href: \"/api/cython-structs#tokenc\",\n                children: _jsx(InlineCode, {\n                  children: \"TokenC\"\n                })\n              }), \" struct. \", _jsx(_components.del, {\n                children: \"TokenC*\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"i\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The offset of the token within the document. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"doc\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The parent document. \", _jsx(_components.del, {\n                children: \"Doc\"\n              })]\n            })]\n          })]\n        })]\n      }), _jsx(_components.h3, {\n        id: \"token_cinit\",\n        tag: \"method\",\n        children: \"Token.cinit \"\n      }), _jsxs(_components.p, {\n        children: [\"Create a \", _jsx(InlineCode, {\n          children: \"Token\"\n        }), \" object from a \", _jsx(InlineCode, {\n          children: \"TokenC*\"\n        }), \" pointer.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"token = Token.cinit(&doc.c[3], doc, 3)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vocab\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A reference to the shared \", _jsx(InlineCode, {\n                children: \"Vocab\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Vocab\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"c\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A pointer to a \", _jsx(_components.a, {\n                href: \"/api/cython-structs#tokenc\",\n                children: _jsx(InlineCode, {\n                  children: \"TokenC\"\n                })\n              }), \" struct. \", _jsx(_components.del, {\n                children: \"TokenC*\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"offset\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The offset of the token within the document. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"doc\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The parent document. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-span\",\n      children: [_jsx(_components.h2, {\n        id: \"span\",\n        tag: \"cdef class\",\n        source: \"spacy/tokens/span.pxd\",\n        children: \"Span \"\n      }), _jsxs(_components.p, {\n        children: [\"A Cython class providing access and methods for a slice of a \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" object.\"]\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"This section documents the extra C-level attributes and methods that can’t be\\naccessed from Python. For the Python documentation, see \", _jsx(_components.a, {\n            href: \"/api/span\",\n            children: _jsx(InlineCode, {\n              children: \"Span\"\n            })\n          }), \".\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"span_attributes\",\n        children: \"Attributes \"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"doc\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The parent document. \", _jsx(_components.del, {\n                children: \"Doc\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"start\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The index of the first token of the span. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"end\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The index of the first token after the span. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"start_char\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The index of the first character of the span. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"end_char\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The index of the last character of the span. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"label\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A label to attach to the span, e.g. for named entities. \", _jsx(_components.del, {\n                children: \"attr_t (uint64_t)\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-lexeme\",\n      children: [_jsx(_components.h2, {\n        id: \"lexeme\",\n        tag: \"cdef class\",\n        source: \"spacy/lexeme.pxd\",\n        children: \"Lexeme \"\n      }), _jsx(_components.p, {\n        children: \"A Cython class providing access and methods for an entry in the vocabulary.\"\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"This section documents the extra C-level attributes and methods that can’t be\\naccessed from Python. For the Python documentation, see \", _jsx(_components.a, {\n            href: \"/api/lexeme\",\n            children: _jsx(InlineCode, {\n              children: \"Lexeme\"\n            })\n          }), \".\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"lexeme_attributes\",\n        children: \"Attributes \"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"c\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A pointer to a \", _jsx(_components.a, {\n                href: \"/api/cython-structs#lexemec\",\n                children: _jsx(InlineCode, {\n                  children: \"LexemeC\"\n                })\n              }), \" struct. \", _jsx(_components.del, {\n                children: \"LexemeC*\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vocab\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A reference to the shared \", _jsx(InlineCode, {\n                children: \"Vocab\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"Vocab\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"orth\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"ID of the verbatim text content. \", _jsx(_components.del, {\n                children: \"attr_t (uint64_t)\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-vocab\",\n      children: [_jsx(_components.h2, {\n        id: \"vocab\",\n        tag: \"cdef class\",\n        source: \"spacy/vocab.pxd\",\n        children: \"Vocab \"\n      }), _jsx(_components.p, {\n        children: \"A Cython class providing access and methods for a vocabulary and other data\\nshared across a language.\"\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"This section documents the extra C-level attributes and methods that can’t be\\naccessed from Python. For the Python documentation, see \", _jsx(_components.a, {\n            href: \"/api/vocab\",\n            children: _jsx(InlineCode, {\n              children: \"Vocab\"\n            })\n          }), \".\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"vocab_attributes\",\n        children: \"Attributes \"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"mem\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A memory pool. Allocated memory will be freed once the \", _jsx(InlineCode, {\n                children: \"Vocab\"\n              }), \" object is garbage collected. \", _jsx(_components.del, {\n                children: \"cymem.Pool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"strings\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A \", _jsx(InlineCode, {\n                children: \"StringStore\"\n              }), \" that maps string to hash values and vice versa. \", _jsx(_components.del, {\n                children: \"StringStore\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"length\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of entries in the vocabulary. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })]\n        })]\n      }), _jsx(_components.h3, {\n        id: \"vocab_get\",\n        tag: \"method\",\n        children: \"Vocab.get \"\n      }), _jsxs(_components.p, {\n        children: [\"Retrieve a \", _jsx(_components.a, {\n          href: \"/api/cython-structs#lexemec\",\n          children: _jsx(InlineCode, {\n            children: \"LexemeC*\"\n          })\n        }), \" pointer from the\\nvocabulary.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"lexeme = vocab.get(vocab.mem, \\\"hello\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"mem\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A memory pool. Allocated memory will be freed once the \", _jsx(InlineCode, {\n                children: \"Vocab\"\n              }), \" object is garbage collected. \", _jsx(_components.del, {\n                children: \"cymem.Pool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"string\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The string of the word to look up. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The lexeme in the vocabulary. \", _jsx(_components.del, {\n                children: \"const LexemeC*\"\n              })]\n            })]\n          })]\n        })]\n      }), _jsx(_components.h3, {\n        id: \"vocab_get_by_orth\",\n        tag: \"method\",\n        children: \"Vocab.get_by_orth \"\n      }), _jsxs(_components.p, {\n        children: [\"Retrieve a \", _jsx(_components.a, {\n          href: \"/api/cython-structs#lexemec\",\n          children: _jsx(InlineCode, {\n            children: \"LexemeC*\"\n          })\n        }), \" pointer from the\\nvocabulary.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"lexeme = vocab.get_by_orth(doc[0].lex.norm)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"mem\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A memory pool. Allocated memory will be freed once the \", _jsx(InlineCode, {\n                children: \"Vocab\"\n              }), \" object is garbage collected. \", _jsx(_components.del, {\n                children: \"cymem.Pool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"orth\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"ID of the verbatim text content. \", _jsx(_components.del, {\n                children: \"attr_t (uint64_t)\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The lexeme in the vocabulary. \", _jsx(_components.del, {\n                children: \"const LexemeC*\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-stringstore\",\n      children: [_jsx(_components.h2, {\n        id: \"stringstore\",\n        tag: \"cdef class\",\n        source: \"spacy/strings.pxd\",\n        children: \"StringStore \"\n      }), _jsx(_components.p, {\n        children: \"A lookup table to retrieve strings by 64-bit hashes.\"\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"This section documents the extra C-level attributes and methods that can’t be\\naccessed from Python. For the Python documentation, see\\n\", _jsx(_components.a, {\n            href: \"/api/stringstore\",\n            children: _jsx(InlineCode, {\n              children: \"StringStore\"\n            })\n          }), \".\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"stringstore_attributes\",\n        children: \"Attributes \"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"mem\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A memory pool. Allocated memory will be freed once the \", _jsx(InlineCode, {\n                children: \"StringStore\"\n              }), \" object is garbage collected. \", _jsx(_components.del, {\n                children: \"cymem.Pool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"keys\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A list of hash values in the \", _jsx(InlineCode, {\n                children: \"StringStore\"\n              }), \". \", _jsx(_components.del, {\n                children: \"vector[hash_t] (vector[uint64_t])\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Cython Classes","menu":[["Doc","doc"],["Token","token"],["Span","span"],["Lexeme","lexeme"],["Vocab","vocab"],["StringStore","stringstore"]]},"scope":{}},"sectionTitle":"API Documentation","theme":"green","section":"api","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false,"next":null},"__N_SSG":true}