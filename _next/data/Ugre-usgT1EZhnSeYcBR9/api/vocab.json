{"pageProps":{"title":"Vocab","teaser":"A storage class for vocabulary and other data shared across a language","tag":"class","source":"spacy/vocab.pyx","slug":"/api/vocab","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    pre: \"pre\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    del: \"del\",\n    strong: \"strong\",\n    em: \"em\"\n  }, _provideComponents(), props.components), {InlineCode, Tag} = _components;\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  if (!Tag) _missingMdxReference(\"Tag\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.section, {\n      children: _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"Vocab\"\n        }), \" object provides a lookup table that allows you to access\\n\", _jsx(_components.a, {\n          href: \"/api/lexeme\",\n          children: _jsx(InlineCode, {\n            children: \"Lexeme\"\n          })\n        }), \" objects, as well as the\\n\", _jsx(_components.a, {\n          href: \"/api/stringstore\",\n          children: _jsx(InlineCode, {\n            children: \"StringStore\"\n          })\n        }), \". It also owns underlying C-data that is shared\\nbetween \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" objects.\"]\n      })\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-init\",\n      children: [_jsx(_components.h2, {\n        id: \"init\",\n        tag: \"method\",\n        children: \"Vocab.__init__ \"\n      }), _jsx(_components.p, {\n        children: \"Create the vocabulary.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.vocab import Vocab\\nvocab = Vocab(strings=[\\\"hello\\\", \\\"world\\\"])\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"lex_attr_getters\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A dictionary mapping attribute IDs to functions to compute them. Defaults to \", _jsx(InlineCode, {\n                children: \"None\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Optional[Dict[str, Callable[[str], Any]]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"strings\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A \", _jsx(_components.a, {\n                href: \"/api/stringstore\",\n                children: _jsx(InlineCode, {\n                  children: \"StringStore\"\n                })\n              }), \" that maps strings to hash values, and vice versa, or a list of strings. \", _jsx(_components.del, {\n                children: \"Union[List[str], StringStore]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"lookups\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A \", _jsx(_components.a, {\n                href: \"/api/lookups\",\n                children: _jsx(InlineCode, {\n                  children: \"Lookups\"\n                })\n              }), \" that stores the \", _jsx(InlineCode, {\n                children: \"lexeme_norm\"\n              }), \" and other large lookup tables. Defaults to \", _jsx(InlineCode, {\n                children: \"None\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Optional[Lookups]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"oov_prob\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The default OOV probability. Defaults to \", _jsx(InlineCode, {\n                children: \"-20.0\"\n              }), \". \", _jsx(_components.del, {\n                children: \"float\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vectors_name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A name to identify the vectors table. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"writing_system\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A dictionary describing the language’s writing system. Typically provided by \", _jsx(_components.a, {\n                href: \"/api/language#defaults\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.Defaults\"\n                })\n              }), \". \", _jsx(_components.del, {\n                children: \"Dict[str, Any]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"get_noun_chunks\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A function that yields base noun phrases used for \", _jsx(_components.a, {\n                href: \"/api/doc#noun_chunks\",\n                children: _jsx(InlineCode, {\n                  children: \"Doc.noun_chunks\"\n                })\n              }), \". \", _jsx(_components.del, {\n                children: \"Optional[Callable[[Union[Doc, Span], Iterator[Tuple[int, int, int]]]]]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-len\",\n      children: [_jsx(_components.h2, {\n        id: \"len\",\n        tag: \"method\",\n        children: \"Vocab.__len__ \"\n      }), _jsx(_components.p, {\n        children: \"Get the current number of lexemes in the vocabulary.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"This is a sentence.\\\")\\nassert len(nlp.vocab) > 0\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of lexemes in the vocabulary. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-getitem\",\n      children: [_jsx(_components.h2, {\n        id: \"getitem\",\n        tag: \"method\",\n        children: \"Vocab.__getitem__ \"\n      }), _jsx(_components.p, {\n        children: \"Retrieve a lexeme, given an int ID or a string. If a previously unseen string is\\ngiven, a new lexeme is created and stored.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"apple = nlp.vocab.strings[\\\"apple\\\"]\\nassert nlp.vocab[apple] == nlp.vocab[\\\"apple\\\"]\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"id_or_string\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The hash value of a word, or its string. \", _jsx(_components.del, {\n                children: \"Union[int, str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The lexeme indicated by the given ID. \", _jsx(_components.del, {\n                children: \"Lexeme\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-iter\",\n      children: [_jsx(_components.h2, {\n        id: \"iter\",\n        tag: \"method\",\n        children: \"Vocab.__iter__ \"\n      }), _jsx(_components.p, {\n        children: \"Iterate over the lexemes in the vocabulary.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"stop_words = (lex for lex in nlp.vocab if lex.is_stop)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"YIELDS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"An entry in the vocabulary. \", _jsx(_components.del, {\n                children: \"Lexeme\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-contains\",\n      children: [_jsx(_components.h2, {\n        id: \"contains\",\n        tag: \"method\",\n        children: \"Vocab.__contains__ \"\n      }), _jsxs(_components.p, {\n        children: [\"Check whether the string has an entry in the vocabulary. To get the ID for a\\ngiven string, you need to look it up in\\n\", _jsx(_components.a, {\n          href: \"/api/vocab#attributes\",\n          children: _jsx(InlineCode, {\n            children: \"vocab.strings\"\n          })\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"apple = nlp.vocab.strings[\\\"apple\\\"]\\noov = nlp.vocab.strings[\\\"dskfodkfos\\\"]\\nassert apple in nlp.vocab\\nassert oov not in nlp.vocab\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"string\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The ID string. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether the string has an entry in the vocabulary. \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-add_flag\",\n      children: [_jsx(_components.h2, {\n        id: \"add_flag\",\n        tag: \"method\",\n        children: \"Vocab.add_flag \"\n      }), _jsxs(_components.p, {\n        children: [\"Set a new boolean flag to words in the vocabulary. The \", _jsx(InlineCode, {\n          children: \"flag_getter\"\n        }), \" function\\nwill be called over the words currently in the vocab, and then applied to new\\nwords as they occur. You’ll then be able to access the flag value on each token,\\nusing \", _jsx(InlineCode, {\n          children: \"token.check_flag(flag_id)\"\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"def is_my_product(text):\\n    products = [\\\"spaCy\\\", \\\"Thinc\\\", \\\"displaCy\\\"]\\n    return text in products\\n\\nMY_PRODUCT = nlp.vocab.add_flag(is_my_product)\\ndoc = nlp(\\\"I like spaCy\\\")\\nassert doc[2].check_flag(MY_PRODUCT) == True\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"flag_getter\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A function that takes the lexeme text and returns the boolean flag value. \", _jsx(_components.del, {\n                children: \"Callable[[str], bool]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"flag_id\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"An integer between \", _jsx(InlineCode, {\n                children: \"1\"\n              }), \" and \", _jsx(InlineCode, {\n                children: \"63\"\n              }), \" (inclusive), specifying the bit at which the flag will be stored. If \", _jsx(InlineCode, {\n                children: \"-1\"\n              }), \", the lowest available bit will be chosen. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The integer ID by which the flag value can be checked. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-reset_vectors\",\n      children: [_jsx(_components.h2, {\n        id: \"reset_vectors\",\n        tag: \"method\",\n        version: \"2\",\n        children: \"Vocab.reset_vectors \"\n      }), _jsxs(_components.p, {\n        children: [\"Drop the current vector table. Because all vectors must be the same width, you\\nhave to call this to change the size of the vectors. Only one of the \", _jsx(InlineCode, {\n          children: \"width\"\n        }), \" and\\n\", _jsx(InlineCode, {\n          children: \"shape\"\n        }), \" keyword arguments can be specified.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"nlp.vocab.reset_vectors(width=300)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"width\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The new width. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"shape\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The new shape. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-prune_vectors\",\n      children: [_jsx(_components.h2, {\n        id: \"prune_vectors\",\n        tag: \"method\",\n        version: \"2\",\n        children: \"Vocab.prune_vectors \"\n      }), _jsxs(_components.p, {\n        children: [\"Reduce the current vector table to \", _jsx(InlineCode, {\n          children: \"nr_row\"\n        }), \" unique entries. Words mapped to the\\ndiscarded vectors will be remapped to the closest vector among those remaining.\\nFor example, suppose the original table had vectors for the words:\\n\", _jsx(InlineCode, {\n          children: \"['sat', 'cat', 'feline', 'reclined']\"\n        }), \". If we prune the vector table to, two\\nrows, we would discard the vectors for “feline” and “reclined”. These words\\nwould then be remapped to the closest remaining vector – so “feline” would have\\nthe same vector as “cat”, and “reclined” would have the same vector as “sat”.\\nThe similarities are judged by cosine. The original vectors may be large, so the\\ncosines are calculated in minibatches to reduce memory usage.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"nlp.vocab.prune_vectors(10000)\\nassert len(nlp.vocab.vectors) <= 10000\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"nr_row\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of rows to keep in the vector table. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"batch_size\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Batch of vectors for calculating the similarities. Larger batch sizes might be faster, while temporarily requiring more memory. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A dictionary keyed by removed words mapped to \", _jsx(InlineCode, {\n                children: \"(string, score)\"\n              }), \" tuples, where \", _jsx(InlineCode, {\n                children: \"string\"\n              }), \" is the entry the removed word was mapped to, and \", _jsx(InlineCode, {\n                children: \"score\"\n              }), \" the similarity score between the two words. \", _jsx(_components.del, {\n                children: \"Dict[str, Tuple[str, float]]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-deduplicate_vectors\",\n      children: [_jsx(_components.h2, {\n        id: \"deduplicate_vectors\",\n        tag: \"method\",\n        version: \"3.3\",\n        children: \"Vocab.deduplicate_vectors \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"nlp.vocab.deduplicate_vectors()\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"Remove any duplicate rows from the current vector table, maintaining the\\nmappings for all words in the vectors.\"\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_vector\",\n      children: [_jsx(_components.h2, {\n        id: \"get_vector\",\n        tag: \"method\",\n        version: \"2\",\n        children: \"Vocab.get_vector \"\n      }), _jsxs(_components.p, {\n        children: [\"Retrieve a vector for a word in the vocabulary. Words can be looked up by string\\nor hash value. If the current vectors do not contain an entry for the word, a\\n0-vector with the same number of dimensions\\n(\", _jsx(_components.a, {\n          href: \"#attributes\",\n          children: _jsx(InlineCode, {\n            children: \"Vocab.vectors_length\"\n          })\n        }), \") as the current vectors is returned.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"nlp.vocab.get_vector(\\\"apple\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"orth\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The hash value of a word, or its unicode string. \", _jsx(_components.del, {\n                children: \"Union[int, str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A word vector. Size and shape are determined by the \", _jsx(InlineCode, {\n                children: \"Vocab.vectors\"\n              }), \" instance. \", _jsx(_components.del, {\n                children: \"numpy.ndarray[ndim=1, dtype=float32]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-set_vector\",\n      children: [_jsx(_components.h2, {\n        id: \"set_vector\",\n        tag: \"method\",\n        version: \"2\",\n        children: \"Vocab.set_vector \"\n      }), _jsx(_components.p, {\n        children: \"Set a vector for a word in the vocabulary. Words can be referenced by string or\\nhash value.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"nlp.vocab.set_vector(\\\"apple\\\", array([...]))\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"orth\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The hash value of a word, or its unicode string. \", _jsx(_components.del, {\n                children: \"Union[int, str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vector\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The vector to set. \", _jsx(_components.del, {\n                children: \"numpy.ndarray[ndim=1, dtype=float32]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-has_vector\",\n      children: [_jsx(_components.h2, {\n        id: \"has_vector\",\n        tag: \"method\",\n        version: \"2\",\n        children: \"Vocab.has_vector \"\n      }), _jsxs(_components.p, {\n        children: [\"Check whether a word has a vector. Returns \", _jsx(InlineCode, {\n          children: \"False\"\n        }), \" if no vectors are loaded.\\nWords can be looked up by string or hash value.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"if nlp.vocab.has_vector(\\\"apple\\\"):\\n    vector = nlp.vocab.get_vector(\\\"apple\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"orth\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The hash value of a word, or its unicode string. \", _jsx(_components.del, {\n                children: \"Union[int, str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether the word has a vector. \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-to_disk\",\n      children: [_jsx(_components.h2, {\n        id: \"to_disk\",\n        tag: \"method\",\n        version: \"2\",\n        children: \"Vocab.to_disk \"\n      }), _jsx(_components.p, {\n        children: \"Save the current state to a directory.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"nlp.vocab.to_disk(\\\"/path/to/vocab\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"path\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A path to a directory, which will be created if it doesn’t exist. Paths may be either strings or \", _jsx(InlineCode, {\n                children: \"Path\"\n              }), \"-like objects. \", _jsx(_components.del, {\n                children: \"Union[str, Path]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"String names of \", _jsx(_components.a, {\n                href: \"#serialization-fields\",\n                children: \"serialization fields\"\n              }), \" to exclude. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-from_disk\",\n      children: [_jsx(_components.h2, {\n        id: \"from_disk\",\n        tag: \"method\",\n        version: \"2\",\n        children: \"Vocab.from_disk \"\n      }), _jsx(_components.p, {\n        children: \"Loads state from a directory. Modifies the object in place and returns it.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.vocab import Vocab\\nvocab = Vocab().from_disk(\\\"/path/to/vocab\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"path\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A path to a directory. Paths may be either strings or \", _jsx(InlineCode, {\n                children: \"Path\"\n              }), \"-like objects. \", _jsx(_components.del, {\n                children: \"Union[str, Path]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"String names of \", _jsx(_components.a, {\n                href: \"#serialization-fields\",\n                children: \"serialization fields\"\n              }), \" to exclude. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The modified \", _jsx(InlineCode, {\n                children: \"Vocab\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"Vocab\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-to_bytes\",\n      children: [_jsx(_components.h2, {\n        id: \"to_bytes\",\n        tag: \"method\",\n        children: \"Vocab.to_bytes \"\n      }), _jsx(_components.p, {\n        children: \"Serialize the current state to a binary string.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"vocab_bytes = nlp.vocab.to_bytes()\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"String names of \", _jsx(_components.a, {\n                href: \"#serialization-fields\",\n                children: \"serialization fields\"\n              }), \" to exclude. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The serialized form of the \", _jsx(InlineCode, {\n                children: \"Vocab\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"Vocab\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-from_bytes\",\n      children: [_jsx(_components.h2, {\n        id: \"from_bytes\",\n        tag: \"method\",\n        children: \"Vocab.from_bytes \"\n      }), _jsx(_components.p, {\n        children: \"Load state from a binary string.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.vocab import Vocab\\nvocab_bytes = nlp.vocab.to_bytes()\\nvocab = Vocab()\\nvocab.from_bytes(vocab_bytes)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"bytes_data\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The data to load from. \", _jsx(_components.del, {\n                children: \"bytes\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"String names of \", _jsx(_components.a, {\n                href: \"#serialization-fields\",\n                children: \"serialization fields\"\n              }), \" to exclude. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The \", _jsx(InlineCode, {\n                children: \"Vocab\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"Vocab\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-attributes\",\n      children: [_jsx(_components.h2, {\n        id: \"attributes\",\n        children: \"Attributes \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"apple_id = nlp.vocab.strings[\\\"apple\\\"]\\nassert type(apple_id) == int\\nPERSON = nlp.vocab.strings[\\\"PERSON\\\"]\\nassert type(PERSON) == int\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"strings\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A table managing the string-to-int mapping. \", _jsx(_components.del, {\n                children: \"StringStore\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vectors\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A table associating word IDs to word vectors. \", _jsx(_components.del, {\n                children: \"Vectors\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vectors_length\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Number of dimensions for each word vector. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"lookups\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The available lookup tables in this vocab. \", _jsx(_components.del, {\n                children: \"Lookups\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"writing_system\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A dict with information about the language’s writing system. \", _jsx(_components.del, {\n                children: \"Dict[str, Any]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"get_noun_chunks\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3.0\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"A function that yields base noun phrases used for \", _jsx(_components.a, {\n                href: \"/api/doc#noun_chunks\",\n                children: _jsx(InlineCode, {\n                  children: \"Doc.noun_chunks\"\n                })\n              }), \". \", _jsx(_components.del, {\n                children: \"Optional[Callable[[Union[Doc, Span], Iterator[Tuple[int, int, int]]]]]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-serialization-fields\",\n      children: [_jsx(_components.h2, {\n        id: \"serialization-fields\",\n        children: \"Serialization fields \"\n      }), _jsxs(_components.p, {\n        children: [\"During serialization, spaCy will export several data fields used to restore\\ndifferent aspects of the object. If needed, you can exclude them from\\nserialization by passing in the string names via the \", _jsx(InlineCode, {\n          children: \"exclude\"\n        }), \" argument.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"data = vocab.to_bytes(exclude=[\\\"strings\\\", \\\"vectors\\\"])\\nvocab.from_disk(\\\"./vocab\\\", exclude=[\\\"strings\\\"])\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"strings\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The strings in the \", _jsx(_components.a, {\n                href: \"/api/stringstore\",\n                children: _jsx(InlineCode, {\n                  children: \"StringStore\"\n                })\n              }), \".\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vectors\"\n              })\n            }), _jsx(_components.td, {\n              children: \"The word vectors, if available.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"lookups\"\n              })\n            }), _jsx(_components.td, {\n              children: \"The lookup tables, if available.\"\n            })]\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Vocab","teaser":"A storage class for vocabulary and other data shared across a language","tag":"class","source":"spacy/vocab.pyx"},"scope":{}},"sectionTitle":"API Documentation","theme":"green","section":"api","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false,"next":null},"__N_SSG":true}