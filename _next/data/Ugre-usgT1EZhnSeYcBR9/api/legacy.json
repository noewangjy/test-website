{"pageProps":{"title":"Legacy functions and architectures","teaser":"Archived implementations available through spacy-legacy","source":"spacy/legacy","slug":"/api/legacy","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    pre: \"pre\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    del: \"del\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {InlineCode, Infobox, Accordion} = _components;\n  if (!Accordion) _missingMdxReference(\"Accordion\", true);\n  if (!Infobox) _missingMdxReference(\"Infobox\", true);\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.section, {\n      children: [_jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spacy-legacy\",\n          children: _jsx(InlineCode, {\n            children: \"spacy-legacy\"\n          })\n        }), \" package includes\\noutdated registered functions and architectures. It is installed automatically\\nas a dependency of spaCy, and provides backwards compatibility for archived\\nfunctions that may still be used in projects.\"]\n      }), _jsx(_components.p, {\n        children: \"You can find the detailed documentation of each such legacy function on this\\npage.\"\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-architectures\",\n      children: [_jsx(_components.h2, {\n        id: \"architectures\",\n        children: \"Architectures \"\n      }), _jsxs(_components.p, {\n        children: [\"These functions are available from \", _jsx(InlineCode, {\n          children: \"@spacy.registry.architectures\"\n        }), \".\"]\n      }), _jsx(_components.h3, {\n        id: \"Tok2Vec_v1\",\n        children: \"spacy.Tok2Vec.v1 \"\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"spacy.Tok2Vec.v1\"\n        }), \" architecture was expecting an \", _jsx(InlineCode, {\n          children: \"encode\"\n        }), \" model of type\\n\", _jsx(InlineCode, {\n          children: \"Model[Floats2D, Floats2D]\"\n        }), \" such as \", _jsx(InlineCode, {\n          children: \"spacy.MaxoutWindowEncoder.v1\"\n        }), \" or\\n\", _jsx(InlineCode, {\n          children: \"spacy.MishWindowEncoder.v1\"\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example config\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"[model]\\n@architectures = \\\"spacy.Tok2Vec.v1\\\"\\n\\n[model.embed]\\n@architectures = \\\"spacy.CharacterEmbed.v1\\\"\\n# ...\\n\\n[model.encode]\\n@architectures = \\\"spacy.MaxoutWindowEncoder.v1\\\"\\n# ...\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Construct a tok2vec model out of two subnetworks: one for embedding and one for\\nencoding. See the\\n\", _jsx(_components.a, {\n          href: \"https://explosion.ai/blog/deep-learning-formula-nlp\",\n          children: \"“Embed, Encode, Attend, Predict”\"\n        }), \"\\nblog post for background.\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"embed\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Embed tokens into context-independent word vector representations. For example, \", _jsx(_components.a, {\n                href: \"/api/architectures#CharacterEmbed\",\n                children: \"CharacterEmbed\"\n              }), \" or \", _jsx(_components.a, {\n                href: \"/api/architectures#MultiHashEmbed\",\n                children: \"MultiHashEmbed\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Model[List[Doc], List[Floats2d]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"encode\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Encode context into the embeddings, using an architecture such as a CNN, BiLSTM or transformer. For example, \", _jsx(_components.a, {\n                href: \"/api/legacy#MaxoutWindowEncoder_v1\",\n                children: \"MaxoutWindowEncoder.v1\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Model[Floats2d, Floats2d]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"CREATES\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The model using the architecture. \", _jsx(_components.del, {\n                children: \"Model[List[Doc], List[Floats2d]]\"\n              })]\n            })]\n          })]\n        })]\n      }), _jsx(_components.h3, {\n        id: \"MaxoutWindowEncoder_v1\",\n        children: \"spacy.MaxoutWindowEncoder.v1 \"\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"spacy.MaxoutWindowEncoder.v1\"\n        }), \" architecture was producing a model of type\\n\", _jsx(InlineCode, {\n          children: \"Model[Floats2D, Floats2D]\"\n        }), \". Since \", _jsx(InlineCode, {\n          children: \"spacy.MaxoutWindowEncoder.v2\"\n        }), \", this has been\\nchanged to output type \", _jsx(InlineCode, {\n          children: \"Model[List[Floats2d], List[Floats2d]]\"\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example config\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"[model]\\n@architectures = \\\"spacy.MaxoutWindowEncoder.v1\\\"\\nwidth = 128\\nwindow_size = 1\\nmaxout_pieces = 3\\ndepth = 4\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"Encode context using convolutions with maxout activation, layer normalization\\nand residual connections.\"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"width\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The input and output width. These are required to be the same, to allow residual connections. This value will be determined by the width of the inputs. Recommended values are between \", _jsx(InlineCode, {\n                children: \"64\"\n              }), \" and \", _jsx(InlineCode, {\n                children: \"300\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"window_size\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of words to concatenate around each token to construct the convolution. Recommended value is \", _jsx(InlineCode, {\n                children: \"1\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"maxout_pieces\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of maxout pieces to use. Recommended values are \", _jsx(InlineCode, {\n                children: \"2\"\n              }), \" or \", _jsx(InlineCode, {\n                children: \"3\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"depth\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of convolutional layers. Recommended value is \", _jsx(InlineCode, {\n                children: \"4\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"CREATES\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The model using the architecture. \", _jsx(_components.del, {\n                children: \"Model[Floats2d, Floats2d]\"\n              })]\n            })]\n          })]\n        })]\n      }), _jsx(_components.h3, {\n        id: \"MishWindowEncoder_v1\",\n        children: \"spacy.MishWindowEncoder.v1 \"\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"spacy.MishWindowEncoder.v1\"\n        }), \" architecture was producing a model of type\\n\", _jsx(InlineCode, {\n          children: \"Model[Floats2D, Floats2D]\"\n        }), \". Since \", _jsx(InlineCode, {\n          children: \"spacy.MishWindowEncoder.v2\"\n        }), \", this has been\\nchanged to output type \", _jsx(InlineCode, {\n          children: \"Model[List[Floats2d], List[Floats2d]]\"\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example config\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"[model]\\n@architectures = \\\"spacy.MishWindowEncoder.v1\\\"\\nwidth = 64\\nwindow_size = 1\\ndepth = 4\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Encode context using convolutions with\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-layers#mish\",\n          children: _jsx(InlineCode, {\n            children: \"Mish\"\n          })\n        }), \" activation, layer normalization\\nand residual connections.\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"width\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The input and output width. These are required to be the same, to allow residual connections. This value will be determined by the width of the inputs. Recommended values are between \", _jsx(InlineCode, {\n                children: \"64\"\n              }), \" and \", _jsx(InlineCode, {\n                children: \"300\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"window_size\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of words to concatenate around each token to construct the convolution. Recommended value is \", _jsx(InlineCode, {\n                children: \"1\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"depth\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of convolutional layers. Recommended value is \", _jsx(InlineCode, {\n                children: \"4\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"CREATES\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The model using the architecture. \", _jsx(_components.del, {\n                children: \"Model[Floats2d, Floats2d]\"\n              })]\n            })]\n          })]\n        })]\n      }), _jsx(_components.h3, {\n        id: \"HashEmbedCNN_v1\",\n        children: \"spacy.HashEmbedCNN.v1 \"\n      }), _jsxs(_components.p, {\n        children: [\"Identical to \", _jsx(_components.a, {\n          href: \"/api/architectures#HashEmbedCNN\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.HashEmbedCNN.v2\"\n          })\n        }), \" except\\nusing \", _jsx(_components.a, {\n          href: \"#StaticVectors_v1\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.StaticVectors.v1\"\n          })\n        }), \" if vectors are included.\"]\n      }), _jsx(_components.h3, {\n        id: \"MultiHashEmbed_v1\",\n        children: \"spacy.MultiHashEmbed.v1 \"\n      }), _jsxs(_components.p, {\n        children: [\"Identical to \", _jsx(_components.a, {\n          href: \"/api/architectures#MultiHashEmbed\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.MultiHashEmbed.v2\"\n          })\n        }), \"\\nexcept with \", _jsx(_components.a, {\n          href: \"#StaticVectors_v1\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.StaticVectors.v1\"\n          })\n        }), \" if vectors are\\nincluded.\"]\n      }), _jsx(_components.h3, {\n        id: \"CharacterEmbed_v1\",\n        children: \"spacy.CharacterEmbed.v1 \"\n      }), _jsxs(_components.p, {\n        children: [\"Identical to \", _jsx(_components.a, {\n          href: \"/api/architectures#CharacterEmbed\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.CharacterEmbed.v2\"\n          })\n        }), \"\\nexcept using \", _jsx(_components.a, {\n          href: \"#StaticVectors_v1\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.StaticVectors.v1\"\n          })\n        }), \" if vectors are\\nincluded.\"]\n      }), _jsx(_components.h3, {\n        id: \"TextCatEnsemble_v1\",\n        children: \"spacy.TextCatEnsemble.v1 \"\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"spacy.TextCatEnsemble.v1\"\n        }), \" architecture built an internal \", _jsx(InlineCode, {\n          children: \"tok2vec\"\n        }), \" and\\n\", _jsx(InlineCode, {\n          children: \"linear_model\"\n        }), \". Since \", _jsx(InlineCode, {\n          children: \"spacy.TextCatEnsemble.v2\"\n        }), \", this has been refactored so\\nthat the \", _jsx(InlineCode, {\n          children: \"TextCatEnsemble\"\n        }), \" takes these two sublayers as input.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example Config\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"[model]\\n@architectures = \\\"spacy.TextCatEnsemble.v1\\\"\\nexclusive_classes = false\\npretrained_vectors = null\\nwidth = 64\\nembed_size = 2000\\nconv_depth = 2\\nwindow_size = 1\\nngram_size = 1\\ndropout = null\\nnO = null\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"Stacked ensemble of a bag-of-words model and a neural network model. The neural\\nnetwork has an internal CNN Tok2Vec layer and uses attention.\"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclusive_classes\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether or not categories are mutually exclusive. \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"pretrained_vectors\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether or not pretrained vectors will be used in addition to the feature vectors. \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"width\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Output dimension of the feature encoding step. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"embed_size\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Input dimension of the feature encoding step. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"conv_depth\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Depth of the tok2vec layer. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"window_size\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of contextual vectors to \", _jsx(_components.a, {\n                href: \"https://thinc.ai/docs/api-layers#expand_window\",\n                children: \"concatenate\"\n              }), \" from the left and from the right. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"ngram_size\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Determines the maximum length of the n-grams in the BOW model. For instance, \", _jsx(InlineCode, {\n                children: \"ngram_size=3\"\n              }), \"would give unigram, trigram and bigram features. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"dropout\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The dropout rate. \", _jsx(_components.del, {\n                children: \"float\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"nO\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Output dimension, determined by the number of different labels. If not set, the \", _jsx(_components.a, {\n                href: \"/api/textcategorizer\",\n                children: _jsx(InlineCode, {\n                  children: \"TextCategorizer\"\n                })\n              }), \" component will set it when \", _jsx(InlineCode, {\n                children: \"initialize\"\n              }), \" is called. \", _jsx(_components.del, {\n                children: \"Optional[int]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"CREATES\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The model using the architecture. \", _jsx(_components.del, {\n                children: \"Model[List[Doc], Floats2d]\"\n              })]\n            })]\n          })]\n        })]\n      }), _jsx(_components.h3, {\n        id: \"TextCatCNN_v1\",\n        children: \"spacy.TextCatCNN.v1 \"\n      }), _jsxs(_components.p, {\n        children: [\"Since \", _jsx(InlineCode, {\n          children: \"spacy.TextCatCNN.v2\"\n        }), \", this architecture has become resizable, which means\\nthat you can add labels to a previously trained textcat. \", _jsx(InlineCode, {\n          children: \"TextCatCNN\"\n        }), \" v1 did not\\nyet support that.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example Config\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"[model]\\n@architectures = \\\"spacy.TextCatCNN.v1\\\"\\nexclusive_classes = false\\nnO = null\\n\\n[model.tok2vec]\\n@architectures = \\\"spacy.HashEmbedCNN.v1\\\"\\npretrained_vectors = null\\nwidth = 96\\ndepth = 4\\nembed_size = 2000\\nwindow_size = 1\\nmaxout_pieces = 3\\nsubword_features = true\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"A neural network model where token vectors are calculated using a CNN. The\\nvectors are mean pooled and used as features in a feed-forward network. This\\narchitecture is usually less accurate than the ensemble, but runs faster.\"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclusive_classes\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether or not categories are mutually exclusive. \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"tok2vec\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The \", _jsx(_components.a, {\n                href: \"#tok2vec\",\n                children: _jsx(InlineCode, {\n                  children: \"tok2vec\"\n                })\n              }), \" layer of the model. \", _jsx(_components.del, {\n                children: \"Model\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"nO\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Output dimension, determined by the number of different labels. If not set, the \", _jsx(_components.a, {\n                href: \"/api/textcategorizer\",\n                children: _jsx(InlineCode, {\n                  children: \"TextCategorizer\"\n                })\n              }), \" component will set it when \", _jsx(InlineCode, {\n                children: \"initialize\"\n              }), \" is called. \", _jsx(_components.del, {\n                children: \"Optional[int]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"CREATES\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The model using the architecture. \", _jsx(_components.del, {\n                children: \"Model[List[Doc], Floats2d]\"\n              })]\n            })]\n          })]\n        })]\n      }), _jsx(_components.h3, {\n        id: \"TextCatBOW_v1\",\n        children: \"spacy.TextCatBOW.v1 \"\n      }), _jsxs(_components.p, {\n        children: [\"Since \", _jsx(InlineCode, {\n          children: \"spacy.TextCatBOW.v2\"\n        }), \", this architecture has become resizable, which means\\nthat you can add labels to a previously trained textcat. \", _jsx(InlineCode, {\n          children: \"TextCatBOW\"\n        }), \" v1 did not\\nyet support that.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example Config\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"[model]\\n@architectures = \\\"spacy.TextCatBOW.v1\\\"\\nexclusive_classes = false\\nngram_size = 1\\nno_output_layer = false\\nnO = null\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"An n-gram “bag-of-words” model. This architecture should run much faster than\\nthe others, but may not be as accurate, especially if texts are short.\"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclusive_classes\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether or not categories are mutually exclusive. \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"ngram_size\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Determines the maximum length of the n-grams in the BOW model. For instance, \", _jsx(InlineCode, {\n                children: \"ngram_size=3\"\n              }), \" would give unigram, trigram and bigram features. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"no_output_layer\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether or not to add an output layer to the model (\", _jsx(InlineCode, {\n                children: \"Softmax\"\n              }), \" activation if \", _jsx(InlineCode, {\n                children: \"exclusive_classes\"\n              }), \" is \", _jsx(InlineCode, {\n                children: \"True\"\n              }), \", else \", _jsx(InlineCode, {\n                children: \"Logistic\"\n              }), \"). \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"nO\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Output dimension, determined by the number of different labels. If not set, the \", _jsx(_components.a, {\n                href: \"/api/textcategorizer\",\n                children: _jsx(InlineCode, {\n                  children: \"TextCategorizer\"\n                })\n              }), \" component will set it when \", _jsx(InlineCode, {\n                children: \"initialize\"\n              }), \" is called. \", _jsx(_components.del, {\n                children: \"Optional[int]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"CREATES\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The model using the architecture. \", _jsx(_components.del, {\n                children: \"Model[List[Doc], Floats2d]\"\n              })]\n            })]\n          })]\n        })]\n      }), _jsx(_components.h3, {\n        id: \"TransitionBasedParser_v1\",\n        children: \"spacy.TransitionBasedParser.v1 \"\n      }), _jsxs(_components.p, {\n        children: [\"Identical to\\n\", _jsx(_components.a, {\n          href: \"/api/architectures#TransitionBasedParser\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.TransitionBasedParser.v2\"\n          })\n        }), \"\\nexcept the \", _jsx(InlineCode, {\n          children: \"use_upper\"\n        }), \" was set to \", _jsx(InlineCode, {\n          children: \"True\"\n        }), \" by default.\"]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-layers\",\n      children: [_jsx(_components.h2, {\n        id: \"layers\",\n        children: \"Layers \"\n      }), _jsxs(_components.p, {\n        children: [\"These functions are available from \", _jsx(InlineCode, {\n          children: \"@spacy.registry.layers\"\n        }), \".\"]\n      }), _jsx(_components.h3, {\n        id: \"StaticVectors_v1\",\n        children: \"spacy.StaticVectors.v1 \"\n      }), _jsxs(_components.p, {\n        children: [\"Identical to \", _jsx(_components.a, {\n          href: \"/api/architectures#StaticVectors\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.StaticVectors.v2\"\n          })\n        }), \" except\\nfor the handling of tokens without vectors.\"]\n      }), _jsx(Infobox, {\n        title: \"Bugs for tokens without vectors\",\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [_jsx(InlineCode, {\n            children: \"spacy.StaticVectors.v1\"\n          }), \" maps tokens without vectors to the final row in the\\nvectors table, which causes the model predictions to change if new vectors are\\nadded to an existing vectors table. See more details in\\n\", _jsx(_components.a, {\n            href: \"https://github.com/explosion/spaCy/issues/7662#issuecomment-813925655\",\n            children: \"issue #7662\"\n          }), \".\"]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-loggers\",\n      children: [_jsx(_components.h2, {\n        id: \"loggers\",\n        children: \"Loggers \"\n      }), _jsxs(_components.p, {\n        children: [\"These functions are available from \", _jsx(InlineCode, {\n          children: \"@spacy.registry.loggers\"\n        }), \".\"]\n      }), _jsx(_components.h3, {\n        id: \"ConsoleLogger_v1\",\n        children: \"spacy.ConsoleLogger.v1 \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example config\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"[training.logger]\\n@loggers = \\\"spacy.ConsoleLogger.v1\\\"\\nprogress_bar = true\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"Writes the results of a training step to the console in a tabular format.\"\n      }), _jsxs(Accordion, {\n        title: \"Example console output\",\n        spaced: true,\n        children: [_jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            lang: \"bash\",\n            children: \"$ python -m spacy train config.cfg\\n\"\n          })\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            lang: \"none\",\n            children: \"ℹ Using CPU\\nℹ Loading config and nlp from: config.cfg\\nℹ Pipeline: ['tok2vec', 'tagger']\\nℹ Start training\\nℹ Training. Initial learn rate: 0.0\\n\\nE     #        LOSS TOK2VEC   LOSS TAGGER   TAG_ACC   SCORE\\n---   ------   ------------   -----------   -------   ------\\n  0        0           0.00         86.20      0.22     0.00\\n  0      200           3.08      18968.78     34.00     0.34\\n  0      400          31.81      22539.06     33.64     0.34\\n  0      600          92.13      22794.91     43.80     0.44\\n  0      800         183.62      21541.39     56.05     0.56\\n  0     1000         352.49      25461.82     65.15     0.65\\n  0     1200         422.87      23708.82     71.84     0.72\\n  0     1400         601.92      24994.79     76.57     0.77\\n  0     1600         662.57      22268.02     80.20     0.80\\n  0     1800        1101.50      28413.77     82.56     0.83\\n  0     2000        1253.43      28736.36     85.00     0.85\\n  0     2200        1411.02      28237.53     87.42     0.87\\n  0     2400        1605.35      28439.95     88.70     0.89\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"Note that the cumulative loss keeps increasing within one epoch, but should\\nstart decreasing across epochs.\"\n        })]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"progress_bar\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether the logger should print the progress bar \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          })\n        })]\n      }), _jsxs(_components.p, {\n        children: [\"Logging utilities for spaCy are implemented in the\\n\", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spacy-loggers\",\n          children: _jsx(InlineCode, {\n            children: \"spacy-loggers\"\n          })\n        }), \" repo, and the\\nfunctions are typically available from \", _jsx(InlineCode, {\n          children: \"@spacy.registry.loggers\"\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [\"More documentation can be found in that repo’s\\n\", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spacy-loggers/blob/main/README.md\",\n          children: \"readme\"\n        }), \" file.\"]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Legacy functions and architectures","teaser":"Archived implementations available through spacy-legacy","source":"spacy/legacy"},"scope":{}},"sectionTitle":"API Documentation","theme":"green","section":"api","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false,"next":null},"__N_SSG":true}