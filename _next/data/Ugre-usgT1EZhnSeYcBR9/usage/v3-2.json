{"pageProps":{"title":"What's New in v3.2","teaser":"New features and how to upgrade","menu":[["New Features","features"],["Upgrading Notes","upgrading"]],"slug":"/usage/v3-2","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    ul: \"ul\",\n    li: \"li\",\n    blockquote: \"blockquote\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {InlineCode, Infobox, Project} = _components;\n  if (!Infobox) _missingMdxReference(\"Infobox\", true);\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  if (!Project) _missingMdxReference(\"Project\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.section, {\n      id: \"section-features\",\n      children: [_jsx(_components.h2, {\n        id: \"features\",\n        hidden: \"true\",\n        children: \"New Features \"\n      }), _jsxs(_components.p, {\n        children: [\"spaCy v3.2 adds support for \", _jsx(_components.a, {\n          href: \"https://github.com/explosion/floret\",\n          children: _jsx(InlineCode, {\n            children: \"floret\"\n          })\n        }), \"\\nvectors, makes custom \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" creation and scoring easier, and includes many bug\\nfixes and improvements. For the trained pipelines, thereâ€™s a new transformer\\npipeline for Japanese and the Universal Dependencies training data has been\\nupdated across the board to the most recent release.\"]\n      }), _jsxs(Infobox, {\n        title: \"Improve performance for spaCy on Apple M1 with AppleOps\",\n        variant: \"warning\",\n        emoji: \"ðŸ“£\",\n        children: [_jsxs(_components.p, {\n          children: [\"spaCy is now up to \", _jsx(_components.strong, {\n            children: \"8 Ã— faster on M1 Macs\"\n          }), \" by calling into Appleâ€™s\\nnative Accelerate library for matrix multiplication. For more details, see\\n\", _jsx(_components.a, {\n            href: \"https://github.com/explosion/thinc-apple-ops\",\n            children: _jsx(InlineCode, {\n              children: \"thinc-apple-ops\"\n            })\n          }), \".\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            lang: \"bash\",\n            children: \"$ pip install spacy[apple]\\n\"\n          })\n        })]\n      }), _jsx(_components.h3, {\n        id: \"registered-scoring-functions\",\n        children: \"Registered scoring functions \"\n      }), _jsxs(_components.p, {\n        children: [\"To customize the scoring, you can specify a scoring function for each component\\nin your config from the new \", _jsxs(_components.a, {\n          href: \"/api/top-level#registry\",\n          children: [_jsx(InlineCode, {\n            children: \"scorers\"\n          }), \" registry\"]\n        }), \":\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ini\",\n          lang: \"ini\",\n          title: \"config.cfg (excerpt)\",\n          highlight: \"3\",\n          children: \"[components.tagger]\\nfactory = \\\"tagger\\\"\\nscorer = {\\\"@scorers\\\":\\\"spacy.tagger_scorer.v1\\\"}\\n\"\n        })\n      }), _jsx(_components.h3, {\n        id: \"overwrite\",\n        children: \"Overwrite settings \"\n      }), _jsxs(_components.p, {\n        children: [\"Most pipeline components now include an \", _jsx(InlineCode, {\n          children: \"overwrite\"\n        }), \" setting in the config that\\ndetermines whether existing annotation in the \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" is preserved or overwritten:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ini\",\n          lang: \"ini\",\n          title: \"config.cfg (excerpt)\",\n          highlight: \"3\",\n          children: \"[components.tagger]\\nfactory = \\\"tagger\\\"\\noverwrite = false\\n\"\n        })\n      }), _jsx(_components.h3, {\n        id: \"doc-input\",\n        children: \"Doc input for pipelines \"\n      }), _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          href: \"/api/language#call\",\n          children: _jsx(InlineCode, {\n            children: \"nlp\"\n          })\n        }), \" and \", _jsx(_components.a, {\n          href: \"/api/language#pipe\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.pipe\"\n          })\n        }), \" accept\\n\", _jsx(_components.a, {\n          href: \"/api/doc\",\n          children: _jsx(InlineCode, {\n            children: \"Doc\"\n          })\n        }), \" input, skipping the tokenizer if a \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" is provided instead\\nof a string. This makes it easier to create a \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" with custom tokenization or\\nto set custom extensions before processing:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"doc = nlp.make_doc(\\\"This is text 500.\\\")\\ndoc._.text_id = 500\\ndoc = nlp(doc)\\n\"\n        })\n      }), _jsx(_components.h3, {\n        id: \"vectors\",\n        children: \"Support for floret vectors \"\n      }), _jsxs(_components.p, {\n        children: [\"We recently published \", _jsx(_components.a, {\n          href: \"https://github.com/explosion/floret\",\n          children: _jsx(InlineCode, {\n            children: \"floret\"\n          })\n        }), \", an\\nextended version of \", _jsx(_components.a, {\n          href: \"https://fasttext.cc\",\n          children: \"fastText\"\n        }), \" that combines fastTextâ€™s\\nsubwords with Bloom embeddings for compact, full-coverage vectors. The use of\\nsubwords means that there are no OOV words and due to Bloom embeddings, the\\nvector table can be kept very small at <100K entries. Bloom embeddings are\\nalready used by \", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-layers#hashembed\",\n          children: \"HashEmbed\"\n        }), \" in\\n\", _jsx(_components.a, {\n          href: \"/api/architectures#tok2vec-arch\",\n          children: \"tok2vec\"\n        }), \" for compact spaCy models.\"]\n      }), _jsxs(_components.p, {\n        children: [\"For easy integration, floret includes a\\n\", _jsx(_components.a, {\n          href: \"https://github.com/explosion/floret/blob/main/python/README.md\",\n          children: \"Python wrapper\"\n        }), \":\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ pip install floret\\n\"\n        })\n      }), _jsx(_components.p, {\n        children: \"A demo project shows how to train and import floret vectors:\"\n      }), _jsx(Project, {\n        id: \"pipelines/floret_vectors_demo\",\n        children: _jsx(_components.p, {\n          children: \"Train toy English floret vectors and import them into a spaCy pipeline.\"\n        })\n      }), _jsx(_components.p, {\n        children: \"Two additional demo projects compare standard fastText vectors with floret\\nvectors for full spaCy pipelines. For agglutinative languages like Finnish or\\nKorean, there are large improvements in performance due to the use of subwords\\n(no OOV words!), with a vector table containing merely 50K entries.\"\n      }), _jsxs(Project, {\n        id: \"pipelines/floret_fi_core_demo\",\n        children: [_jsx(_components.p, {\n          children: \"Finnish UD+NER vector and pipeline training, comparing standard fasttext vs.\\nfloret vectors.\"\n        }), _jsx(_components.p, {\n          children: \"For the default project settings with 1M (2.6G) tokenized training texts and 50K\\n300-dim vectors, ~300K keys for the standard vectors:\"\n        }), _jsxs(_components.table, {\n          children: [_jsx(_components.thead, {\n            children: _jsxs(_components.tr, {\n              children: [_jsx(_components.th, {\n                children: \"Vectors\"\n              }), _jsx(_components.th, {\n                align: \"right\",\n                children: \"TAG\"\n              }), _jsx(_components.th, {\n                align: \"right\",\n                children: \"POS\"\n              }), _jsx(_components.th, {\n                align: \"right\",\n                children: \"DEP UAS\"\n              }), _jsx(_components.th, {\n                align: \"right\",\n                children: \"DEP LAS\"\n              }), _jsx(_components.th, {\n                align: \"right\",\n                children: \"NER F\"\n              })]\n            })\n          }), _jsxs(_components.tbody, {\n            children: [_jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"none\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"93.3\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"92.3\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"79.7\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"72.8\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"61.0\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"standard (pruned: 50K vectors for 300K keys)\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"95.9\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"94.7\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"83.3\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"77.9\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"68.5\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"standard (unpruned: 300K vectors/keys)\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"96.0\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"95.0\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: _jsx(_components.strong, {\n                  children: \"83.8\"\n                })\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"78.4\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"69.1\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"floret (minn 4, maxn 5; 50K vectors, no OOV)\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: _jsx(_components.strong, {\n                  children: \"96.6\"\n                })\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: _jsx(_components.strong, {\n                  children: \"95.5\"\n                })\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"83.5\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: _jsx(_components.strong, {\n                  children: \"78.5\"\n                })\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: _jsx(_components.strong, {\n                  children: \"70.9\"\n                })\n              })]\n            })]\n          })]\n        })]\n      }), _jsxs(Project, {\n        id: \"pipelines/floret_ko_ud_demo\",\n        children: [_jsx(_components.p, {\n          children: \"Korean UD vector and pipeline training, comparing standard fasttext vs. floret\\nvectors.\"\n        }), _jsx(_components.p, {\n          children: \"For the default project settings with 1M (3.3G) tokenized training texts and 50K\\n300-dim vectors, ~800K keys for the standard vectors:\"\n        }), _jsxs(_components.table, {\n          children: [_jsx(_components.thead, {\n            children: _jsxs(_components.tr, {\n              children: [_jsx(_components.th, {\n                children: \"Vectors\"\n              }), _jsx(_components.th, {\n                align: \"right\",\n                children: \"TAG\"\n              }), _jsx(_components.th, {\n                align: \"right\",\n                children: \"POS\"\n              }), _jsx(_components.th, {\n                align: \"right\",\n                children: \"DEP UAS\"\n              }), _jsx(_components.th, {\n                align: \"right\",\n                children: \"DEP LAS\"\n              })]\n            })\n          }), _jsxs(_components.tbody, {\n            children: [_jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"none\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"72.5\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"85.0\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"73.2\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"64.3\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"standard (pruned: 50K vectors for 800K keys)\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"77.9\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"89.4\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"78.8\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"72.8\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"standard (unpruned: 800K vectors/keys)\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"79.0\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"90.2\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"79.2\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"73.9\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"floret (minn 2, maxn 3; 50K vectors, no OOV)\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: _jsx(_components.strong, {\n                  children: \"82.5\"\n                })\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: _jsx(_components.strong, {\n                  children: \"93.8\"\n                })\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: _jsx(_components.strong, {\n                  children: \"83.0\"\n                })\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: _jsx(_components.strong, {\n                  children: \"80.1\"\n                })\n              })]\n            })]\n          })]\n        })]\n      }), _jsx(_components.h3, {\n        id: \"spacy-transformers\",\n        children: \"Updates for spacy-transformers v1.1 \"\n      }), _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          href: \"https://github.com/explosion/spacy-transformers\",\n          children: _jsx(InlineCode, {\n            children: \"spacy-transformers\"\n          })\n        }), \" v1.1 has\\nbeen refactored to improve serialization and support of inline transformer\\ncomponents and replacing listeners. In addition, the transformer model output is\\nprovided as\\n\", _jsx(_components.a, {\n          href: \"https://huggingface.co/transformers/main_classes/output.html?highlight=modeloutput#transformers.file_utils.ModelOutput\",\n          children: _jsx(InlineCode, {\n            children: \"ModelOutput\"\n          })\n        }), \"\\ninstead of tuples in\\n\", _jsx(InlineCode, {\n          children: \"TransformerData.model_output and FullTransformerBatch.model_output.\"\n        }), \" For\\nbackwards compatibility, the tuple format remains available under\\n\", _jsx(InlineCode, {\n          children: \"TransformerData.tensors\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"FullTransformerBatch.tensors\"\n        }), \". See more details\\nin the \", _jsx(_components.a, {\n          href: \"/api/architectures#TransformerModel\",\n          children: \"transformer API docs\"\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [_jsx(InlineCode, {\n          children: \"spacy-transfomers\"\n        }), \" v1.1 also adds support for \", _jsx(InlineCode, {\n          children: \"transformer_config\"\n        }), \" settings\\nsuch as \", _jsx(InlineCode, {\n          children: \"output_attentions\"\n        }), \". Additional output is stored under\\n\", _jsx(InlineCode, {\n          children: \"TransformerData.model_output\"\n        }), \". More details are in the\\n\", _jsx(_components.a, {\n          href: \"/api/architectures#TransformerModel\",\n          children: \"TransformerModel docs\"\n        }), \". The training speed\\nhas been improved by streamlining allocations for tokenizer output and there is\\nnew support for \", _jsx(_components.a, {\n          href: \"/api/architectures#TransformerModel\",\n          children: \"mixed-precision training\"\n        }), \".\"]\n      }), _jsx(_components.h3, {\n        id: \"pipeline-packages\",\n        children: \"New transformer package for Japanese \"\n      }), _jsxs(_components.p, {\n        children: [\"spaCy v3.2 adds a new transformer pipeline package for Japanese\\n\", _jsx(_components.a, {\n          href: \"/models/ja#ja_core_news_trf\",\n          children: _jsx(InlineCode, {\n            children: \"ja_core_news_trf\"\n          })\n        }), \", which uses the \", _jsx(InlineCode, {\n          children: \"basic\"\n        }), \"\\npretokenizer instead of \", _jsx(InlineCode, {\n          children: \"mecab\"\n        }), \" to limit the number of dependencies required for\\nthe pipeline. Thanks to Hiroshi Matsuda and the spaCy Japanese community for\\ntheir contributions!\"]\n      }), _jsx(_components.h3, {\n        id: \"pipeline-updates\",\n        children: \"Pipeline and language updates \"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"All Universal Dependencies training data has been updated to v2.8.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"The Catalan data, tokenizer and lemmatizer have been updated, thanks to Carlos\\nRodriguez, Carme Armentano and the Barcelona Supercomputing Center!\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The transformer pipelines are trained using spacy-transformers v1.1, with\\nimproved IO and more options for\\n\", _jsx(_components.a, {\n            href: \"/api/architectures#TransformerModel\",\n            children: \"model config and output\"\n          }), \".\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Trailing whitespace has been added as a \", _jsx(InlineCode, {\n            children: \"tok2vec\"\n          }), \" feature, improving the\\nperformance for many components, especially fine-grained tagging and sentence\\nsegmentation.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The English attribute ruler patterns have been overhauled to improve\\n\", _jsx(InlineCode, {\n            children: \"Token.pos\"\n          }), \" and \", _jsx(InlineCode, {\n            children: \"Token.morph\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"spaCy v3.2 also features a new Irish lemmatizer, support for \", _jsx(InlineCode, {\n          children: \"noun_chunks\"\n        }), \" in\\nPortuguese, improved \", _jsx(InlineCode, {\n          children: \"noun_chunks\"\n        }), \" for Spanish and additional updates for\\nBulgarian, Catalan, Sinhala, Tagalog, Tigrinya and Vietnamese.\"]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-upgrading\",\n      children: [_jsx(_components.h2, {\n        id: \"upgrading\",\n        children: \"Notes about upgrading from v3.1 \"\n      }), _jsx(_components.h3, {\n        id: \"version-compat\",\n        children: \"Pipeline package version compatibility \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Using legacy implementations\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"In spaCy v3, youâ€™ll still be able to load and reference legacy implementations\\nvia \", _jsx(_components.a, {\n            href: \"https://github.com/explosion/spacy-legacy\",\n            children: _jsx(InlineCode, {\n              children: \"spacy-legacy\"\n            })\n          }), \", even if the\\ncomponents or architectures change and newer versions are available in the\\ncore library.\"]\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"When youâ€™re loading a pipeline package trained with spaCy v3.0 or v3.1, you will\\nsee a warning telling you that the pipeline may be incompatible. This doesnâ€™t\\nnecessarily have to be true, but we recommend running your pipelines against\\nyour test suite or evaluation data to make sure there are no unexpected results.\\nIf youâ€™re using one of the \", _jsx(_components.a, {\n          href: \"/models\",\n          children: \"trained pipelines\"\n        }), \" we provide, you should\\nrun \", _jsx(_components.a, {\n          href: \"/api/cli#download\",\n          children: _jsx(InlineCode, {\n            children: \"spacy download\"\n          })\n        }), \" to update to the latest version. To\\nsee an overview of all installed packages and their compatibility, you can run\\n\", _jsx(_components.a, {\n          href: \"/api/cli#validate\",\n          children: _jsx(InlineCode, {\n            children: \"spacy validate\"\n          })\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [\"If youâ€™ve trained your own custom pipeline and youâ€™ve confirmed that itâ€™s still\\nworking as expected, you can update the spaCy version requirements in the\\n\", _jsx(_components.a, {\n          href: \"/api/data-formats#meta\",\n          children: _jsx(InlineCode, {\n            children: \"meta.json\"\n          })\n        }), \":\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"- \\\"spacy_version\\\": \\\">=3.1.0,<3.2.0\\\",\\n+ \\\"spacy_version\\\": \\\">=3.2.0,<3.3.0\\\",\\n\"\n        })\n      }), _jsx(_components.h3, {\n        children: \"Updating v3.1 configs\"\n      }), _jsxs(_components.p, {\n        children: [\"To update a config from spaCy v3.1 with the new v3.2 settings, run\\n\", _jsx(_components.a, {\n          href: \"/api/cli#init-fill-config\",\n          children: _jsx(InlineCode, {\n            children: \"init fill-config\"\n          })\n        }), \":\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ python -m spacy init fill-config config-v3.1.cfg config-v3.2.cfg\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"In many cases (\", _jsx(_components.a, {\n          href: \"/api/cli#train\",\n          children: _jsx(InlineCode, {\n            children: \"spacy train\"\n          })\n        }), \",\\n\", _jsx(_components.a, {\n          href: \"/api/top-level#spacy.load\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.load\"\n          })\n        }), \"), the new defaults will be filled in\\nautomatically, but youâ€™ll need to fill in the new settings to run\\n\", _jsx(_components.a, {\n          href: \"/api/cli#debug\",\n          children: _jsx(InlineCode, {\n            children: \"debug config\"\n          })\n        }), \" and \", _jsx(_components.a, {\n          href: \"/api/cli#debug-data\",\n          children: _jsx(InlineCode, {\n            children: \"debug data\"\n          })\n        }), \".\"]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-upgrading-transformers\",\n      children: [_jsx(_components.h2, {\n        id: \"upgrading-transformers\",\n        children: \"Notes about upgrading from spacy-transformers v1.0 \"\n      }), _jsxs(_components.p, {\n        children: [\"When youâ€™re loading a transformer pipeline package trained with\\n\", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spacy-transformers\",\n          children: _jsx(InlineCode, {\n            children: \"spacy-transformers\"\n          })\n        }), \" v1.0\\nafter upgrading to \", _jsx(InlineCode, {\n          children: \"spacy-transformers\"\n        }), \" v1.1, youâ€™ll see a warning telling you\\nthat the pipeline may be incompatible. \", _jsx(InlineCode, {\n          children: \"spacy-transformers\"\n        }), \" v1.1 should be able\\nto import v1.0 \", _jsx(InlineCode, {\n          children: \"transformer\"\n        }), \" components into the new internal format with no\\nchange in performance, but here weâ€™d also recommend running your test suite to\\nverify that the pipeline still performs as expected.\"]\n      }), _jsxs(_components.p, {\n        children: [\"If you save your pipeline with \", _jsx(_components.a, {\n          href: \"/api/language#to_disk\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.to_disk\"\n          })\n        }), \", it will\\nbe saved in the new v1.1 format and should be fully compatible with\\n\", _jsx(InlineCode, {\n          children: \"spacy-transformers\"\n        }), \" v1.1. Once youâ€™ve confirmed the performance, you can update\\nthe requirements in \", _jsx(_components.a, {\n          href: \"/api/data-formats#meta\",\n          children: _jsx(InlineCode, {\n            children: \"meta.json\"\n          })\n        }), \":\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"  \\\"requirements\\\": [\\n-    \\\"spacy-transformers>=1.0.3,<1.1.0\\\"\\n+    \\\"spacy-transformers>=1.1.2,<1.2.0\\\"\\n  ]\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"If youâ€™re using one of the \", _jsx(_components.a, {\n          href: \"/models\",\n          children: \"trained pipelines\"\n        }), \" we provide, you should\\nrun \", _jsx(_components.a, {\n          href: \"/api/cli#download\",\n          children: _jsx(InlineCode, {\n            children: \"spacy download\"\n          })\n        }), \" to update to the latest version. To\\nsee an overview of all installed packages and their compatibility, you can run\\n\", _jsx(_components.a, {\n          href: \"/api/cli#validate\",\n          children: _jsx(InlineCode, {\n            children: \"spacy validate\"\n          })\n        }), \".\"]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"What's New in v3.2","teaser":"New features and how to upgrade","menu":[["New Features","features"],["Upgrading Notes","upgrading"]]},"scope":{}},"sectionTitle":"Usage Documentation","theme":"blue","section":"usage","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false,"next":{"slug":"/usage/v3-3","title":"New in v3.3"}},"__N_SSG":true}