{"pageProps":{"title":"Visualizers","teaser":"Visualize dependencies and entities in your browser or in a notebook","version":2,"menu":[["Dependencies","dep"],["Named Entities","ent"],["Spans","span"],["Jupyter Notebooks","jupyter"],["Rendering HTML","html"],["Web app usage","webapp"]],"slug":"/usage/visualizers","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    img: \"img\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    del: \"del\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    h3: \"h3\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {InlineCode, Infobox, Iframe, Grid} = _components;\n  if (!Grid) _missingMdxReference(\"Grid\", true);\n  if (!Iframe) _missingMdxReference(\"Iframe\", true);\n  if (!Infobox) _missingMdxReference(\"Infobox\", true);\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.section, {\n      children: [_jsxs(_components.p, {\n        children: [\"Visualizing a dependency parse or named entities in a text is not only a fun NLP\\ndemo – it can also be incredibly helpful in speeding up development and\\ndebugging your code and training process. That’s why our popular visualizers,\\n\", _jsx(_components.a, {\n          href: \"https://explosion.ai/demos/displacy\",\n          children: \"displaCy\"\n        }), \" and\\n\", _jsxs(_components.a, {\n          href: \"https://explosion.ai/demos/displacy-ent\",\n          children: [\"displaCy \", _jsx(\"sup\", {\n            children: \"ENT\"\n          })]\n        }), \" are also an\\nofficial part of the core library. If you’re running a\\n\", _jsx(_components.a, {\n          href: \"https://jupyter.org\",\n          children: \"Jupyter\"\n        }), \" notebook, displaCy will detect this and return\\nthe markup in a format \", _jsx(_components.a, {\n          href: \"#jupyter\",\n          children: \"ready to be rendered and exported\"\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [\"The quickest way to visualize \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" is to use\\n\", _jsx(_components.a, {\n          href: \"/api/top-level#displacy.serve\",\n          children: _jsx(InlineCode, {\n            children: \"displacy.serve\"\n          })\n        }), \". This will spin up a simple\\nweb server and let you view the result straight from your browser. displaCy can\\neither take a single \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" or a list of \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" objects as its first argument.\\nThis lets you construct them however you like – using any pipeline or\\nmodifications you like. If you’re using \", _jsx(_components.a, {\n          href: \"https://streamlit.io\",\n          children: \"Streamlit\"\n        }), \", check\\nout the \", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spacy-streamlit\",\n          children: _jsx(InlineCode, {\n            children: \"spacy-streamlit\"\n          })\n        }), \"\\npackage that helps you integrate spaCy visualizations into your apps!\"]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-dep\",\n      children: [_jsx(_components.h2, {\n        id: \"dep\",\n        children: \"Visualizing the dependency parse \"\n      }), _jsxs(_components.p, {\n        children: [\"The dependency visualizer, \", _jsx(InlineCode, {\n          children: \"dep\"\n        }), \", shows part-of-speech tags and syntactic\\ndependencies.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"Dependency example\",\n          children: \"import spacy\\nfrom spacy import displacy\\n\\nnlp = spacy.load(\\\"en_core_web_sm\\\")\\ndoc = nlp(\\\"This is a sentence.\\\")\\ndisplacy.serve(doc, style=\\\"dep\\\")\\n\"\n        })\n      }), _jsx(_components.img, {\n        src: \"/images/displacy.svg\",\n        alt: \"displaCy visualizer\"\n      }), _jsxs(_components.p, {\n        children: [\"The argument \", _jsx(InlineCode, {\n          children: \"options\"\n        }), \" lets you specify a dictionary of settings to customize\\nthe layout, for example:\"]\n      }), _jsx(Infobox, {\n        title: \"Important note\",\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"There’s currently a known issue with the \", _jsx(InlineCode, {\n            children: \"compact\"\n          }), \" mode for sentences with short\\narrows and long dependency labels, that causes labels longer than the arrow to\\nwrap. So if you come across this problem, especially when using custom labels,\\nyou’ll have to increase the \", _jsx(InlineCode, {\n            children: \"distance\"\n          }), \" setting in the \", _jsx(InlineCode, {\n            children: \"options\"\n          }), \" to allow longer\\narcs.\"]\n        })\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Argument\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"compact\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"“Compact mode” with square arrows that takes up less space. Defaults to \", _jsx(InlineCode, {\n                children: \"False\"\n              }), \". \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"color\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Text color (HEX, RGB or color names). Defaults to \", _jsx(InlineCode, {\n                children: \"\\\"#000000\\\"\"\n              }), \". \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"bg\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Background color (HEX, RGB or color names). Defaults to \", _jsx(InlineCode, {\n                children: \"\\\"#ffffff\\\"\"\n              }), \". \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"font\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Font name or font family for all text. Defaults to \", _jsx(InlineCode, {\n                children: \"\\\"Arial\\\"\"\n              }), \". \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          })]\n        })]\n      }), _jsxs(_components.p, {\n        children: [\"For a list of all available options, see the\\n\", _jsxs(_components.a, {\n          href: \"/api/top-level#displacy_options\",\n          children: [_jsx(InlineCode, {\n            children: \"displacy\"\n          }), \" API documentation\"]\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Options example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"options = {\\\"compact\\\": True, \\\"bg\\\": \\\"#09a3d5\\\",\\n           \\\"color\\\": \\\"white\\\", \\\"font\\\": \\\"Source Sans Pro\\\"}\\ndisplacy.serve(doc, style=\\\"dep\\\", options=options)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.img, {\n        src: \"/images/displacy-compact.svg\",\n        alt: \"displaCy visualizer (compact mode)\"\n      }), _jsx(_components.h3, {\n        id: \"dep-long-text\",\n        version: \"2.0.12\",\n        children: \"Visualizing long texts \"\n      }), _jsxs(_components.p, {\n        children: [\"Long texts can become difficult to read when displayed in one row, so it’s often\\nbetter to visualize them sentence-by-sentence instead. As of v2.0.12, \", _jsx(InlineCode, {\n          children: \"displacy\"\n        }), \"\\nsupports rendering both \", _jsx(_components.a, {\n          href: \"/api/doc\",\n          children: _jsx(InlineCode, {\n            children: \"Doc\"\n          })\n        }), \" and \", _jsx(_components.a, {\n          href: \"/api/span\",\n          children: _jsx(InlineCode, {\n            children: \"Span\"\n          })\n        }), \" objects, as\\nwell as lists of \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \"s or \", _jsx(InlineCode, {\n          children: \"Span\"\n        }), \"s. Instead of passing the full \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" to\\n\", _jsx(InlineCode, {\n          children: \"displacy.serve\"\n        }), \", you can also pass in a list \", _jsx(InlineCode, {\n          children: \"doc.sents\"\n        }), \". This will create one\\nvisualization for each sentence.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"import spacy\\nfrom spacy import displacy\\n\\nnlp = spacy.load(\\\"en_core_web_sm\\\")\\ntext = \\\"\\\"\\\"In ancient Rome, some neighbors live in three adjacent houses. In the center is the house of Senex, who lives there with wife Domina, son Hero, and several slaves, including head slave Hysterium and the musical's main character Pseudolus. A slave belonging to Hero, Pseudolus wishes to buy, win, or steal his freedom. One of the neighboring houses is owned by Marcus Lycus, who is a buyer and seller of beautiful women; the other belongs to the ancient Erronius, who is abroad searching for his long-lost children (stolen in infancy by pirates). One day, Senex and Domina go on a trip and leave Pseudolus in charge of Hero. Hero confides in Pseudolus that he is in love with the lovely Philia, one of the courtesans in the House of Lycus (albeit still a virgin).\\\"\\\"\\\"\\ndoc = nlp(text)\\nsentence_spans = list(doc.sents)\\ndisplacy.serve(sentence_spans, style=\\\"dep\\\")\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-ent\",\n      children: [_jsx(_components.h2, {\n        id: \"ent\",\n        children: \"Visualizing the entity recognizer \"\n      }), _jsxs(_components.p, {\n        children: [\"The entity visualizer, \", _jsx(InlineCode, {\n          children: \"ent\"\n        }), \", highlights named entities and their labels in a\\ntext.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"Named Entity example\",\n          children: \"import spacy\\nfrom spacy import displacy\\n\\ntext = \\\"When Sebastian Thrun started working on self-driving cars at Google in 2007, few people outside of the company took him seriously.\\\"\\n\\nnlp = spacy.load(\\\"en_core_web_sm\\\")\\ndoc = nlp(text)\\ndisplacy.serve(doc, style=\\\"ent\\\")\\n\"\n        })\n      }), _jsx(Iframe, {\n        title: \"displaCy visualizer for entities\",\n        src: \"/images/displacy-ent2.html\",\n        height: 180\n      }), _jsxs(_components.p, {\n        children: [\"The entity visualizer lets you customize the following \", _jsx(InlineCode, {\n          children: \"options\"\n        }), \":\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Argument\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"ents\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Entity types to highlight (\", _jsx(InlineCode, {\n                children: \"None\"\n              }), \" for all types). Defaults to \", _jsx(InlineCode, {\n                children: \"None\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Optional[List[str]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"colors\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Color overrides. Entity types should be mapped to color names or values. Defaults to \", _jsx(InlineCode, {\n                children: \"{}\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Dict[str, str]\"\n              })]\n            })]\n          })]\n        })]\n      }), _jsxs(_components.p, {\n        children: [\"If you specify a list of \", _jsx(InlineCode, {\n          children: \"ents\"\n        }), \", only those entity types will be rendered – for\\nexample, you can choose to display \", _jsx(InlineCode, {\n          children: \"PERSON\"\n        }), \" entities. Internally, the visualizer\\nknows nothing about available entity types and will render whichever spans and\\nlabels it receives. This makes it especially easy to work with custom entity\\ntypes. By default, displaCy comes with colors for all entity types used by\\n\", _jsx(_components.a, {\n          href: \"/models\",\n          children: \"trained spaCy pipelines\"\n        }), \". If you’re using custom entity types, you can\\nuse the \", _jsx(InlineCode, {\n          children: \"colors\"\n        }), \" setting to add your own colors for them.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Options example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"colors = {\\\"ORG\\\": \\\"linear-gradient(90deg, #aa9cfc, #fc9ce7)\\\"}\\noptions = {\\\"ents\\\": [\\\"ORG\\\"], \\\"colors\\\": colors}\\ndisplacy.serve(doc, style=\\\"ent\\\", options=options)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(Iframe, {\n        title: \"displaCy visualizer for entities (custom styling)\",\n        src: \"/images/displacy-ent-custom.html\",\n        height: 225\n      }), _jsxs(_components.p, {\n        children: [\"The above example uses a little trick: Since the background color values are\\nadded as the \", _jsx(InlineCode, {\n          children: \"background\"\n        }), \" style attribute, you can use any\\n\", _jsx(_components.a, {\n          href: \"https://tympanus.net/codrops/css_reference/background/\",\n          children: \"valid background value\"\n        }), \"\\nor shorthand – including gradients and even images!\"]\n      }), _jsx(_components.h3, {\n        id: \"ent-titles\",\n        children: \"Adding titles to documents \"\n      }), _jsxs(_components.p, {\n        children: [\"Rendering several large documents on one page can easily become confusing. To\\nadd a headline to each visualization, you can add a \", _jsx(InlineCode, {\n          children: \"title\"\n        }), \" to its \", _jsx(InlineCode, {\n          children: \"user_data\"\n        }), \".\\nUser data is never touched or modified by spaCy.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"doc = nlp(\\\"This is a sentence about Google.\\\")\\ndoc.user_data[\\\"title\\\"] = \\\"This is a title\\\"\\ndisplacy.serve(doc, style=\\\"ent\\\")\\n\"\n        })\n      }), _jsx(_components.p, {\n        children: \"This feature is especially handy if you’re using displaCy to compare performance\\nat different stages of a process, e.g. during training. Here you could use the\\ntitle for a brief description of the text example and the number of iterations.\"\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-span\",\n      children: [_jsx(_components.h2, {\n        id: \"span\",\n        children: \"Visualizing spans \"\n      }), _jsxs(_components.p, {\n        children: [\"The span visualizer, \", _jsx(InlineCode, {\n          children: \"span\"\n        }), \", highlights overlapping spans in a text.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"Span example\",\n          children: \"import spacy\\nfrom spacy import displacy\\nfrom spacy.tokens import Span\\n\\ntext = \\\"Welcome to the Bank of China.\\\"\\n\\nnlp = spacy.blank(\\\"en\\\")\\ndoc = nlp(text)\\n\\ndoc.spans[\\\"sc\\\"] = [\\n    Span(doc, 3, 6, \\\"ORG\\\"),\\n    Span(doc, 5, 6, \\\"GPE\\\"),\\n]\\n\\ndisplacy.serve(doc, style=\\\"span\\\")\\n\"\n        })\n      }), _jsx(Iframe, {\n        title: \"displaCy visualizer for overlapping spans\",\n        src: \"/images/displacy-span.html\",\n        height: 180\n      }), _jsxs(_components.p, {\n        children: [\"The span visualizer lets you customize the following \", _jsx(InlineCode, {\n          children: \"options\"\n        }), \":\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Argument\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"spans_key\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Which spans key to render spans from. Default is \", _jsx(InlineCode, {\n                children: \"\\\"sc\\\"\"\n              }), \". \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"templates\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Dictionary containing the keys \", _jsx(InlineCode, {\n                children: \"\\\"span\\\"\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"\\\"slice\\\"\"\n              }), \", and \", _jsx(InlineCode, {\n                children: \"\\\"start\\\"\"\n              }), \". These dictate how the overall span, a span slice, and the starting token will be rendered. \", _jsx(_components.del, {\n                children: \"Optional[Dict[str, str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"kb_url_template\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Optional template to construct the KB url for the entity to link to. Expects a python f-string format with single field to fill in \", _jsx(_components.del, {\n                children: \"Optional[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"colors\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Color overrides. Entity types should be mapped to color names or values. \", _jsx(_components.del, {\n                children: \"Dict[str, str]\"\n              })]\n            })]\n          })]\n        })]\n      }), _jsxs(_components.p, {\n        children: [\"Because spans can be stored across different keys in \", _jsx(InlineCode, {\n          children: \"doc.spans\"\n        }), \", you need to\\nspecify which one displaCy should use with \", _jsx(InlineCode, {\n          children: \"spans_key\"\n        }), \" (\", _jsx(InlineCode, {\n          children: \"sc\"\n        }), \" is the default).\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Options example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc.spans[\\\"custom\\\"] = [Span(doc, 3, 6, \\\"BANK\\\")]\\noptions = {\\\"spans_key\\\": \\\"custom\\\"}\\ndisplacy.serve(doc, style=\\\"span\\\", options=options)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(Iframe, {\n        title: \"displaCy visualizer for spans (custom spans_key)\",\n        src: \"/images/displacy-span-custom.html\",\n        height: 225\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-jupyter\",\n      children: [_jsx(_components.h2, {\n        id: \"jupyter\",\n        children: \"Using displaCy in Jupyter notebooks \"\n      }), _jsxs(_components.p, {\n        children: [\"displaCy is able to detect whether you’re working in a\\n\", _jsx(_components.a, {\n          href: \"https://jupyter.org\",\n          children: \"Jupyter\"\n        }), \" notebook, and will return markup that can be\\nrendered in a cell straight away. When you export your notebook, the\\nvisualizations will be included as HTML.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"Jupyter example\",\n          children: \"# Don't forget to install a trained pipeline, e.g.: python -m spacy download en\\n\\n# In[1]:\\nimport spacy\\nfrom spacy import displacy\\n\\n# In[2]:\\ndoc = nlp(\\\"Rats are various medium-sized, long-tailed rodents.\\\")\\ndisplacy.render(doc, style=\\\"dep\\\")\\n\\n# In[3]:\\ndoc2 = nlp(LONG_NEWS_ARTICLE)\\ndisplacy.render(doc2, style=\\\"ent\\\")\\n\"\n        })\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        title: \"Important note\",\n        children: _jsxs(_components.p, {\n          children: [\"To explicitly enable or disable “Jupyter mode”, you can use the \", _jsx(InlineCode, {\n            children: \"jupyter\"\n          }), \"\\nkeyword argument – e.g. to return raw HTML in a notebook, or to force Jupyter\\nrendering if auto-detection fails.\"]\n        })\n      }), _jsx(_components.img, {\n        src: \"/images/displacy_jupyter.jpg\",\n        alt: \"displaCy visualizer in a Jupyter notebook\"\n      }), _jsxs(_components.p, {\n        children: [\"Internally, displaCy imports \", _jsx(InlineCode, {\n          children: \"display\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"HTML\"\n        }), \" from \", _jsx(InlineCode, {\n          children: \"IPython.core.display\"\n        }), \"\\nand returns a Jupyter HTML object. If you were doing it manually, it’d look like\\nthis:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"from IPython.core.display import display, HTML\\n\\nhtml = displacy.render(doc, style=\\\"dep\\\")\\ndisplay(HTML(html))\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-html\",\n      children: [_jsx(_components.h2, {\n        id: \"html\",\n        children: \"Rendering HTML \"\n      }), _jsxs(_components.p, {\n        children: [\"If you don’t need the web server and just want to generate the markup – for\\nexample, to export it to a file or serve it in a custom way – you can use\\n\", _jsx(_components.a, {\n          href: \"/api/top-level#displacy.render\",\n          children: _jsx(InlineCode, {\n            children: \"displacy.render\"\n          })\n        }), \". It works the same way, but\\nreturns a string containing the markup.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"Example\",\n          children: \"import spacy\\nfrom spacy import displacy\\n\\nnlp = spacy.load(\\\"en_core_web_sm\\\")\\ndoc1 = nlp(\\\"This is a sentence.\\\")\\ndoc2 = nlp(\\\"This is another sentence.\\\")\\nhtml = displacy.render([doc1, doc2], style=\\\"dep\\\", page=True)\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [_jsx(InlineCode, {\n          children: \"page=True\"\n        }), \" renders the markup wrapped as a full HTML page. For minified and\\nmore compact HTML markup, you can set \", _jsx(InlineCode, {\n          children: \"minify=True\"\n        }), \". If you’re rendering a\\ndependency parse, you can also export it as an \", _jsx(InlineCode, {\n          children: \".svg\"\n        }), \" file.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"What’s SVG?\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"Unlike other image formats, the SVG (Scalable Vector Graphics) uses XML markup\\nthat’s easy to manipulate\\n\", _jsx(_components.a, {\n            href: \"https://www.smashingmagazine.com/2014/11/styling-and-animating-svgs-with-css/\",\n            children: \"using CSS\"\n          }), \"\\nor\\n\", _jsx(_components.a, {\n            href: \"https://css-tricks.com/smil-is-dead-long-live-smil-a-guide-to-alternatives-to-smil-features/\",\n            children: \"JavaScript\"\n          }), \".\\nEssentially, SVG lets you design with code, which makes it a perfect fit for\\nvisualizing dependency trees. SVGs can be embedded online in an \", _jsx(InlineCode, {\n            children: \"<img>\"\n          }), \" tag,\\nor inlined in an HTML document. They’re also pretty easy to\\n\", _jsx(_components.a, {\n            href: \"https://convertio.co/image-converter/\",\n            children: \"convert\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"svg = displacy.render(doc, style=\\\"dep\\\")\\noutput_path = Path(\\\"/images/sentence.svg\\\")\\noutput_path.open(\\\"w\\\", encoding=\\\"utf-8\\\").write(svg)\\n\"\n        })\n      }), _jsx(Infobox, {\n        title: \"Important note\",\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"Since each visualization is generated as a separate SVG, exporting \", _jsx(InlineCode, {\n            children: \".svg\"\n          }), \" files\\nonly works if you’re rendering \", _jsx(_components.strong, {\n            children: \"one single doc\"\n          }), \" at a time. (This makes sense –\\nafter all, each visualization should be a standalone graphic.) So instead of\\nrendering all \", _jsx(InlineCode, {\n            children: \"Doc\"\n          }), \"s at once, loop over them and export them separately.\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"examples-export-svg\",\n        children: \"Example: Export SVG graphics of dependency parses \"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"Example\",\n          children: \"import spacy\\nfrom spacy import displacy\\nfrom pathlib import Path\\n\\nnlp = spacy.load(\\\"en_core_web_sm\\\")\\nsentences = [\\\"This is an example.\\\", \\\"This is another one.\\\"]\\nfor sent in sentences:\\n    doc = nlp(sent)\\n    svg = displacy.render(doc, style=\\\"dep\\\", jupyter=False)\\n    file_name = '-'.join([w.text for w in doc if not w.is_punct]) + \\\".svg\\\"\\n    output_path = Path(\\\"/images/\\\" + file_name)\\n    output_path.open(\\\"w\\\", encoding=\\\"utf-8\\\").write(svg)\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"The above code will generate the dependency visualizations as two files,\\n\", _jsx(InlineCode, {\n          children: \"This-is-an-example.svg\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"This-is-another-one.svg\"\n        }), \".\"]\n      }), _jsx(_components.h3, {\n        id: \"manual-usage\",\n        children: \"Rendering data manually \"\n      }), _jsxs(_components.p, {\n        children: [\"You can also use displaCy to manually render data. This can be useful if you\\nwant to visualize output from other libraries, like \", _jsx(_components.a, {\n          href: \"http://www.nltk.org\",\n          children: \"NLTK\"\n        }), \"\\nor\\n\", _jsx(_components.a, {\n          href: \"https://github.com/tensorflow/models/tree/master/research/syntaxnet\",\n          children: \"SyntaxNet\"\n        }), \".\\nIf you set \", _jsx(InlineCode, {\n          children: \"manual=True\"\n        }), \" on either \", _jsx(InlineCode, {\n          children: \"render()\"\n        }), \" or \", _jsx(InlineCode, {\n          children: \"serve()\"\n        }), \", you can pass in data\\nin displaCy’s format as a dictionary (instead of \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" objects). There are\\nhelper functions for converting \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" objects to displaCy’s format for use with\\n\", _jsx(InlineCode, {\n          children: \"manual=True\"\n        }), \": \", _jsx(_components.a, {\n          href: \"/api/top-level#displacy.parse_deps\",\n          children: _jsx(InlineCode, {\n            children: \"displacy.parse_deps\"\n          })\n        }), \",\\n\", _jsx(_components.a, {\n          href: \"/api/top-level#displacy.parse_ents\",\n          children: _jsx(InlineCode, {\n            children: \"displacy.parse_ents\"\n          })\n        }), \", and\\n\", _jsx(_components.a, {\n          href: \"/api/top-level#displacy.parse_spans\",\n          children: _jsx(InlineCode, {\n            children: \"displacy.parse_spans\"\n          })\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example with parse function\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"But Google is starting from behind.\\\")\\nex = displacy.parse_ents(doc)\\nhtml = displacy.render(ex, style=\\\"ent\\\", manual=True)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example with raw data\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"ex = [{\\\"text\\\": \\\"But Google is starting from behind.\\\",\\n       \\\"ents\\\": [{\\\"start\\\": 4, \\\"end\\\": 10, \\\"label\\\": \\\"ORG\\\"}],\\n       \\\"title\\\": None}]\\nhtml = displacy.render(ex, style=\\\"ent\\\", manual=True)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"DEP input\",\n          children: \"{\\n    \\\"words\\\": [\\n        {\\\"text\\\": \\\"This\\\", \\\"tag\\\": \\\"DT\\\"},\\n        {\\\"text\\\": \\\"is\\\", \\\"tag\\\": \\\"VBZ\\\"},\\n        {\\\"text\\\": \\\"a\\\", \\\"tag\\\": \\\"DT\\\"},\\n        {\\\"text\\\": \\\"sentence\\\", \\\"tag\\\": \\\"NN\\\"}\\n    ],\\n    \\\"arcs\\\": [\\n        {\\\"start\\\": 0, \\\"end\\\": 1, \\\"label\\\": \\\"nsubj\\\", \\\"dir\\\": \\\"left\\\"},\\n        {\\\"start\\\": 2, \\\"end\\\": 3, \\\"label\\\": \\\"det\\\", \\\"dir\\\": \\\"left\\\"},\\n        {\\\"start\\\": 1, \\\"end\\\": 3, \\\"label\\\": \\\"attr\\\", \\\"dir\\\": \\\"right\\\"}\\n    ]\\n}\\n\"\n        })\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"ENT input\",\n          children: \"{\\n    \\\"text\\\": \\\"But Google is starting from behind.\\\",\\n    \\\"ents\\\": [{\\\"start\\\": 4, \\\"end\\\": 10, \\\"label\\\": \\\"ORG\\\"}],\\n    \\\"title\\\": None\\n}\\n\"\n        })\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"ENT input with knowledge base links\",\n          children: \"{\\n    \\\"text\\\": \\\"But Google is starting from behind.\\\",\\n    \\\"ents\\\": [{\\\"start\\\": 4, \\\"end\\\": 10, \\\"label\\\": \\\"ORG\\\", \\\"kb_id\\\": \\\"Q95\\\", \\\"kb_url\\\": \\\"https://www.wikidata.org/entity/Q95\\\"}],\\n    \\\"title\\\": None\\n}\\n\"\n        })\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"SPANS input\",\n          children: \"{\\n    \\\"text\\\": \\\"Welcome to the Bank of China.\\\",\\n    \\\"spans\\\": [\\n        {\\\"start_token\\\": 3, \\\"end_token\\\": 6, \\\"label\\\": \\\"ORG\\\"},\\n        {\\\"start_token\\\": 5, \\\"end_token\\\": 6, \\\"label\\\": \\\"GPE\\\"},\\n    ],\\n    \\\"tokens\\\": [\\\"Welcome\\\", \\\"to\\\", \\\"the\\\", \\\"Bank\\\", \\\"of\\\", \\\"China\\\", \\\".\\\"],\\n}\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-webapp\",\n      children: [_jsx(_components.h2, {\n        id: \"webapp\",\n        children: \"Using displaCy in a web application \"\n      }), _jsxs(_components.p, {\n        children: [\"If you want to use the visualizers as part of a web application, for example to\\ncreate something like our \", _jsx(_components.a, {\n          href: \"https://explosion.ai/demos/displacy\",\n          children: \"online demo\"\n        }), \",\\nit’s not recommended to only wrap and serve the displaCy renderer. Instead, you\\nshould only rely on the server to perform spaCy’s processing capabilities, and\\nuse a client-side implementation like\\n\", _jsx(_components.a, {\n          href: \"https://github.com/explosion/displacy\",\n          children: _jsx(InlineCode, {\n            children: \"displaCy.js\"\n          })\n        }), \" to render the\\nJSON-formatted output.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Why not return the HTML by the server?\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"It’s certainly possible to just have your server return the markup. But\\noutputting raw, unsanitized HTML is risky and makes your app vulnerable to\\n\", _jsx(_components.a, {\n            href: \"https://en.wikipedia.org/wiki/Cross-site_scripting\",\n            children: \"cross-site scripting\"\n          }), \"\\n(XSS). All your user needs to do is find a way to make spaCy return text like\\n\", _jsx(InlineCode, {\n            children: \"<script src=\\\"malicious-code.js\\\"></script>\"\n          }), \", which is pretty easy in NER mode.\\nInstead of relying on the server to render and sanitize HTML, you can do this\\non the client in JavaScript. displaCy.js creates the markup as DOM nodes and\\nwill never insert raw HTML.\"]\n        }), \"\\n\"]\n      }), _jsxs(Grid, {\n        cols: 2,\n        children: [_jsxs(_components.p, {\n          children: [\"Alternatively, if you’re using \", _jsx(_components.a, {\n            href: \"https://streamlit.io\",\n            children: \"Streamlit\"\n          }), \", check out the\\n\", _jsx(_components.a, {\n            href: \"https://github.com/explosion/spacy-streamlit\",\n            children: _jsx(InlineCode, {\n              children: \"spacy-streamlit\"\n            })\n          }), \" package that\\nhelps you integrate spaCy visualizations into your apps. It includes a full\\nembedded visualizer, as well as individual components.\"]\n        }), _jsx(_components.img, {\n          src: \"/images/spacy-streamlit.png\",\n          alt: \"Screenshot of the spacy-streamlit package in Streamlit\"\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Visualizers","teaser":"Visualize dependencies and entities in your browser or in a notebook","version":2,"menu":[["Dependencies","dep"],["Named Entities","ent"],["Spans","span"],["Jupyter Notebooks","jupyter"],["Rendering HTML","html"],["Web app usage","webapp"]]},"scope":{}},"sectionTitle":"Usage Documentation","theme":"blue","section":"usage","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false,"next":null},"__N_SSG":true}