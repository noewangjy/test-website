{"pageProps":{"title":"What's New in v3.5","teaser":"New features and how to upgrade","menu":[["New Features","features"],["Upgrading Notes","upgrading"]],"slug":"/usage/v3-5","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    h2: \"h2\",\n    p: \"p\",\n    h3: \"h3\",\n    h4: \"h4\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components), {InlineCode} = _components;\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.section, {\n      id: \"section-features\",\n      children: [_jsx(_components.h2, {\n        id: \"features\",\n        hidden: \"true\",\n        children: \"New features \"\n      }), _jsxs(_components.p, {\n        children: [\"spaCy v3.5 introduces three new CLI commands, \", _jsx(InlineCode, {\n          children: \"apply\"\n        }), \", \", _jsx(InlineCode, {\n          children: \"benchmark\"\n        }), \" and\\n\", _jsx(InlineCode, {\n          children: \"find-threshold\"\n        }), \", adds fuzzy matching, provides improvements to our entity\\nlinking functionality, and includes a range of language updates and bug fixes.\"]\n      }), _jsx(_components.h3, {\n        id: \"cli\",\n        children: \"New CLI commands \"\n      }), _jsx(_components.h4, {\n        children: \"apply CLI\"\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsxs(_components.a, {\n          href: \"/api/cli#apply\",\n          children: [_jsx(InlineCode, {\n            children: \"apply\"\n          }), \" CLI\"]\n        }), \" can be used to apply a pipeline to one or more\\n\", _jsx(InlineCode, {\n          children: \".txt\"\n        }), \", \", _jsx(InlineCode, {\n          children: \".jsonl\"\n        }), \" or \", _jsx(InlineCode, {\n          children: \".spacy\"\n        }), \" input files, saving the annotated docs in a single\\n\", _jsx(InlineCode, {\n          children: \".spacy\"\n        }), \" file.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ spacy apply en_core_web_sm my_texts/ output.spacy\\n\"\n        })\n      }), _jsx(_components.h4, {\n        children: \"benchmark CLI\"\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsxs(_components.a, {\n          href: \"/api/cli#benchmark\",\n          children: [_jsx(InlineCode, {\n            children: \"benchmark\"\n          }), \" CLI\"]\n        }), \" has been added to extend the existing\\n\", _jsx(InlineCode, {\n          children: \"evaluate\"\n        }), \" functionality with a wider range of profiling subcommands.\"]\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"benchmark accuracy\"\n        }), \" CLI is introduced as an alias for \", _jsx(InlineCode, {\n          children: \"evaluate\"\n        }), \". The new\\n\", _jsx(InlineCode, {\n          children: \"benchmark speed\"\n        }), \" CLI performs warmup rounds before measuring the speed in words\\nper second on batches of randomly shuffled documents from the provided data.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ spacy benchmark speed my_pipeline data.spacy\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"The output is the mean performance using batches (\", _jsx(InlineCode, {\n          children: \"nlp.pipe\"\n        }), \") with a 95%\\nconfidence interval, e.g., profiling \", _jsx(InlineCode, {\n          children: \"en_core_web_sm\"\n        }), \" on CPU:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-none\",\n          lang: \"none\",\n          children: \"Outliers: 2.0%, extreme outliers: 0.0%\\nMean: 18904.1 words/s (95% CI: -256.9 +244.1)\\n\"\n        })\n      }), _jsx(_components.h4, {\n        children: \"find-threshold CLI\"\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsxs(_components.a, {\n          href: \"/api/cli#find-threshold\",\n          children: [_jsx(InlineCode, {\n            children: \"find-threshold\"\n          }), \" CLI\"]\n        }), \" runs a series of trials\\nacross threshold values from \", _jsx(InlineCode, {\n          children: \"0.0\"\n        }), \" to \", _jsx(InlineCode, {\n          children: \"1.0\"\n        }), \" and identifies the best threshold\\nfor the provided score metric.\"]\n      }), _jsxs(_components.p, {\n        children: [\"The following command runs 20 trials for the \", _jsx(InlineCode, {\n          children: \"spancat\"\n        }), \" component in\\n\", _jsx(InlineCode, {\n          children: \"my_pipeline\"\n        }), \", recording the \", _jsx(InlineCode, {\n          children: \"spans_sc_f\"\n        }), \" score for each value of the threshold\\n\", _jsx(InlineCode, {\n          children: \"[components.spancat.threshold]\"\n        }), \" from \", _jsx(InlineCode, {\n          children: \"0.0\"\n        }), \" to \", _jsx(InlineCode, {\n          children: \"1.0\"\n        }), \":\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ spacy find-threshold my_pipeline data.spacy spancat threshold spans_sc_f --n_trials 20\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"find-threshold\"\n        }), \" CLI can be used with \", _jsx(InlineCode, {\n          children: \"textcat_multilabel\"\n        }), \", \", _jsx(InlineCode, {\n          children: \"spancat\"\n        }), \" and\\ncustom components with thresholds that are applied while predicting or scoring.\"]\n      }), _jsx(_components.h3, {\n        id: \"fuzzy\",\n        children: \"Fuzzy matching \"\n      }), _jsxs(_components.p, {\n        children: [\"New \", _jsx(InlineCode, {\n          children: \"FUZZY\"\n        }), \" operators support \", _jsx(_components.a, {\n          href: \"/usage/rule-based-matching#fuzzy\",\n          children: \"fuzzy matching\"\n        }), \"\\nwith the \", _jsx(InlineCode, {\n          children: \"Matcher\"\n        }), \". By default, the \", _jsx(InlineCode, {\n          children: \"FUZZY\"\n        }), \" operator allows a Levenshtein edit\\ndistance of 2 and up to 30% of the pattern string length. \", _jsx(InlineCode, {\n          children: \"FUZZY1\"\n        }), \"..\", _jsx(InlineCode, {\n          children: \"FUZZY9\"\n        }), \" can\\nbe used to specify the exact number of allowed edits.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"# Match lowercase with fuzzy matching (allows 2 edits by default)\\npattern = [{\\\"LOWER\\\": {\\\"FUZZY\\\": \\\"definitely\\\"}}]\\n\\n# Match custom attribute values with fuzzy matching (allows 2 edits by default)\\npattern = [{\\\"_\\\": {\\\"country\\\": {\\\"FUZZY\\\": \\\"Kyrgyzstan\\\"}}}]\\n\\n# Match with exact Levenshtein edit distance limits (allows 4 edits)\\npattern = [{\\\"_\\\": {\\\"country\\\": {\\\"FUZZY4\\\": \\\"Kyrgyzstan\\\"}}}]\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Note that \", _jsx(InlineCode, {\n          children: \"FUZZY\"\n        }), \" uses Levenshtein edit distance rather than Damerau-Levenshtein\\nedit distance, so a transposition like \", _jsx(InlineCode, {\n          children: \"teh\"\n        }), \" for \", _jsx(InlineCode, {\n          children: \"the\"\n        }), \" counts as two edits, one\\ninsertion and one deletion.\"]\n      }), _jsxs(_components.p, {\n        children: [\"If youâ€™d prefer an alternate fuzzy matching algorithm, you can provide your own\\ncustom method to the \", _jsx(InlineCode, {\n          children: \"Matcher\"\n        }), \" or as a config option for an entity ruler and\\nspan ruler.\"]\n      }), _jsx(_components.h3, {\n        id: \"fuzzy-regex-lists\",\n        children: \"FUZZY and REGEX with lists \"\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"FUZZY\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"REGEX\"\n        }), \" operators are also now supported for lists with \", _jsx(InlineCode, {\n          children: \"IN\"\n        }), \" and\\n\", _jsx(InlineCode, {\n          children: \"NOT_IN\"\n        }), \":\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"pattern = [{\\\"TEXT\\\": {\\\"FUZZY\\\": {\\\"IN\\\": [\\\"awesome\\\", \\\"cool\\\", \\\"wonderful\\\"]}}}]\\npattern = [{\\\"TEXT\\\": {\\\"REGEX\\\": {\\\"NOT_IN\\\": [\\\"^awe(some)?$\\\", \\\"^wonder(ful)?\\\"]}}}]\\n\"\n        })\n      }), _jsx(_components.h3, {\n        id: \"el\",\n        children: \"Entity linking generalization \"\n      }), _jsxs(_components.p, {\n        children: [\"The knowledge base used for entity linking is now easier to customize and has a\\nnew default implementation \", _jsx(_components.a, {\n          href: \"/api/inmemorylookupkb\",\n          children: _jsx(InlineCode, {\n            children: \"InMemoryLookupKB\"\n          })\n        }), \".\"]\n      }), _jsx(_components.h3, {\n        id: \"additional-features-and-improvements\",\n        children: \"Additional features and improvements \"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Language updates:\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"Extended support for Slovenian\"\n            }), \"\\n\", _jsx(_components.li, {\n              children: \"Fixed lookup fallback for French and Catalan lemmatizers\"\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"Switch Russian and Ukrainian lemmatizers to \", _jsx(InlineCode, {\n                children: \"pymorphy3\"\n              })]\n            }), \"\\n\", _jsx(_components.li, {\n              children: \"Support for editorial punctuation in Ancient Greek\"\n            }), \"\\n\", _jsx(_components.li, {\n              children: \"Update to Russian tokenizer exceptions\"\n            }), \"\\n\", _jsx(_components.li, {\n              children: \"Small fix for Dutch stop words\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Allow up to \", _jsx(InlineCode, {\n            children: \"typer\"\n          }), \" v0.7.x, \", _jsx(InlineCode, {\n            children: \"mypy\"\n          }), \" 0.990 and \", _jsx(InlineCode, {\n            children: \"typing_extensions\"\n          }), \" v4.4.x.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"New \", _jsx(InlineCode, {\n            children: \"spacy.ConsoleLogger.v3\"\n          }), \" with expanded progress\\n\", _jsx(_components.a, {\n            href: \"/api/top-level#ConsoleLogger\",\n            children: \"tracking\"\n          }), \".\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Improved scoring behavior for \", _jsx(InlineCode, {\n            children: \"textcat\"\n          }), \" with \", _jsx(InlineCode, {\n            children: \"spacy.textcat_scorer.v2\"\n          }), \" and\\n\", _jsx(InlineCode, {\n            children: \"spacy.textcat_multilabel_scorer.v2\"\n          }), \".\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Updates so that downstream components can train properly on a frozen \", _jsx(InlineCode, {\n            children: \"tok2vec\"\n          }), \"\\nor \", _jsx(InlineCode, {\n            children: \"transformer\"\n          }), \" layer.\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Allow interpolation of variables in directory names in projects.\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Support for local file system \", _jsx(_components.a, {\n            href: \"/usage/projects#remote\",\n            children: \"remotes\"\n          }), \" for projects.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Improve UX around \", _jsx(InlineCode, {\n            children: \"displacy.serve\"\n          }), \" when the default port is in use.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Optional \", _jsx(InlineCode, {\n            children: \"before_update\"\n          }), \" callback that is invoked at the start of each\\n\", _jsx(_components.a, {\n            href: \"/api/data-formats#config-training\",\n            children: \"training step\"\n          }), \".\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Improve performance of \", _jsx(InlineCode, {\n            children: \"SpanGroup\"\n          }), \" and fix typing issues for \", _jsx(InlineCode, {\n            children: \"SpanGroup\"\n          }), \" and\\n\", _jsx(InlineCode, {\n            children: \"Span\"\n          }), \" objects.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Patch a\\n\", _jsx(_components.a, {\n            href: \"https://github.com/advisories/GHSA-gw9q-c7gh-j9vm\",\n            children: \"security vulnerability\"\n          }), \" in\\nextracting tar files.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Add equality definition for \", _jsx(InlineCode, {\n            children: \"Vectors\"\n          }), \".\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Ensure \", _jsx(InlineCode, {\n            children: \"Vocab.to_disk\"\n          }), \" respects the exclude setting for \", _jsx(InlineCode, {\n            children: \"lookups\"\n          }), \" and\\n\", _jsx(InlineCode, {\n            children: \"vectors\"\n          }), \".\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Correctly handle missing annotations in the edit tree lemmatizer.\"\n        }), \"\\n\"]\n      }), _jsx(_components.h3, {\n        id: \"pipelines\",\n        children: \"Trained pipeline updates \"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"The CNN pipelines add \", _jsx(InlineCode, {\n            children: \"IS_SPACE\"\n          }), \" as a \", _jsx(InlineCode, {\n            children: \"tok2vec\"\n          }), \" feature for \", _jsx(InlineCode, {\n            children: \"tagger\"\n          }), \" and\\n\", _jsx(InlineCode, {\n            children: \"morphologizer\"\n          }), \" components to improve tagging of non-whitespace vs. whitespace\\ntokens.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The transformer pipelines require \", _jsx(InlineCode, {\n            children: \"spacy-transformers\"\n          }), \" v1.2, which uses the\\nexact alignment from \", _jsx(InlineCode, {\n            children: \"tokenizers\"\n          }), \" for fast tokenizers instead of the heuristic\\nalignment from \", _jsx(InlineCode, {\n            children: \"spacy-alignments\"\n          }), \". For all trained pipelines except\\n\", _jsx(InlineCode, {\n            children: \"ja_core_news_trf\"\n          }), \", the alignments between spaCy tokens and transformer tokens\\nmay be slightly different. More details about the \", _jsx(InlineCode, {\n            children: \"spacy-transformers\"\n          }), \" changes\\nin the\\n\", _jsx(_components.a, {\n            href: \"https://github.com/explosion/spacy-transformers/releases/tag/v1.2.0\",\n            children: \"v1.2.0 release notes\"\n          }), \".\"]\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-upgrading\",\n      children: [_jsx(_components.h2, {\n        id: \"upgrading\",\n        children: \"Notes about upgrading from v3.4 \"\n      }), _jsx(_components.h3, {\n        id: \"textcat-validation\",\n        children: \"Validation of textcat values \"\n      }), _jsxs(_components.p, {\n        children: [\"An error is now raised when unsupported values are given as input to train a\\n\", _jsx(InlineCode, {\n          children: \"textcat\"\n        }), \" or \", _jsx(InlineCode, {\n          children: \"textcat_multilabel\"\n        }), \" model - ensure that values are \", _jsx(InlineCode, {\n          children: \"0.0\"\n        }), \" or \", _jsx(InlineCode, {\n          children: \"1.0\"\n        }), \"\\nas explained in the \", _jsx(_components.a, {\n          href: \"/api/textcategorizer#assigned-attributes\",\n          children: \"docs\"\n        }), \".\"]\n      }), _jsx(_components.h3, {\n        children: \"Using the default knowledge base\"\n      }), _jsxs(_components.p, {\n        children: [\"As \", _jsx(InlineCode, {\n          children: \"KnowledgeBase\"\n        }), \" is now an abstract class, you should call the constructor of\\nthe new \", _jsx(InlineCode, {\n          children: \"InMemoryLookupKB\"\n        }), \" instead when you want to use spaCyâ€™s default KB\\nimplementation:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"- kb = KnowledgeBase()\\n+ kb = InMemoryLookupKB()\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"If youâ€™ve written a custom KB that inherits from \", _jsx(InlineCode, {\n          children: \"KnowledgeBase\"\n        }), \", youâ€™ll need to\\nimplement its abstract methods, or alternatively inherit from \", _jsx(InlineCode, {\n          children: \"InMemoryLookupKB\"\n        }), \"\\ninstead.\"]\n      }), _jsx(_components.h3, {\n        id: \"scores\",\n        children: \"Updated scorers for tokenization and textcat \"\n      }), _jsxs(_components.p, {\n        children: [\"We fixed a bug that inflated the \", _jsx(InlineCode, {\n          children: \"token_acc\"\n        }), \" scores in v3.0-v3.4. The reported\\n\", _jsx(InlineCode, {\n          children: \"token_acc\"\n        }), \" will drop from v3.4 to v3.5, but if \", _jsx(InlineCode, {\n          children: \"token_p/r/f\"\n        }), \" stay the same,\\nyour tokenization performance has not changed from v3.4.\"]\n      }), _jsxs(_components.p, {\n        children: [\"For new \", _jsx(InlineCode, {\n          children: \"textcat\"\n        }), \" or \", _jsx(InlineCode, {\n          children: \"textcat_multilabel\"\n        }), \" configs, the new default \", _jsx(InlineCode, {\n          children: \"v2\"\n        }), \" scorers:\"]\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"ignore \", _jsx(InlineCode, {\n            children: \"threshold\"\n          }), \" for \", _jsx(InlineCode, {\n            children: \"textcat\"\n          }), \", so the reported \", _jsx(InlineCode, {\n            children: \"cats_p/r/f\"\n          }), \" may increase\\nslightly in v3.5 even though the underlying predictions are unchanged\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"report the performance of only the \", _jsx(_components.strong, {\n            children: \"final\"\n          }), \" \", _jsx(InlineCode, {\n            children: \"textcat\"\n          }), \" or \", _jsx(InlineCode, {\n            children: \"textcat_multilabel\"\n          }), \"\\ncomponent in the pipeline by default\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"allow custom scorers to be used to score multiple \", _jsx(InlineCode, {\n            children: \"textcat\"\n          }), \" and\\n\", _jsx(InlineCode, {\n            children: \"textcat_multilabel\"\n          }), \" components with \", _jsx(InlineCode, {\n            children: \"Scorer.score_cats\"\n          }), \" by restricting the\\nevaluation to the componentâ€™s provided labels\"]\n        }), \"\\n\"]\n      }), _jsx(_components.h3, {\n        id: \"version-compat\",\n        children: \"Pipeline package version compatibility \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Using legacy implementations\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"In spaCy v3, youâ€™ll still be able to load and reference legacy implementations\\nvia \", _jsx(_components.a, {\n            href: \"https://github.com/explosion/spacy-legacy\",\n            children: _jsx(InlineCode, {\n              children: \"spacy-legacy\"\n            })\n          }), \", even if the\\ncomponents or architectures change and newer versions are available in the\\ncore library.\"]\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"When youâ€™re loading a pipeline package trained with an earlier version of spaCy\\nv3, you will see a warning telling you that the pipeline may be incompatible.\\nThis doesnâ€™t necessarily have to be true, but we recommend running your\\npipelines against your test suite or evaluation data to make sure there are no\\nunexpected results.\"\n      }), _jsxs(_components.p, {\n        children: [\"If youâ€™re using one of the \", _jsx(_components.a, {\n          href: \"/models\",\n          children: \"trained pipelines\"\n        }), \" we provide, you should\\nrun \", _jsx(_components.a, {\n          href: \"/api/cli#download\",\n          children: _jsx(InlineCode, {\n            children: \"spacy download\"\n          })\n        }), \" to update to the latest version. To\\nsee an overview of all installed packages and their compatibility, you can run\\n\", _jsx(_components.a, {\n          href: \"/api/cli#validate\",\n          children: _jsx(InlineCode, {\n            children: \"spacy validate\"\n          })\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [\"If youâ€™ve trained your own custom pipeline and youâ€™ve confirmed that itâ€™s still\\nworking as expected, you can update the spaCy version requirements in the\\n\", _jsx(_components.a, {\n          href: \"/api/data-formats#meta\",\n          children: _jsx(InlineCode, {\n            children: \"meta.json\"\n          })\n        }), \":\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"- \\\"spacy_version\\\": \\\">=3.4.0,<3.5.0\\\",\\n+ \\\"spacy_version\\\": \\\">=3.4.0,<3.6.0\\\",\\n\"\n        })\n      }), _jsx(_components.h3, {\n        children: \"Updating v3.4 configs\"\n      }), _jsxs(_components.p, {\n        children: [\"To update a config from spaCy v3.4 with the new v3.5 settings, run\\n\", _jsx(_components.a, {\n          href: \"/api/cli#init-fill-config\",\n          children: _jsx(InlineCode, {\n            children: \"init fill-config\"\n          })\n        }), \":\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-cli\",\n          lang: \"cli\",\n          children: \"$ python -m spacy init fill-config config-v3.4.cfg config-v3.5.cfg\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"In many cases (\", _jsx(_components.a, {\n          href: \"/api/cli#train\",\n          children: _jsx(InlineCode, {\n            children: \"spacy train\"\n          })\n        }), \",\\n\", _jsx(_components.a, {\n          href: \"/api/top-level#spacy.load\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.load\"\n          })\n        }), \"), the new defaults will be filled in\\nautomatically, but youâ€™ll need to fill in the new settings to run\\n\", _jsx(_components.a, {\n          href: \"/api/cli#debug\",\n          children: _jsx(InlineCode, {\n            children: \"debug config\"\n          })\n        }), \" and \", _jsx(_components.a, {\n          href: \"/api/cli#debug-data\",\n          children: _jsx(InlineCode, {\n            children: \"debug data\"\n          })\n        }), \".\"]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"What's New in v3.5","teaser":"New features and how to upgrade","menu":[["New Features","features"],["Upgrading Notes","upgrading"]]},"scope":{}},"sectionTitle":"Usage Documentation","theme":"blue","section":"usage","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false,"next":{"slug":"/usage/linguistic-features","title":"Linguistic Features"}},"__N_SSG":true}