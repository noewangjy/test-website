{"pageProps":{"title":"Models & Languages","next":{"slug":"/usage/facts-figures","title":"Facts & Figures"},"menu":[["Quickstart","quickstart"],["Language Support","languages"],["Installation & Usage","download"],["Production Use","production"]],"slug":"/usage/models","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    h2: \"h2\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    del: \"del\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {InlineCode, QuickstartModels, Languages, Infobox, Accordion} = _components;\n  if (!Accordion) _missingMdxReference(\"Accordion\", true);\n  if (!Infobox) _missingMdxReference(\"Infobox\", true);\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  if (!Languages) _missingMdxReference(\"Languages\", true);\n  if (!QuickstartModels) _missingMdxReference(\"QuickstartModels\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.section, {\n      children: [_jsxs(_components.p, {\n        children: [\"spaCy’s trained pipelines can be installed as \", _jsx(_components.strong, {\n          children: \"Python packages\"\n        }), \". This means\\nthat they’re a component of your application, just like any other module.\\nThey’re versioned and can be defined as a dependency in your \", _jsx(InlineCode, {\n          children: \"requirements.txt\"\n        }), \".\\nTrained pipelines can be installed from a download URL or a local directory,\\nmanually or via \", _jsx(_components.a, {\n          href: \"https://pypi.python.org/pypi/pip\",\n          children: \"pip\"\n        }), \". Their data can be\\nlocated anywhere on your file system.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Important note\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"If you’re upgrading to spaCy v3.x, you need to \", _jsx(_components.strong, {\n            children: \"download the new pipeline\\npackages\"\n          }), \". If you’ve trained your own pipelines, you need to \", _jsx(_components.strong, {\n            children: \"retrain\"\n          }), \" them\\nafter updating spaCy.\"]\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      children: [_jsx(_components.h2, {\n        hidden: \"true\",\n        children: \"Quickstart \"\n      }), _jsx(QuickstartModels, {\n        title: \"Quickstart\",\n        id: \"quickstart\",\n        description: \"Install a default trained pipeline package, get the code to load it from within spaCy and an example to test it. For more options, see the section on available packages below.\"\n      }), _jsx(_components.h3, {\n        children: \"Usage note\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"If lemmatization rules are available for your language, make sure to install\\nspaCy with the \", _jsx(InlineCode, {\n            children: \"lookups\"\n          }), \" option, or install\\n\", _jsx(_components.a, {\n            href: \"https://github.com/explosion/spacy-lookups-data\",\n            children: _jsx(InlineCode, {\n              children: \"spacy-lookups-data\"\n            })\n          }), \"\\nseparately in the same environment:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            lang: \"bash\",\n            children: \"$ pip install -U spacy[lookups]\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"If a trained pipeline is available for a language, you can download it using the\\n\", _jsx(_components.a, {\n          href: \"/api/cli#download\",\n          children: _jsx(InlineCode, {\n            children: \"spacy download\"\n          })\n        }), \" command as shown above. In order to use\\nlanguages that don’t yet come with a trained pipeline, you have to import them\\ndirectly, or use \", _jsx(_components.a, {\n          href: \"/api/top-level#spacy.blank\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.blank\"\n          })\n        }), \":\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"from spacy.lang.yo import Yoruba\\nnlp = Yoruba()  # use directly\\nnlp = spacy.blank(\\\"yo\\\")  # blank instance\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"A blank pipeline is typically just a tokenizer. You might want to create a blank\\npipeline when you only need a tokenizer, when you want to add more components\\nfrom scratch, or for testing purposes. Initializing the language object directly\\nyields the same result as generating it using \", _jsx(InlineCode, {\n          children: \"spacy.blank()\"\n        }), \". In both cases the\\ndefault configuration for the chosen language is loaded, and no pretrained\\ncomponents will be available.\"]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-languages\",\n      children: [_jsx(_components.h2, {\n        id: \"languages\",\n        children: \"Language support \"\n      }), _jsxs(_components.p, {\n        children: [\"spaCy currently provides support for the following languages. You can help by\\nimproving the existing \", _jsx(_components.a, {\n          href: \"/usage/linguistic-features#language-data\",\n          children: \"language data\"\n        }), \"\\nand extending the tokenization patterns.\\n\", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spaCy/issues/3056\",\n          children: \"See here\"\n        }), \" for details on how to\\ncontribute to development. Also see the\\n\", _jsx(_components.a, {\n          href: \"/usage/training\",\n          children: \"training documentation\"\n        }), \" for how to train your own pipelines on\\nyour data.\"]\n      }), _jsx(Languages, {}), _jsx(_components.h3, {\n        id: \"multi-language\",\n        version: \"2\",\n        children: \"Multi-language support \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"# Standard import\\nfrom spacy.lang.xx import MultiLanguage\\nnlp = MultiLanguage()\\n\\n# With lazy-loading\\nnlp = spacy.blank(\\\"xx\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"spaCy also supports pipelines trained on more than one language. This is\\nespecially useful for named entity recognition. The language ID used for\\nmulti-language or language-neutral pipelines is \", _jsx(InlineCode, {\n          children: \"xx\"\n        }), \". The language class, a\\ngeneric subclass containing only the base language data, can be found in\\n\", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spaCy/tree/master/spacy/lang/xx\",\n          children: _jsx(InlineCode, {\n            children: \"lang/xx\"\n          })\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [\"To train a pipeline using the neutral multi-language class, you can set\\n\", _jsx(InlineCode, {\n          children: \"lang = \\\"xx\\\"\"\n        }), \" in your \", _jsx(_components.a, {\n          href: \"/usage/training#config\",\n          children: \"training config\"\n        }), \". You can also\\n\\\\import the \", _jsx(InlineCode, {\n          children: \"MultiLanguage\"\n        }), \" class directly, or call\\n\", _jsx(_components.a, {\n          href: \"/api/top-level#spacy.blank\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.blank(\\\"xx\\\")\"\n          })\n        }), \" for lazy-loading.\"]\n      }), _jsx(_components.h3, {\n        id: \"chinese\",\n        version: \"2.3\",\n        children: \"Chinese language support \"\n      }), _jsxs(_components.p, {\n        children: [\"The Chinese language class supports three word segmentation options, \", _jsx(InlineCode, {\n          children: \"char\"\n        }), \",\\n\", _jsx(InlineCode, {\n          children: \"jieba\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"pkuseg\"\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Manual setup\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.lang.zh import Chinese\\n\\n# Character segmentation (default)\\nnlp = Chinese()\\n# Jieba\\ncfg = {\\\"segmenter\\\": \\\"jieba\\\"}\\nnlp = Chinese.from_config({\\\"nlp\\\": {\\\"tokenizer\\\": cfg}})\\n# PKUSeg with \\\"mixed\\\" model provided by pkuseg\\ncfg = {\\\"segmenter\\\": \\\"pkuseg\\\"}\\nnlp = Chinese.from_config({\\\"nlp\\\": {\\\"tokenizer\\\": cfg}})\\nnlp.tokenizer.initialize(pkuseg_model=\\\"mixed\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ini\",\n          lang: \"ini\",\n          title: \"config.cfg\",\n          children: \"[nlp.tokenizer]\\n@tokenizers = \\\"spacy.zh.ChineseTokenizer\\\"\\nsegmenter = \\\"char\\\"\\n\"\n        })\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Segmenter\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"char\"\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(_components.strong, {\n                children: \"Character segmentation:\"\n              }), \" Character segmentation is the default segmentation option. It’s enabled when you create a new \", _jsx(InlineCode, {\n                children: \"Chinese\"\n              }), \" language class or call \", _jsx(InlineCode, {\n                children: \"spacy.blank(\\\"zh\\\")\"\n              }), \".\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"jieba\"\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(_components.strong, {\n                children: \"Jieba:\"\n              }), \" to use \", _jsx(_components.a, {\n                href: \"https://github.com/fxsjy/jieba\",\n                children: \"Jieba\"\n              }), \" for word segmentation, you can set the option \", _jsx(InlineCode, {\n                children: \"segmenter\"\n              }), \" to \", _jsx(InlineCode, {\n                children: \"\\\"jieba\\\"\"\n              }), \".\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"pkuseg\"\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(_components.strong, {\n                children: \"PKUSeg\"\n              }), \": As of spaCy v2.3.0, support for \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/spacy-pkuseg\",\n                children: \"PKUSeg\"\n              }), \" has been added to support better segmentation for Chinese OntoNotes and the provided \", _jsx(_components.a, {\n                href: \"/models/zh\",\n                children: \"Chinese pipelines\"\n              }), \". Enable PKUSeg by setting tokenizer option \", _jsx(InlineCode, {\n                children: \"segmenter\"\n              }), \" to \", _jsx(InlineCode, {\n                children: \"\\\"pkuseg\\\"\"\n              }), \".\"]\n            })]\n          })]\n        })]\n      }), _jsx(Infobox, {\n        title: \"Changed in v3.0\",\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"In v3.0, the default word segmenter has switched from Jieba to character\\nsegmentation. Because the \", _jsx(InlineCode, {\n            children: \"pkuseg\"\n          }), \" segmenter depends on a model that can be\\nloaded from a file, the model is loaded on\\n\", _jsx(_components.a, {\n            href: \"/usage/training#config-lifecycle\",\n            children: \"initialization\"\n          }), \" (typically before training).\\nThis ensures that your packaged Chinese model doesn’t depend on a local path at\\nruntime.\"]\n        })\n      }), _jsxs(Accordion, {\n        title: \"Details on spaCy's Chinese API\",\n        children: [_jsxs(_components.p, {\n          children: [\"The \", _jsx(InlineCode, {\n            children: \"initialize\"\n          }), \" method for the Chinese tokenizer class supports the following\\nconfig settings for loading \", _jsx(InlineCode, {\n            children: \"pkuseg\"\n          }), \" models:\"]\n        }), _jsxs(_components.table, {\n          children: [_jsx(_components.thead, {\n            children: _jsxs(_components.tr, {\n              children: [_jsx(_components.th, {\n                children: \"Name\"\n              }), _jsx(_components.th, {\n                children: \"Description\"\n              })]\n            })\n          }), _jsxs(_components.tbody, {\n            children: [_jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: _jsx(InlineCode, {\n                  children: \"pkuseg_model\"\n                })\n              }), _jsxs(_components.td, {\n                children: [\"Name of a model provided by \", _jsx(InlineCode, {\n                  children: \"spacy-pkuseg\"\n                }), \" or the path to a local model directory. \", _jsx(_components.del, {\n                  children: \"str\"\n                })]\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: _jsx(InlineCode, {\n                  children: \"pkuseg_user_dict\"\n                })\n              }), _jsxs(_components.td, {\n                children: [\"Optional path to a file with one word per line which overrides the default \", _jsx(InlineCode, {\n                  children: \"pkuseg\"\n                }), \" user dictionary. Defaults to \", _jsx(InlineCode, {\n                  children: \"\\\"default\\\"\"\n                }), \", the default provided dictionary. \", _jsx(_components.del, {\n                  children: \"str\"\n                })]\n              })]\n            })]\n          })]\n        }), _jsxs(_components.p, {\n          children: [\"The initialization settings are typically provided in the\\n\", _jsx(_components.a, {\n            href: \"/usage/training#config\",\n            children: \"training config\"\n          }), \" and the data is loaded in before\\ntraining and serialized with the model. This allows you to load the data from a\\nlocal path and save out your pipeline and config, without requiring the same\\nlocal path at runtime. See the usage guide on the\\n\", _jsx(_components.a, {\n            href: \"/usage/training#config-lifecycle\",\n            children: \"config lifecycle\"\n          }), \" for more background on\\nthis.\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            title: \"config.cfg\",\n            children: \"[initialize]\\n\\n[initialize.tokenizer]\\npkuseg_model = \\\"/path/to/model\\\"\\npkuseg_user_dict = \\\"default\\\"\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"You can also initialize the tokenizer for a blank language class by calling its\\n\", _jsx(InlineCode, {\n            children: \"initialize\"\n          }), \" method:\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            title: \"Examples\",\n            children: \"# Initialize the pkuseg tokenizer\\ncfg = {\\\"segmenter\\\": \\\"pkuseg\\\"}\\nnlp = Chinese.from_config({\\\"nlp\\\": {\\\"tokenizer\\\": cfg}})\\n\\n# Load spaCy's OntoNotes model\\nnlp.tokenizer.initialize(pkuseg_model=\\\"spacy_ontonotes\\\")\\n\\n# Load pkuseg's \\\"news\\\" model\\nnlp.tokenizer.initialize(pkuseg_model=\\\"news\\\")\\n\\n# Load local model\\nnlp.tokenizer.initialize(pkuseg_model=\\\"/path/to/pkuseg_model\\\")\\n\\n# Override the user directory\\nnlp.tokenizer.initialize(pkuseg_model=\\\"spacy_ontonotes\\\", pkuseg_user_dict=\\\"/path/to/user_dict\\\")\\n\"\n          })\n        }), _jsx(_components.p, {\n          children: \"You can also modify the user dictionary on-the-fly:\"\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"# Append words to user dict\\nnlp.tokenizer.pkuseg_update_user_dict([\\\"中国\\\", \\\"ABC\\\"])\\n\\n# Remove all words from user dict and replace with new words\\nnlp.tokenizer.pkuseg_update_user_dict([\\\"中国\\\"], reset=True)\\n\\n# Remove all words from user dict\\nnlp.tokenizer.pkuseg_update_user_dict([], reset=True)\\n\"\n          })\n        })]\n      }), _jsxs(Accordion, {\n        title: \"Details on trained and custom Chinese pipelines\",\n        spaced: true,\n        children: [_jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.a, {\n            href: \"/models/zh\",\n            children: \"Chinese pipelines\"\n          }), \" provided by spaCy include a custom \", _jsx(InlineCode, {\n            children: \"pkuseg\"\n          }), \"\\nmodel trained only on\\n\", _jsx(_components.a, {\n            href: \"https://catalog.ldc.upenn.edu/LDC2013T19\",\n            children: \"Chinese OntoNotes 5.0\"\n          }), \", since the\\nmodels provided by \", _jsx(InlineCode, {\n            children: \"pkuseg\"\n          }), \" include data restricted to research use. For\\nresearch use, \", _jsx(InlineCode, {\n            children: \"pkuseg\"\n          }), \" provides models for several different domains (\", _jsx(InlineCode, {\n            children: \"\\\"mixed\\\"\"\n          }), \"\\n(equivalent to \", _jsx(InlineCode, {\n            children: \"\\\"default\\\"\"\n          }), \" from \", _jsx(InlineCode, {\n            children: \"pkuseg\"\n          }), \" packages), \", _jsx(InlineCode, {\n            children: \"\\\"news\\\"\"\n          }), \" \", _jsx(InlineCode, {\n            children: \"\\\"web\\\"\"\n          }), \",\\n\", _jsx(InlineCode, {\n            children: \"\\\"medicine\\\"\"\n          }), \", \", _jsx(InlineCode, {\n            children: \"\\\"tourism\\\"\"\n          }), \") and for other uses, \", _jsx(InlineCode, {\n            children: \"pkuseg\"\n          }), \" provides a simple\\n\", _jsx(_components.a, {\n            href: \"https://github.com/explosion/spacy-pkuseg/blob/master/readme/readme_english.md#usage\",\n            children: \"training API\"\n          }), \":\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"import spacy_pkuseg as pkuseg\\nfrom spacy.lang.zh import Chinese\\n\\n# Train pkuseg model\\npkuseg.train(\\\"train.utf8\\\", \\\"test.utf8\\\", \\\"/path/to/pkuseg_model\\\")\\n\\n# Load pkuseg model in spaCy Chinese tokenizer\\ncfg = {\\\"segmenter\\\": \\\"pkuseg\\\"}\\nnlp = Chinese.from_config({\\\"nlp\\\": {\\\"tokenizer\\\": cfg}})\\nnlp.tokenizer.initialize(pkuseg_model=\\\"/path/to/pkuseg_model\\\")\\n\"\n          })\n        })]\n      }), _jsx(_components.h3, {\n        id: \"japanese\",\n        version: \"2.3\",\n        children: \"Japanese language support \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Manual setup\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.lang.ja import Japanese\\n\\n# Load SudachiPy with split mode A (default)\\nnlp = Japanese()\\n# Load SudachiPy with split mode B\\ncfg = {\\\"split_mode\\\": \\\"B\\\"}\\nnlp = Japanese.from_config({\\\"nlp\\\": {\\\"tokenizer\\\": cfg}})\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"The Japanese language class uses\\n\", _jsx(_components.a, {\n          href: \"https://github.com/WorksApplications/SudachiPy\",\n          children: \"SudachiPy\"\n        }), \" for word\\nsegmentation and part-of-speech tagging. The default Japanese language class and\\nthe provided Japanese pipelines use SudachiPy split mode \", _jsx(InlineCode, {\n          children: \"A\"\n        }), \". The tokenizer\\nconfig can be used to configure the split mode to \", _jsx(InlineCode, {\n          children: \"A\"\n        }), \", \", _jsx(InlineCode, {\n          children: \"B\"\n        }), \" or \", _jsx(InlineCode, {\n          children: \"C\"\n        }), \".\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ini\",\n          lang: \"ini\",\n          title: \"config.cfg\",\n          children: \"[nlp.tokenizer]\\n@tokenizers = \\\"spacy.ja.JapaneseTokenizer\\\"\\nsplit_mode = \\\"A\\\"\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Extra information, such as reading, inflection form, and the SudachiPy\\nnormalized form, is available in \", _jsx(InlineCode, {\n          children: \"Token.morph\"\n        }), \". For \", _jsx(InlineCode, {\n          children: \"B\"\n        }), \" or \", _jsx(InlineCode, {\n          children: \"C\"\n        }), \" split modes,\\nsubtokens are stored in \", _jsx(InlineCode, {\n          children: \"Doc.user_data[\\\"sub_tokens\\\"]\"\n        }), \".\"]\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"If you run into errors related to \", _jsx(InlineCode, {\n            children: \"sudachipy\"\n          }), \", which is currently under active\\ndevelopment, we suggest downgrading to \", _jsx(InlineCode, {\n            children: \"sudachipy==0.4.9\"\n          }), \", which is the version\\nused for training the current \", _jsx(_components.a, {\n            href: \"/models/ja\",\n            children: \"Japanese pipelines\"\n          }), \".\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"korean\",\n        children: \"Korean language support \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"mecab-ko tokenizer\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"nlp = spacy.blank(\\\"ko\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"The default MeCab-based Korean tokenizer requires:\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://bitbucket.org/eunjeon/mecab-ko/src/master/README.md\",\n            children: \"mecab-ko\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://bitbucket.org/eunjeon/mecab-ko-dic\",\n            children: \"mecab-ko-dic\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://github.com/buruzaemon/natto-py\",\n            children: \"natto-py\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"For some Korean datasets and tasks, the\\n\", _jsx(_components.a, {\n          href: \"/usage/linguistic-features#tokenization\",\n          children: \"rule-based tokenizer\"\n        }), \" is better-suited\\nthan MeCab. To configure a Korean pipeline with the rule-based tokenizer:\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Rule-based tokenizer\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"config = {\\\"nlp\\\": {\\\"tokenizer\\\": {\\\"@tokenizers\\\": \\\"spacy.Tokenizer.v1\\\"}}}\\nnlp = spacy.blank(\\\"ko\\\", config=config)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ini\",\n          lang: \"ini\",\n          title: \"config.cfg\",\n          children: \"[nlp]\\nlang = \\\"ko\\\"\\ntokenizer = {\\\"@tokenizers\\\" = \\\"spacy.Tokenizer.v1\\\"}\\n\"\n        })\n      }), _jsx(Infobox, {\n        children: _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.a, {\n            href: \"/models/ko\",\n            children: \"Korean trained pipelines\"\n          }), \" use the rule-based tokenizer, so no\\nadditional dependencies are required.\"]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-download\",\n      children: [_jsx(_components.h2, {\n        id: \"download\",\n        children: \"Installing and using trained pipelines \"\n      }), _jsxs(_components.p, {\n        children: [\"The easiest way to download a trained pipeline is via spaCy’s\\n\", _jsx(_components.a, {\n          href: \"/api/cli#download\",\n          children: _jsx(InlineCode, {\n            children: \"download\"\n          })\n        }), \" command. It takes care of finding the\\nbest-matching package compatible with your spaCy installation.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Important note for v3.0\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"Note that as of spaCy v3.0, shortcut links like \", _jsx(InlineCode, {\n            children: \"en\"\n          }), \" that create (potentially\\nbrittle) symlinks in your spaCy installation are \", _jsx(_components.strong, {\n            children: \"deprecated\"\n          }), \". To download\\nand load an installed pipeline package, use its full name:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            lang: \"diff\",\n            children: \"- python -m spacy download en\\n+ python -m spacy download en_core_web_sm\\n\"\n          })\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            lang: \"diff\",\n            children: \"- nlp = spacy.load(\\\"en\\\")\\n+ nlp = spacy.load(\\\"en_core_web_sm\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"# Download best-matching version of a package for your spaCy installation\\n$ python -m spacy download en_core_web_sm\\n\\n# Download exact package version\\n$ python -m spacy download en_core_web_sm-3.0.0 --direct\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"The download command will \", _jsx(_components.a, {\n          href: \"/usage/models#download-pip\",\n          children: \"install the package\"\n        }), \" via\\npip and place the package in your \", _jsx(InlineCode, {\n          children: \"site-packages\"\n        }), \" directory.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ pip install -U spacy\\n$ python -m spacy download en_core_web_sm\\n\"\n        })\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"import spacy\\nnlp = spacy.load(\\\"en_core_web_sm\\\")\\ndoc = nlp(\\\"This is a sentence.\\\")\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"If you’re in a \", _jsx(_components.strong, {\n          children: \"Jupyter notebook\"\n        }), \" or similar environment, you can use the \", _jsx(InlineCode, {\n          children: \"!\"\n        }), \"\\nprefix to\\n\", _jsx(_components.a, {\n          href: \"https://ipython.org/ipython-doc/3/interactive/tutorial.html#system-shell-commands\",\n          children: \"execute commands\"\n        }), \".\\nMake sure to \", _jsx(_components.strong, {\n          children: \"restart your kernel\"\n        }), \" or runtime after installation (just like\\nyou would when installing other Python packages) to make sure that the installed\\npipeline package can be found.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"!python -m spacy download en_core_web_sm\\n\"\n        })\n      }), _jsx(_components.h3, {\n        id: \"download-pip\",\n        children: \"Installation via pip \"\n      }), _jsxs(_components.p, {\n        children: [\"To download a trained pipeline directly using\\n\", _jsx(_components.a, {\n          href: \"https://pypi.python.org/pypi/pip\",\n          children: \"pip\"\n        }), \", point \", _jsx(InlineCode, {\n          children: \"pip install\"\n        }), \" to the URL or local\\npath of the wheel file or archive. Installing the wheel is usually more\\nefficient.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsxs(_components.h4, {\n          children: [\"Pipeline Package URLs \", id = \"pipeline-urls\"]\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"Pretrained pipeline distributions are hosted on\\n\", _jsx(_components.a, {\n            href: \"https://github.com/explosion/spacy-models/releases\",\n            children: \"Github Releases\"\n          }), \", and you\\ncan find download links there, as well as on the model page. You can also get\\nURLs directly from the command line by using \", _jsx(InlineCode, {\n            children: \"spacy info\"\n          }), \" with the \", _jsx(InlineCode, {\n            children: \"--url\"\n          }), \"\\nflag, which may be useful for automation.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            lang: \"bash\",\n            children: \"spacy info en_core_web_sm --url\\n\"\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"This command will print the URL for the latest version of a pipeline\\ncompatible with the version of spaCy you’re using. Note that in order to look\\nup the compatibility information an internet connection is required.\"\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"# With external URL\\n$ pip install https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.0.0/en_core_web_sm-3.0.0-py3-none-any.whl\\n$ pip install https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.0.0/en_core_web_sm-3.0.0.tar.gz\\n\\n# Using spacy info to get the external URL\\n$ pip install $(spacy info en_core_web_sm --url)\\n\\n# With local file\\n$ pip install /Users/you/en_core_web_sm-3.0.0-py3-none-any.whl\\n$ pip install /Users/you/en_core_web_sm-3.0.0.tar.gz\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"By default, this will install the pipeline package into your \", _jsx(InlineCode, {\n          children: \"site-packages\"\n        }), \"\\ndirectory. You can then use \", _jsx(InlineCode, {\n          children: \"spacy.load\"\n        }), \" to load it via its package name or\\n\", _jsx(_components.a, {\n          href: \"#usage-import\",\n          children: \"import it\"\n        }), \" explicitly as a module. If you need to download\\npipeline packages as part of an automated process, we recommend using pip with a\\ndirect link, instead of relying on spaCy’s \", _jsx(_components.a, {\n          href: \"/api/cli#download\",\n          children: _jsx(InlineCode, {\n            children: \"download\"\n          })\n        }), \"\\ncommand.\"]\n      }), _jsxs(_components.p, {\n        children: [\"You can also add the direct download link to your application’s\\n\", _jsx(InlineCode, {\n          children: \"requirements.txt\"\n        }), \". For more details, see the section on\\n\", _jsx(_components.a, {\n          href: \"#production\",\n          children: \"working with pipeline packages in production\"\n        }), \".\"]\n      }), _jsx(_components.h3, {\n        id: \"download-manual\",\n        children: \"Manual download and installation \"\n      }), _jsxs(_components.p, {\n        children: [\"In some cases, you might prefer downloading the data manually, for example to\\nplace it into a custom directory. You can download the package via your browser\\nfrom the \", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spacy-models/releases\",\n          children: \"latest releases\"\n        }), \",\\nor configure your own download script using the URL of the archive file. The\\narchive consists of a package directory that contains another directory with the\\npipeline data.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-yaml\",\n          lang: \"yaml\",\n          title: \"Directory structure\",\n          highlight: \"6\",\n          children: \"└── en_core_web_md-3.0.0.tar.gz       # downloaded archive\\n    ├── setup.py                      # setup file for pip installation\\n    ├── meta.json                     # copy of pipeline meta\\n    └── en_core_web_md                # 📦 pipeline package\\n        ├── __init__.py               # init for pip installation\\n        └── en_core_web_md-3.0.0      # pipeline data\\n            ├── config.cfg            # pipeline config\\n            ├── meta.json             # pipeline meta\\n            └── ...                   # directories with component data\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"You can place the \", _jsx(_components.strong, {\n          children: \"pipeline package directory\"\n        }), \" anywhere on your local file\\nsystem.\"]\n      }), _jsx(_components.h3, {\n        id: \"download-python\",\n        children: \"Installation from Python \"\n      }), _jsxs(_components.p, {\n        children: [\"Since the \", _jsx(_components.a, {\n          href: \"/api/cli#download\",\n          children: _jsx(InlineCode, {\n            children: \"spacy download\"\n          })\n        }), \" command installs the pipeline as\\na \", _jsx(_components.strong, {\n          children: \"Python package\"\n        }), \", we always recommend running it from the command line, just\\nlike you install other Python packages with \", _jsx(InlineCode, {\n          children: \"pip install\"\n        }), \". However, if you need\\nto, or if you want to integrate the download process into another CLI command,\\nyou can also import and call the \", _jsx(InlineCode, {\n          children: \"download\"\n        }), \" function used by the CLI via Python.\"]\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"Keep in mind that the \", _jsx(InlineCode, {\n            children: \"download\"\n          }), \" command installs a Python package into your\\nenvironment. In order for it to be found after installation, you will need to\\n\", _jsx(_components.strong, {\n            children: \"restart or reload\"\n          }), \" your Python process so that new packages are recognized.\"]\n        })\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"import spacy\\nspacy.cli.download(\\\"en_core_web_sm\\\")\\n\"\n        })\n      }), _jsx(_components.h3, {\n        id: \"usage\",\n        children: \"Using trained pipelines with spaCy \"\n      }), _jsxs(_components.p, {\n        children: [\"To load a pipeline package, use \", _jsx(_components.a, {\n          href: \"/api/top-level#spacy.load\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.load\"\n          })\n        }), \" with\\nthe package name or a path to the data directory:\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Important note for v3.0\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"Note that as of spaCy v3.0, shortcut links like \", _jsx(InlineCode, {\n            children: \"en\"\n          }), \" that create (potentially\\nbrittle) symlinks in your spaCy installation are \", _jsx(_components.strong, {\n            children: \"deprecated\"\n          }), \". To download\\nand load an installed pipeline package, use its full name:\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            lang: \"diff\",\n            children: \"- python -m spacy download en\\n+ python -m spacy download en_core_web_sm\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"import spacy\\nnlp = spacy.load(\\\"en_core_web_sm\\\")           # load package \\\"en_core_web_sm\\\"\\nnlp = spacy.load(\\\"/path/to/en_core_web_sm\\\")  # load package from a directory\\n\\ndoc = nlp(\\\"This is a sentence.\\\")\\n\"\n        })\n      }), _jsx(Infobox, {\n        title: \"Tip: Preview model info\",\n        emoji: \"💡\",\n        children: _jsxs(_components.p, {\n          children: [\"You can use the \", _jsx(_components.a, {\n            href: \"/api/cli#info\",\n            children: _jsx(InlineCode, {\n              children: \"info\"\n            })\n          }), \" command or\\n\", _jsx(_components.a, {\n            href: \"/api/top-level#spacy.info\",\n            children: _jsx(InlineCode, {\n              children: \"spacy.info()\"\n            })\n          }), \" method to print a pipeline package’s\\nmeta data before loading it. Each \", _jsx(InlineCode, {\n            children: \"Language\"\n          }), \" object with a loaded pipeline also\\nexposes the pipeline’s meta data as the attribute \", _jsx(InlineCode, {\n            children: \"meta\"\n          }), \". For example,\\n\", _jsx(InlineCode, {\n            children: \"nlp.meta['version']\"\n          }), \" will return the package version.\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"usage-import\",\n        children: \"Importing pipeline packages as modules \"\n      }), _jsxs(_components.p, {\n        children: [\"If you’ve installed a trained pipeline via \", _jsx(_components.a, {\n          href: \"/api/cli#download\",\n          children: _jsx(InlineCode, {\n            children: \"spacy download\"\n          })\n        }), \"\\nor directly via pip, you can also \", _jsx(InlineCode, {\n          children: \"import\"\n        }), \" it and then call its \", _jsx(InlineCode, {\n          children: \"load()\"\n        }), \" method\\nwith no arguments:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          executable: \"true\",\n          children: \"import en_core_web_sm\\n\\nnlp = en_core_web_sm.load()\\ndoc = nlp(\\\"This is a sentence.\\\")\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"How you choose to load your trained pipelines ultimately depends on personal\\npreference. However, \", _jsx(_components.strong, {\n          children: \"for larger code bases\"\n        }), \", we usually recommend native\\nimports, as this will make it easier to integrate pipeline packages with your\\nexisting build process, continuous integration workflow and testing framework.\\nIt’ll also prevent you from ever trying to load a package that is not installed,\\nas your code will raise an \", _jsx(InlineCode, {\n          children: \"ImportError\"\n        }), \" immediately, instead of failing\\nsomewhere down the line when calling \", _jsx(InlineCode, {\n          children: \"spacy.load()\"\n        }), \". For more details, see the\\nsection on \", _jsx(_components.a, {\n          href: \"#production\",\n          children: \"working with pipeline packages in production\"\n        }), \".\"]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-production\",\n      children: [_jsx(_components.h2, {\n        id: \"production\",\n        children: \"Using trained pipelines in production \"\n      }), _jsx(_components.p, {\n        children: \"If your application depends on one or more trained pipeline packages, you’ll\\nusually want to integrate them into your continuous integration workflow and\\nbuild process. While spaCy provides a range of useful helpers for downloading\\nand loading pipeline packages, the underlying functionality is entirely based on\\nnative Python packaging. This allows your application to handle a spaCy pipeline\\nlike any other package dependency.\"\n      }), _jsx(_components.h3, {\n        id: \"models-download\",\n        children: \"Downloading and requiring package dependencies \"\n      }), _jsxs(_components.p, {\n        children: [\"spaCy’s built-in \", _jsx(_components.a, {\n          href: \"/api/cli#download\",\n          children: _jsx(InlineCode, {\n            children: \"download\"\n          })\n        }), \" command is mostly intended as a\\nconvenient, interactive wrapper. It performs compatibility checks and prints\\ndetailed error messages and warnings. However, if you’re downloading pipeline\\npackages as part of an automated build process, this only adds an unnecessary\\nlayer of complexity. If you know which packages your application needs, you\\nshould be specifying them directly.\"]\n      }), _jsxs(_components.p, {\n        children: [\"Because pipeline packages are valid Python packages, you can add them to your\\napplication’s \", _jsx(InlineCode, {\n          children: \"requirements.txt\"\n        }), \". If you’re running your own internal PyPi\\ninstallation, you can upload the pipeline packages there. pip’s\\n\", _jsx(_components.a, {\n          href: \"https://pip.pypa.io/en/latest/reference/requirements-file-format/\",\n          children: \"requirements file format\"\n        }), \"\\nsupports both package names to download via a PyPi server, as well as\\n\", _jsx(_components.a, {\n          href: \"#pipeline-urls\",\n          children: \"direct URLs\"\n        }), \".\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-text\",\n          lang: \"text\",\n          title: \"requirements.txt\",\n          children: \"spacy>=3.0.0,<4.0.0\\nen_core_web_sm @ https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.4.0/en_core_web_sm-3.4.0-py3-none-any.whl\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"All pipeline packages are versioned and specify their spaCy dependency. This\\nensures cross-compatibility and lets you specify exact version requirements for\\neach pipeline. If you’ve \", _jsx(_components.a, {\n          href: \"/usage/training\",\n          children: \"trained\"\n        }), \" your own pipeline, you can\\nuse the \", _jsx(_components.a, {\n          href: \"/api/cli#package\",\n          children: _jsx(InlineCode, {\n            children: \"spacy package\"\n          })\n        }), \" command to generate the required\\nmeta data and turn it into a loadable package.\"]\n      }), _jsx(_components.h3, {\n        id: \"models-loading\",\n        children: \"Loading and testing pipeline packages \"\n      }), _jsxs(_components.p, {\n        children: [\"Pipeline packages are regular Python packages, so you can also import them as a\\npackage using Python’s native \", _jsx(InlineCode, {\n          children: \"import\"\n        }), \" syntax, and then call the \", _jsx(InlineCode, {\n          children: \"load\"\n        }), \" method\\nto load the data and return an \", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \" object:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"import en_core_web_sm\\nnlp = en_core_web_sm.load()\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"In general, this approach is recommended for larger code bases, as it’s more\\n“native”, and doesn’t rely on spaCy’s loader to resolve string names to\\npackages. If a package can’t be imported, Python will raise an \", _jsx(InlineCode, {\n          children: \"ImportError\"\n        }), \"\\nimmediately. And if a package is imported but not used, any linter will catch\\nthat.\"]\n      }), _jsxs(_components.p, {\n        children: [\"Similarly, it’ll give you more flexibility when writing tests that require\\nloading pipelines. For example, instead of writing your own \", _jsx(InlineCode, {\n          children: \"try\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"except\"\n        }), \"\\nlogic around spaCy’s loader, you can use\\n\", _jsx(_components.a, {\n          href: \"http://pytest.readthedocs.io/en/latest/\",\n          children: \"pytest\"\n        }), \"’s\\n\", _jsx(_components.a, {\n          href: \"https://docs.pytest.org/en/latest/builtin.html#_pytest.outcomes.importorskip\",\n          children: _jsx(InlineCode, {\n            children: \"importorskip()\"\n          })\n        }), \"\\nmethod to only run a test if a specific pipeline package or version is\\ninstalled. Each pipeline package exposes a \", _jsx(InlineCode, {\n          children: \"__version__\"\n        }), \" attribute which you can\\nalso use to perform your own version compatibility checks before loading it.\"]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Models & Languages","next":"usage/facts-figures","menu":[["Quickstart","quickstart"],["Language Support","languages"],["Installation & Usage","download"],["Production Use","production"]]},"scope":{}},"sectionTitle":"Usage Documentation","theme":"blue","section":"usage","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false},"__N_SSG":true}