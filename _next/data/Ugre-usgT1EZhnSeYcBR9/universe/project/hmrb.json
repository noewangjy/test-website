{"pageProps":{"id":"hmrb","title":"Hammurabi","teaser":"Python Rule Processing Engine 🏺","slug":"/universe/project/hmrb","isIndex":false,"data":{"id":"hmrb","title":"Hammurabi","slogan":"Python Rule Processing Engine 🏺","description":"Hammurabi works as a rule engine to parse input using a defined set of rules. It uses a simple and readable syntax to define complex rules to handle phrase matching. The syntax supports nested logical statements, regular expressions, reusable or side-loaded variables and match triggered callback functions to modularize your rules. The latest version works with both spaCy 2.X and 3.X. For more information check the documentation on [ReadTheDocs](https://hmrb.readthedocs.io/en/latest/).","github":"babylonhealth/hmrb","pip":"hmrb","code_example":["import spacy","from hmrb.core import SpacyCore","","nlp = spacy.load(\"en_core_web_sm\")","sentences = \"I love gorillas. Peter loves gorillas. Jane loves Tarzan.\"","","def conj_be(subj: str) -> str:","   if subj == \"I\":","       return \"am\"","   elif subj == \"you\":","       return \"are\"","   else:","       return \"is\"","","@spacy.registry.callbacks(\"gorilla_callback\")","def gorilla_clb(seq: list, span: slice, data: dict) -> None:","   subj = seq[span.start].text","   be = conj_be(subj)","   print(f\"{subj} {be} a gorilla person.\")","@spacy.registry.callbacks(\"lover_callback\")","def lover_clb(seq: list, span: slice, data: dict) -> None:","   print(f\"{seq[span][-1].text} is a love interest of {seq[span.start].text}.\")","","grammar = \"\"\"","   Law:","   - callback: \"loves_gorilla\"","   (","   ((pos: \"PROPN\") or (pos: \"PRON\"))","   (lemma: \"love\")","   (lemma: \"gorilla\")","   )","   Law:","   - callback: \"loves_someone\"","   (","   (pos: \"PROPN\")","   (lower: \"loves\")","   (pos: \"PROPN\")","   )","\"\"\"","","@spacy.registry.augmenters(\"jsonify_span\")","def jsonify_span(span):","   return [{\"lemma\": token.lemma_, \"pos\": token.pos_, \"lower\": token.lower_} for token in span]","","conf = {","   \"rules\": grammar,","   \"callbacks\": {","       \"loves_gorilla\": \"callbacks.gorilla_callback\",","       \"loves_someone\": \"callbacks.lover_callback\",","   },","   \"map_doc\": \"augmenters.jsonify_span\",","   \"sort_length\": True,","}","","nlp.add_pipe(\"hmrb\", config=conf)","nlp(sentences)"],"code_language":"python","thumb":"https://user-images.githubusercontent.com/6807878/118643685-cae6b880-b7d4-11eb-976e-066aec9505da.png","image":"https://user-images.githubusercontent.com/6807878/118643685-cae6b880-b7d4-11eb-976e-066aec9505da.png","author":"Kristian Boda","author_links":{"github":"bodak","twitter":"bodak","website":"https://github.com/babylonhealth/"},"category":["pipeline","standalone","scientific","biomedical"],"tags":["babylonhealth","rule-engine","matcher"],"isProject":true},"section":"universe","sectionTitle":"Universe","theme":"purple"},"__N_SSG":true}