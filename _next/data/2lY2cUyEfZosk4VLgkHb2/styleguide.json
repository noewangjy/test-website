{"pageProps":{"title":"Styleguide","section":"styleguide","search_exclude":true,"menu":[["Logo","logo"],["Colors","colors"],["Typography","typography"],["Elements","elements"],["Components","components"],["Markdown Reference","markdown"],["Editorial","editorial"]],"sidebar":[{"label":"Styleguide","items":[{"text":"","url":"/styleguide"}]},{"label":"Resources","items":[{"text":"Website Source","url":"https://github.com/explosion/spacy/tree/master/website"},{"text":"Contributing Guide","url":"https://github.com/explosion/spaCy/blob/master/CONTRIBUTING.md"}]}],"slug":"/styleguide","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    h2: \"h2\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    hr: \"hr\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    ul: \"ul\",\n    li: \"li\",\n    em: \"em\",\n    del: \"del\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components), {Logos, Colors, Patterns, Infobox, InlineCode, H2, H3, H4, H5, Label, Tag, Abbr, Button, Accordion} = _components;\n  if (!Abbr) _missingMdxReference(\"Abbr\", true);\n  if (!Accordion) _missingMdxReference(\"Accordion\", true);\n  if (!Button) _missingMdxReference(\"Button\", true);\n  if (!Colors) _missingMdxReference(\"Colors\", true);\n  if (!H2) _missingMdxReference(\"H2\", true);\n  if (!H3) _missingMdxReference(\"H3\", true);\n  if (!H4) _missingMdxReference(\"H4\", true);\n  if (!H5) _missingMdxReference(\"H5\", true);\n  if (!Infobox) _missingMdxReference(\"Infobox\", true);\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  if (!Label) _missingMdxReference(\"Label\", true);\n  if (!Logos) _missingMdxReference(\"Logos\", true);\n  if (!Patterns) _missingMdxReference(\"Patterns\", true);\n  if (!Tag) _missingMdxReference(\"Tag\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.section, {\n      children: [_jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.a, {\n          href: \"https://spacy.io\",\n          children: \"spacy.io\"\n        }), \" website is implemented using\\n\", _jsx(_components.a, {\n          href: \"https://www.gatsbyjs.org\",\n          children: \"Gatsby\"\n        }), \" with\\n\", _jsx(_components.a, {\n          href: \"https://github.com/remarkjs/remark\",\n          children: \"Remark\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"https://mdxjs.com/\",\n          children: \"MDX\"\n        }), \". This\\nallows authoring content in \", _jsx(_components.strong, {\n          children: \"straightforward Markdown\"\n        }), \" without the usual\\nlimitations. Standard elements can be overwritten with powerful\\n\", _jsx(_components.a, {\n          href: \"http://reactjs.org/\",\n          children: \"React\"\n        }), \" components and wherever Markdown syntax isn’t\\nenough, JSX components can be used.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Contributing to the site\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"The docs can always use another example or more detail, and they should always\\nbe up to date and not misleading. We always appreciate a\\n\", _jsx(_components.a, {\n            href: \"https://github.com/explosion/spaCy/pulls\",\n            children: \"pull request\"\n          }), \". To quickly find the\\ncorrect file to edit, simply click on the “Suggest edits” button at the bottom\\nof a page.\"]\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"For more details on editing the site locally, see the installation\\ninstructions and markdown reference below.\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-logo\",\n      children: [_jsx(_components.h2, {\n        id: \"logo\",\n        source: \"website/src/images/logo.svg\",\n        children: \"Logo \"\n      }), _jsxs(_components.p, {\n        children: [\"If you would like to use the spaCy logo on your site, please get in touch and\\nask us first. However, if you want to show support and tell others that your\\nproject is using spaCy, you can grab one of our\\n\", _jsx(_components.a, {\n          href: \"/usage/spacy-101#faq-project-with-spacy\",\n          children: \"spaCy badges\"\n        }), \".\"]\n      }), _jsx(Logos, {})]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-colors\",\n      children: [_jsx(_components.h2, {\n        id: \"colors\",\n        children: \"Colors \"\n      }), _jsx(Colors, {}), _jsx(_components.h3, {\n        children: \"Patterns\"\n      }), _jsx(Patterns, {})]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-typography\",\n      children: [_jsx(_components.h2, {\n        id: \"typography\",\n        children: \"Typography \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Markdown\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-markdown\",\n            lang: \"markdown\",\n            children: \"## Headline 2\\n\\n## Headline 2 {id=\\\"some_id\\\"}\\n\\n## Headline 2 {id=\\\"some_id\\\" tag=\\\"method\\\"}\\n\"\n          })\n        }), \"\\n\", _jsx(_components.h4, {\n          children: \"JSX\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-jsx\",\n            lang: \"jsx\",\n            children: \"<H2>Headline 2</H2>\\n<H2 id=\\\"some_id\\\">Headline 2</H2>\\n<H2 id=\\\"some_id\\\" tag=\\\"method\\\">Headline 2</H2>\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Headlines are set in\\n\", _jsx(_components.a, {\n          href: \"http://cargocollective.com/hanken/HK-Grotesk-Open-Source-Font\",\n          children: \"HK Grotesk\"\n        }), \" by\\nHanken Design. All other body text and code uses the best-matching default\\nsystem font to provide a “native” reading experience. All code uses the\\n\", _jsx(_components.a, {\n          href: \"https://www.jetbrains.com/lp/mono/\",\n          children: \"JetBrains Mono\"\n        }), \" typeface by JetBrains.\"]\n      }), _jsx(Infobox, {\n        title: \"Important note\",\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"Level 2 headings are automatically wrapped in \", _jsx(InlineCode, {\n            children: \"<section>\"\n          }), \" elements at compile\\ntime, using a custom\\n\", _jsx(_components.a, {\n            href: \"https://github.com/explosion/spaCy/tree/master/website/plugins/remark-wrap-section.js\",\n            children: \"Markdown transformer\"\n          }), \".\\nThis makes it easier to highlight the section that’s currently in the viewpoint\\nin the sidebar menu.\"]\n        })\n      }), _jsxs(\"div\", {\n        children: [_jsx(H2, {\n          children: \"Headline 2\"\n        }), \"\\n\", _jsx(H3, {\n          children: \"Headline 3\"\n        }), \"\\n\", _jsx(H4, {\n          children: \"Headline 4\"\n        }), \"\\n\", _jsx(H5, {\n          children: \"Headline 5\"\n        }), \"\\n\", _jsx(Label, {\n          children: \"Label\"\n        })]\n      }), _jsx(_components.hr, {}), _jsxs(_components.p, {\n        children: [\"The following optional attributes can be set on the headline to modify it. For\\nexample, to add a tag for the documented type or mark features that have been\\nintroduced in a specific version or require statistical models to be loaded.\\nTags are also available as standalone \", _jsx(InlineCode, {\n          children: \"<Tag />\"\n        }), \" components.\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Argument\"\n            }), _jsx(_components.th, {\n              children: \"Example\"\n            }), _jsx(_components.th, {\n              children: \"Result\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"tag\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"{tag=\\\"method\\\"}\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(Tag, {\n                children: \"method\"\n              })\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"version\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"{version=\\\"3\\\"}\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(Tag, {\n                variant: \"new\",\n                children: \"3\"\n              })\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"model\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"{model=\\\"tagger, parser\\\"}\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(Tag, {\n                variant: \"model\",\n                children: \"tagger, parser\"\n              })\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"hidden\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"{hidden=\\\"true\\\"}\"\n              })\n            }), _jsx(_components.td, {})]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-elements\",\n      children: [_jsx(_components.h2, {\n        id: \"elements\",\n        children: \"Elements \"\n      }), _jsx(_components.h3, {\n        id: \"links\",\n        children: \"Links \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Markdown\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-markdown\",\n            lang: \"markdown\",\n            children: \"[I am a link](https://spacy.io)\\n\"\n          })\n        }), \"\\n\", _jsx(_components.h4, {\n          children: \"JSX\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-jsx\",\n            lang: \"jsx\",\n            children: \"<Link to=\\\"https://spacy.io\\\">I am a link</Link>\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"Special link styles are used depending on the link URL.\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://explosion.ai\",\n            children: \"I am a regular external link\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"/api/doc\",\n            children: \"I am a link to the documentation\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"/api/architectures#HashEmbedCNN\",\n            children: \"I am a link to an architecture\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"/models/en#en_core_web_sm\",\n            children: \"I am a link to a model\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://github.com/explosion/spaCy\",\n            children: \"I am a link to GitHub\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.h3, {\n        id: \"abbr\",\n        children: \"Abbreviations \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"JSX\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-jsx\",\n            lang: \"jsx\",\n            children: \"<Abbr title=\\\"Explanation\\\">Abbreviation</Abbr>\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Some text with \", _jsx(Abbr, {\n          title: \"Explanation here\",\n          children: \"an abbreviation\"\n        }), \". On small\\nscreens, I collapse and the explanation text is displayed next to the\\nabbreviation.\"]\n      }), _jsx(_components.h3, {\n        id: \"tags\",\n        children: \"Tags \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-jsx\",\n            lang: \"jsx\",\n            children: \"<Tag>method</Tag>\\n<Tag variant=\\\"version\\\">4</Tag>\\n<Tag variant=\\\"model\\\">tagger, parser</Tag>\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Tags can be used together with headlines, or next to properties across the\\ndocumentation, and combined with tooltips to provide additional information. An\\noptional \", _jsx(InlineCode, {\n          children: \"variant\"\n        }), \" argument can be used for special tags. \", _jsx(InlineCode, {\n          children: \"variant=\\\"new\\\"\"\n        }), \" makes\\nthe tag take a version number to mark new features. Using the component,\\nvisibility of this tag can later be toggled once the feature isn’t considered\\nnew anymore. Setting \", _jsx(InlineCode, {\n          children: \"variant=\\\"model\\\"\"\n        }), \" takes a description of model capabilities\\nand can be used to mark features that require a respective model to be\\ninstalled.\"]\n      }), _jsxs(\"p\", {\n        children: [_jsx(Tag, {\n          children: \"method\"\n        }), \"\\n\", _jsx(Tag, {\n          variant: \"new\",\n          children: \"4\"\n        }), \"\\n\", _jsx(Tag, {\n          variant: \"model\",\n          children: \"tagger, parser\"\n        })]\n      }), _jsx(_components.h3, {\n        id: \"buttons\",\n        children: \"Buttons \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-jsx\",\n            lang: \"jsx\",\n            children: \"<Button to=\\\"#\\\" variant=\\\"primary\\\">Primary small</Button>\\n<Button to=\\\"#\\\" variant=\\\"secondary\\\">Secondary small</Button>\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Link buttons come in two variants, \", _jsx(InlineCode, {\n          children: \"primary\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"secondary\"\n        }), \" and two sizes, with\\nan optional \", _jsx(InlineCode, {\n          children: \"large\"\n        }), \" size modifier. Since they’re mostly used as enhanced links,\\nthe buttons are implemented as styled links instead of native button elements.\"]\n      }), _jsxs(\"p\", {\n        children: [_jsx(Button, {\n          to: \"#\",\n          variant: \"primary\",\n          children: \"Primary small\"\n        }), ' ', _jsx(Button, {\n          to: \"#\",\n          variant: \"secondary\",\n          children: \"Secondary small\"\n        })]\n      }), _jsxs(\"p\", {\n        children: [_jsx(Button, {\n          to: \"#\",\n          variant: \"primary\",\n          children: \"Primary small\"\n        }), ' ', _jsx(Button, {\n          to: \"#\",\n          variant: \"secondary\",\n          children: \"Secondary small\"\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      children: [_jsx(_components.h2, {\n        children: \"Components\"\n      }), _jsx(_components.h3, {\n        id: \"table\",\n        children: \"Table \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Markdown\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-markdown\",\n            lang: \"markdown\",\n            children: \"| Header 1 | Header 2 |\\n| -------- | -------- |\\n| Column 1 | Column 2 |\\n\"\n          })\n        }), \"\\n\", _jsx(_components.h4, {\n          children: \"JSX\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-markup\",\n            lang: \"markup\",\n            children: \"<Table>\\n    <Tr><Th>Header 1</Th><Th>Header 2</Th></Tr></thead>\\n    <Tr><Td>Column 1</Td><Td>Column 2</Td></Tr>\\n</Table>\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"Tables are used to present data and API documentation. Certain keywords can be\\nused to mark a footer row with a distinct style, for example to visualize the\\nreturn values of a documented function.\"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Header 1\"\n            }), _jsx(_components.th, {\n              children: \"Header 2\"\n            }), _jsx(_components.th, {\n              align: \"center\",\n              children: \"Header 3\"\n            }), _jsx(_components.th, {\n              align: \"right\",\n              children: \"Header 4\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: \"Column 1\"\n            }), _jsx(_components.td, {\n              children: \"Column 2\"\n            }), _jsx(_components.td, {\n              align: \"center\",\n              children: \"Column 3\"\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"Column 4\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: \"Column 1\"\n            }), _jsx(_components.td, {\n              children: \"Column 2\"\n            }), _jsx(_components.td, {\n              align: \"center\",\n              children: \"Column 3\"\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"Column 4\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: \"Column 1\"\n            }), _jsx(_components.td, {\n              children: \"Column 2\"\n            }), _jsx(_components.td, {\n              align: \"center\",\n              children: \"Column 3\"\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"Column 4\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: \"Column 1\"\n            }), _jsx(_components.td, {\n              children: \"Column 2\"\n            }), _jsx(_components.td, {\n              align: \"center\",\n              children: \"Column 3\"\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"Column 4\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsx(_components.td, {\n              children: \"Column 2\"\n            }), _jsx(_components.td, {\n              align: \"center\",\n              children: \"Column 3\"\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"Column 4\"\n            })]\n          })]\n        })]\n      }), _jsx(_components.p, {\n        children: \"Tables also support optional “divider” rows that are typically used to denote\\nkeyword-only arguments in API documentation. To turn a row into a dividing\\nheadline, it should only include content in its first cell, and its value should\\nbe italicized:\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Markdown\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-markdown\",\n            lang: \"markdown\",\n            children: \"| Header 1 | Header 2 | Header 3 |\\n| -------- | -------- | -------- |\\n| Column 1 | Column 2 | Column 3 |\\n| _Hello_  |          |          |\\n| Column 1 | Column 2 | Column 3 |\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Header 1\"\n            }), _jsx(_components.th, {\n              children: \"Header 2\"\n            }), _jsx(_components.th, {\n              children: \"Header 3\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: \"Column 1\"\n            }), _jsx(_components.td, {\n              children: \"Column 2\"\n            }), _jsx(_components.td, {\n              children: \"Column 3\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"Hello\"\n              })\n            }), _jsx(_components.td, {}), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: \"Column 1\"\n            }), _jsx(_components.td, {\n              children: \"Column 2\"\n            }), _jsx(_components.td, {\n              children: \"Column 3\"\n            })]\n          })]\n        })]\n      }), _jsx(_components.h3, {\n        id: \"type-annotations\",\n        children: \"Type Annotations \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Markdown\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-markdown\",\n            lang: \"markdown\",\n            children: \"~~Model[List[Doc], Floats2d]~~\\n\"\n          })\n        }), \"\\n\", _jsx(_components.h4, {\n          children: \"JSX\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-markup\",\n            lang: \"markup\",\n            children: \"<TypeAnnotation>Model[List[Doc], Floats2d]</Typeannotation>\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Type annotations are special inline code blocks are used to describe Python\\ntypes in the \", _jsx(_components.a, {\n          href: \"https://docs.python.org/3/library/typing.html\",\n          children: \"type hints\"\n        }), \" format.\\nThe special component will split the type, apply syntax highlighting and link\\nall types that specify links in \", _jsx(InlineCode, {\n          children: \"meta/type-annotations.json\"\n        }), \". Types can link to\\ninternal or external documentation pages. To make it easy to represent the type\\nannotations in Markdown, the rendering “hijacks” the \", _jsx(InlineCode, {\n          children: \"~~\"\n        }), \" tags that would\\ntypically be converted to a \", _jsx(InlineCode, {\n          children: \"<del>\"\n        }), \" element – but in this case, text surrounded\\nby \", _jsx(InlineCode, {\n          children: \"~~\"\n        }), \" becomes a type annotation.\"]\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.del, {\n            children: \"Dict[str, List[Union[Doc, Span]]]\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.del, {\n            children: \"Model[List[Doc], List[numpy.ndarray]]\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Type annotations support a special visual style in tables and will render as a\\nseparate row, under the cell text. This allows the API docs to display complex\\ntypes without taking up too much space in the cell. The type annotation should\\nalways be the \", _jsx(_components.strong, {\n          children: \"last element\"\n        }), \" in the row.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Markdown\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-markdown\",\n            lang: \"markdown\",\n            children: \"| Header 1 | Header 2               |\\n| -------- | ---------------------- |\\n| Column 1 | Column 2 ~~List[Doc]~~ |\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vocab\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The shared vocabulary. \", _jsx(_components.del, {\n                children: \"Vocab\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"model\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The Thinc \", _jsx(_components.a, {\n                href: \"https://thinc.ai/docs/api-model\",\n                children: _jsx(InlineCode, {\n                  children: \"Model\"\n                })\n              }), \" wrapping the transformer. \", _jsx(_components.del, {\n                children: \"Model[List[Doc], FullTransformerBatch]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"set_extra_annotations\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Function that takes a batch of \", _jsx(InlineCode, {\n                children: \"Doc\"\n              }), \" objects and transformer outputs and can set additional annotations on the \", _jsx(InlineCode, {\n                children: \"Doc\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Callable[[List[Doc], FullTransformerBatch], None]\"\n              })]\n            })]\n          })]\n        })]\n      }), _jsx(_components.h3, {\n        id: \"list\",\n        children: \"List \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Markdown\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-markdown\",\n            lang: \"markdown\",\n            children: \"1. One\\n2. Two\\n\"\n          })\n        }), \"\\n\", _jsx(_components.h4, {\n          children: \"JSX\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-markup\",\n            lang: \"markup\",\n            children: \"<Ol>\\n    <Li>One</Li>\\n    <Li>Two</Li>\\n</Ol>\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"Lists are available as bulleted and numbered. Markdown lists are transformed\\nautomatically.\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"I am a bulleted list\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"I have nice bullets\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Lorem ipsum dolor\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"consectetur adipiscing elit\"\n        }), \"\\n\"]\n      }), _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"I am an ordered list\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"I have nice numbers\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Lorem ipsum dolor\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"consectetur adipiscing elit\"\n        }), \"\\n\"]\n      }), _jsx(_components.h3, {\n        id: \"aside\",\n        children: \"Aside \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Markdown\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-markdown\",\n            lang: \"markdown\",\n            children: \"> #### Aside title\\n>\\n> This is aside text.\\n\"\n          })\n        }), \"\\n\", _jsx(_components.h4, {\n          children: \"JSX\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-jsx\",\n            lang: \"jsx\",\n            children: \"<Aside title=\\\"Aside title\\\">This is aside text.</Aside>\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.p, {\n        children: \"Asides can be used to display additional notes and content in the right-hand\\ncolumn. Asides can contain text, code and other elements if needed. Visually,\\nasides are moved to the side on the X-axis, and displayed at the same level they\\nwere inserted. On small screens, they collapse and are rendered in their\\noriginal position, in between the text.\"\n      }), _jsxs(_components.p, {\n        children: [\"To make them easier to use in Markdown, paragraphs formatted as blockquotes will\\nturn into asides by default. Level 4 headlines (with a leading \", _jsx(InlineCode, {\n          children: \"####\"\n        }), \") will\\nbecome aside titles.\"]\n      }), _jsx(_components.h3, {\n        id: \"code-block\",\n        children: \"Code Block \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Markdown\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-markdown\",\n            lang: \"markdown\",\n            children: \"```python\\n### This is a title\\nimport spacy\\n```\\n\"\n          })\n        }), \"\\n\", _jsx(_components.h4, {\n          children: \"JSX\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-jsx\",\n            lang: \"jsx\",\n            children: \"<CodeBlock title=\\\"This is a title\\\" lang=\\\"python\\\">\\n  import spacy\\n</CodeBlock>\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Code blocks use the \", _jsx(_components.a, {\n          href: \"http://prismjs.com/\",\n          children: \"Prism\"\n        }), \" syntax highlighter with a\\ncustom theme. The language can be set individually on each block, and defaults\\nto raw text with no highlighting. An optional label can be added as the first\\nline with the prefix \", _jsx(InlineCode, {\n          children: \"####\"\n        }), \" (Python-like) and \", _jsx(InlineCode, {\n          children: \"///\"\n        }), \" (JavaScript-like). the\\nindented block as plain text and preserve whitespace.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"Using spaCy\",\n          children: \"import spacy\\nnlp = spacy.load(\\\"en_core_web_sm\\\")\\ndoc = nlp(\\\"This is a sentence.\\\")\\nfor token in doc:\\n    print(token.text, token.pos_)\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Code blocks and also specify an optional range of line numbers to highlight by\\nadding \", _jsx(InlineCode, {\n          children: \"{highlight=\\\"...\\\"}\"\n        }), \" to the headline. Acceptable ranges are spans like\\n\", _jsx(InlineCode, {\n          children: \"5-7\"\n        }), \", but also \", _jsx(InlineCode, {\n          children: \"5-7,10\"\n        }), \" or \", _jsx(InlineCode, {\n          children: \"5-7,10,13-14\"\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Markdown\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-markdown\",\n            lang: \"markdown\",\n            children: \"```python\\n### This is a title {highlight=\\\"1-2\\\"}\\nimport spacy\\nnlp = spacy.load(\\\"en_core_web_sm\\\")\\n```\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"Using the matcher\",\n          highlight: \"5-7\",\n          children: \"import spacy\\nfrom spacy.matcher import Matcher\\n\\nnlp = spacy.load('en_core_web_sm')\\nmatcher = Matcher(nlp.vocab)\\npattern = [{\\\"LOWER\\\": \\\"hello\\\"}, {\\\"IS_PUNCT\\\": True}, {\\\"LOWER\\\": \\\"world\\\"}]\\nmatcher.add(\\\"HelloWorld\\\", None, pattern)\\ndoc = nlp(\\\"Hello, world! Hello world!\\\")\\nmatches = matcher(doc)\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Adding \", _jsx(InlineCode, {\n          children: \"{executable=\\\"true\\\"}\"\n        }), \" to the title turns the code into an executable\\nblock, powered by \", _jsx(_components.a, {\n          href: \"https://mybinder.org\",\n          children: \"Binder\"\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"https://github.com/ines/juniper\",\n          children: \"Juniper\"\n        }), \". If JavaScript is disabled, the\\ninteractive widget defaults to a regular code block.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Markdown\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-markdown\",\n            lang: \"markdown\",\n            children: \"```python\\n### {executable=\\\"true\\\"}\\nimport spacy\\nnlp = spacy.load(\\\"en_core_web_sm\\\")\\n```\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          executable: \"true\",\n          children: \"import spacy\\nnlp = spacy.load(\\\"en_core_web_sm\\\")\\ndoc = nlp(\\\"This is a sentence.\\\")\\nfor token in doc:\\n    print(token.text, token.pos_)\\n\"\n        })\n      }), _jsx(_components.p, {\n        children: \"If a code block only contains a URL to a GitHub file, the raw file contents are\\nembedded automatically and syntax highlighting is applied. The link to the\\noriginal file is shown at the top of the widget.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Markdown\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-markdown\",\n            lang: \"markdown\",\n            children: \"```python\\nhttps://github.com/...\\n```\\n\"\n          })\n        }), \"\\n\", _jsx(_components.h4, {\n          children: \"JSX\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-jsx\",\n            lang: \"jsx\",\n            children: \"<GitHubCode url=\\\"https://github.com/...\\\" lang=\\\"python\\\" />\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          github: \"https://github.com/explosion/spaCy/tree/master/spacy/language.py\",\n          children: \"https://github.com/explosion/spaCy/tree/master/spacy/language.py\\n\"\n        })\n      }), _jsx(_components.h3, {\n        id: \"infobox\",\n        children: \"Infobox \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"JSX\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-jsx\",\n            lang: \"jsx\",\n            children: \"<Infobox title=\\\"Information\\\">Regular infobox</Infobox>\\n<Infobox title=\\\"Important note\\\" variant=\\\"warning\\\">This is a warning.</Infobox>\\n<Infobox title=\\\"Be careful!\\\" variant=\\\"danger\\\">This is dangerous.</Infobox>\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Infoboxes can be used to add notes, updates, warnings or additional information\\nto a page or section. Semantically, they’re implemented and interpreted as an\\n\", _jsx(InlineCode, {\n          children: \"aside\"\n        }), \" element. Infoboxes can take an optional \", _jsx(InlineCode, {\n          children: \"title\"\n        }), \" argument, as well as an\\noptional \", _jsx(InlineCode, {\n          children: \"variant\"\n        }), \" (either \", _jsx(InlineCode, {\n          children: \"\\\"warning\\\"\"\n        }), \" or \", _jsx(InlineCode, {\n          children: \"\\\"danger\\\"\"\n        }), \").\"]\n      }), _jsx(Infobox, {\n        title: \"This is an infobox\",\n        children: _jsxs(_components.p, {\n          children: [\"If needed, an infobox can contain regular text, \", _jsx(InlineCode, {\n            children: \"inline code\"\n          }), \", lists and other\\nblocks.\"]\n        })\n      }), _jsx(Infobox, {\n        title: \"This is a warning\",\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"If needed, an infobox can contain regular text, \", _jsx(InlineCode, {\n            children: \"inline code\"\n          }), \", lists and other\\nblocks.\"]\n        })\n      }), _jsx(Infobox, {\n        title: \"This is dangerous\",\n        variant: \"danger\",\n        children: _jsxs(_components.p, {\n          children: [\"If needed, an infobox can contain regular text, \", _jsx(InlineCode, {\n            children: \"inline code\"\n          }), \", lists and other\\nblocks.\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"accordion\",\n        children: \"Accordion \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"JSX\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-jsx\",\n            lang: \"jsx\",\n            children: \"<Accordion title=\\\"This is an accordion\\\">\\n  Accordion content goes here.\\n</Accordion>\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Accordions are collapsible sections that are mostly used for lengthy tables,\\nlike the tag and label annotation schemes for different languages. They all need\\nto be presented – but chances are the user doesn’t actually care about \", _jsx(_components.em, {\n          children: \"all\"\n        }), \" of\\nthem, especially not at the same time. So it’s fairly reasonable to hide them\\nbegin a click. This particular implementation was inspired by the amazing\\n\", _jsx(_components.a, {\n          href: \"https://inclusive-components.design/collapsible-sections/\",\n          children: \"Inclusive Components blog\"\n        }), \".\"]\n      }), _jsx(Accordion, {\n        title: \"This is an accordion\",\n        children: _jsx(_components.p, {\n          children: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque enim ante,\\npretium a orci eget, varius dignissim augue. Nam eu dictum mauris, id tincidunt\\nnisi. Integer commodo pellentesque tincidunt. Nam at turpis finibus tortor\\ngravida sodales tincidunt sit amet est. Nullam euismod arcu in tortor auctor,\\nsit amet dignissim justo congue.\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-markdown\",\n      children: [_jsx(_components.h2, {\n        id: \"markdown\",\n        children: \"Markdown reference \"\n      }), _jsxs(_components.p, {\n        children: [\"All page content and page meta lives in the \", _jsx(InlineCode, {\n          children: \".mdx\"\n        }), \" files in the \", _jsx(InlineCode, {\n          children: \"/docs\"\n        }), \"\\ndirectory. The frontmatter block at the top of each file defines the page title\\nand other settings like the sidebar menu.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-markdown\",\n          lang: \"markdown\",\n          children: \"---\\ntitle: Page title\\n---\\n\\n## Headline starting a section {id=\\\"some_id\\\"}\\n\\nThis is a regular paragraph with a [link](https://spacy.io) and **bold text**.\\n\\n> #### This is an aside title\\n>\\n> This is aside text.\\n\\n### Subheadline\\n\\n| Header 1 | Header 2 |\\n| -------- | -------- |\\n| Column 1 | Column 2 |\\n\\n```python {title=\\\"Code block title\\\",highlight=\\\"2-3\\\"}\\nimport spacy\\nnlp = spacy.load(\\\"en_core_web_sm\\\")\\ndoc = nlp(\\\"Hello world\\\")\\n```\\n\\n<Infobox title=\\\"Important note\\\" variant=\\\"warning\\\">\\n\\nThis is content in the infobox.\\n\\n</Infobox>\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"In addition to the native markdown elements, you can use the components\\n\", _jsx(_components.a, {\n          href: \"https://spacy.io/styleguide#infobox\",\n          children: _jsx(InlineCode, {\n            children: \"<Infobox />\"\n          })\n        }), \", \", _jsx(_components.a, {\n          href: \"https://spacy.io/styleguide#accordion\",\n          children: _jsx(InlineCode, {\n            children: \"<Accordion />\"\n          })\n        }), \", \", _jsx(_components.a, {\n          href: \"https://spacy.io/styleguide#abbr\",\n          children: _jsx(InlineCode, {\n            children: \"<Abbr />\"\n          })\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"https://spacy.io/styleguide#tag\",\n          children: _jsx(InlineCode, {\n            children: \"<Tag />\"\n          })\n        }), \" via their JSX syntax.\"]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-editorial\",\n      children: [_jsx(_components.h2, {\n        id: \"editorial\",\n        children: \"Editorial \"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"“spaCy” should always be spelled with a lowercase “s” and a capital “C”,\\nunless it specifically refers to the Python package or Python import \", _jsx(InlineCode, {\n            children: \"spacy\"\n          }), \"\\n(in which case it should be formatted as code).\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"✅ spaCy is a library for advanced NLP in Python.\"\n            }), \"\\n\", _jsx(_components.li, {\n              children: \"❌ Spacy is a library for advanced NLP in Python.\"\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"✅ First, you need to install the \", _jsx(InlineCode, {\n                children: \"spacy\"\n              }), \" package from pip.\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Mentions of code, like function names, classes, variable names etc. in inline\\ntext should be formatted as \", _jsx(InlineCode, {\n            children: \"code\"\n          }), \".\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsxs(_components.li, {\n              children: [\"✅ “Calling the \", _jsx(InlineCode, {\n                children: \"nlp\"\n              }), \" object on a text returns a \", _jsx(InlineCode, {\n                children: \"Doc\"\n              }), \".”\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Objects that have pages in the \", _jsx(_components.a, {\n            href: \"/api\",\n            children: \"API docs\"\n          }), \" should be linked – for\\nexample, \", _jsx(_components.a, {\n            href: \"/api/doc\",\n            children: _jsx(InlineCode, {\n              children: \"Doc\"\n            })\n          }), \" or \", _jsx(_components.a, {\n            href: \"/api/language#to_disk\",\n            children: _jsx(InlineCode, {\n              children: \"Language.to_disk\"\n            })\n          }), \". The\\nmentions should still be formatted as code within the link. Links pointing to\\nthe API docs will automatically receive a little icon. However, if a paragraph\\nincludes many references to the API, the links can easily get messy. In that\\ncase, we typically only link the first mention of an object and not any\\nsubsequent ones.\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsxs(_components.li, {\n              children: [\"✅ The \", _jsx(_components.a, {\n                href: \"/api/span\",\n                children: _jsx(InlineCode, {\n                  children: \"Span\"\n                })\n              }), \" and \", _jsx(_components.a, {\n                href: \"/api/token\",\n                children: _jsx(InlineCode, {\n                  children: \"Token\"\n                })\n              }), \" objects are views of a\\n\", _jsx(_components.a, {\n                href: \"/api/doc\",\n                children: _jsx(InlineCode, {\n                  children: \"Doc\"\n                })\n              }), \". \", _jsx(_components.a, {\n                href: \"/api/span#as_doc\",\n                children: _jsx(InlineCode, {\n                  children: \"Span.as_doc\"\n                })\n              }), \" creates a \", _jsx(InlineCode, {\n                children: \"Doc\"\n              }), \" object\\nfrom a \", _jsx(InlineCode, {\n                children: \"Span\"\n              }), \".\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"❌ The \", _jsx(_components.a, {\n                href: \"/api/span\",\n                children: _jsx(InlineCode, {\n                  children: \"Span\"\n                })\n              }), \" and \", _jsx(_components.a, {\n                href: \"/api/token\",\n                children: _jsx(InlineCode, {\n                  children: \"Token\"\n                })\n              }), \" objects are views of a\\n\", _jsx(_components.a, {\n                href: \"/api/doc\",\n                children: _jsx(InlineCode, {\n                  children: \"Doc\"\n                })\n              }), \". \", _jsx(_components.a, {\n                href: \"/api/span#as_doc\",\n                children: _jsx(InlineCode, {\n                  children: \"Span.as_doc\"\n                })\n              }), \" creates a\\n\", _jsx(_components.a, {\n                href: \"/api/doc\",\n                children: _jsx(InlineCode, {\n                  children: \"Doc\"\n                })\n              }), \" object from a \", _jsx(_components.a, {\n                href: \"/api/span\",\n                children: _jsx(InlineCode, {\n                  children: \"Span\"\n                })\n              }), \".\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Other things we format as code are: references to trained pipeline packages\\nlike \", _jsx(InlineCode, {\n            children: \"en_core_web_sm\"\n          }), \" or file names like \", _jsx(InlineCode, {\n            children: \"code.py\"\n          }), \" or \", _jsx(InlineCode, {\n            children: \"meta.json\"\n          }), \".\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsxs(_components.li, {\n              children: [\"✅ After training, the \", _jsx(InlineCode, {\n                children: \"config.cfg\"\n              }), \" is saved to disk.\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.a, {\n            href: \"#type-annotations\",\n            children: \"Type annotations\"\n          }), \" are a special type of code formatting,\\nexpressed by wrapping the text in \", _jsx(InlineCode, {\n            children: \"~~\"\n          }), \" instead of backticks. The result looks\\nlike this: \", _jsx(_components.del, {\n            children: \"List[Doc]\"\n          }), \". All references to known types will be linked\\nautomatically.\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsxs(_components.li, {\n              children: [\"✅ The model has the input type \", _jsx(_components.del, {\n                children: \"List[Doc]\"\n              }), \" and it outputs a\\n\", _jsx(_components.del, {\n                children: \"List[Array2d]\"\n              }), \".\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"We try to keep links meaningful but short.\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsxs(_components.li, {\n              children: [\"✅ For details, see the usage guide on\\n\", _jsx(_components.a, {\n                href: \"/usage/training#custom-code\",\n                children: \"training with custom code\"\n              }), \".\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"❌ For details, see\\n\", _jsx(_components.a, {\n                href: \"/usage/training#custom-code\",\n                children: \"the usage guide on training with custom code\"\n              }), \".\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"❌ For details, see the usage guide on training with custom code\\n\", _jsx(_components.a, {\n                href: \"/usage/training#custom-code\",\n                children: \"here\"\n              }), \".\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Styleguide","section":"styleguide","search_exclude":true,"menu":[["Logo","logo"],["Colors","colors"],["Typography","typography"],["Elements","elements"],["Components","components"],["Markdown Reference","markdown"],["Editorial","editorial"]],"sidebar":[{"label":"Styleguide","items":[{"text":"","url":"/styleguide"}]},{"label":"Resources","items":[{"text":"Website Source","url":"https://github.com/explosion/spacy/tree/master/website"},{"text":"Contributing Guide","url":"https://github.com/explosion/spaCy/blob/master/CONTRIBUTING.md"}]}]},"scope":{}},"sectionTitle":null,"theme":null,"apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false,"next":null},"__N_SSG":true}