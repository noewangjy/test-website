{"pageProps":{"title":"Language","teaser":"A text-processing pipeline","tag":"class","source":"spacy/language.py","slug":"/api/language","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    pre: \"pre\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    del: \"del\",\n    em: \"em\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {InlineCode, Tag, Infobox, Accordion} = _components;\n  if (!Accordion) _missingMdxReference(\"Accordion\", true);\n  if (!Infobox) _missingMdxReference(\"Infobox\", true);\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  if (!Tag) _missingMdxReference(\"Tag\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.section, {\n      children: _jsxs(_components.p, {\n        children: [\"Usually you’ll load this once per process as \", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \" and pass the instance around\\nyour application. The \", _jsx(InlineCode, {\n          children: \"Language\"\n        }), \" class is created when you call\\n\", _jsx(_components.a, {\n          href: \"/api/top-level#spacy.load\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.load\"\n          })\n        }), \" and contains the shared vocabulary and\\n\", _jsx(_components.a, {\n          href: \"/usage/linguistic-features#language-data\",\n          children: \"language data\"\n        }), \", optional binary\\nweights, e.g. provided by a \", _jsx(_components.a, {\n          href: \"/models\",\n          children: \"trained pipeline\"\n        }), \", and the\\n\", _jsx(_components.a, {\n          href: \"/usage/processing-pipelines\",\n          children: \"processing pipeline\"\n        }), \" containing components like\\nthe tagger or parser that are called on a document in order. You can also add\\nyour own processing pipeline components that take a \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" object, modify it and\\nreturn it.\"]\n      })\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-init\",\n      children: [_jsx(_components.h2, {\n        id: \"init\",\n        tag: \"method\",\n        children: \"Language.__init__ \"\n      }), _jsxs(_components.p, {\n        children: [\"Initialize a \", _jsx(InlineCode, {\n          children: \"Language\"\n        }), \" object. Note that the \", _jsx(InlineCode, {\n          children: \"meta\"\n        }), \" is only used for meta\\ninformation in \", _jsx(_components.a, {\n          href: \"/api/language#meta\",\n          children: _jsx(InlineCode, {\n            children: \"Language.meta\"\n          })\n        }), \" and not to configure the\\n\", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \" object or to override the config. To initialize from a config, use\\n\", _jsx(_components.a, {\n          href: \"/api/language#from_config\",\n          children: _jsx(InlineCode, {\n            children: \"Language.from_config\"\n          })\n        }), \" instead.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"# Construction from subclass\\nfrom spacy.lang.en import English\\nnlp = English()\\n\\n# Construction from scratch\\nfrom spacy.vocab import Vocab\\nfrom spacy.language import Language\\nnlp = Language(Vocab())\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vocab\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A \", _jsx(InlineCode, {\n                children: \"Vocab\"\n              }), \" object. If \", _jsx(InlineCode, {\n                children: \"True\"\n              }), \", a vocab is created using the default language data settings. \", _jsx(_components.del, {\n                children: \"Vocab\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"max_length\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Maximum number of characters allowed in a single text. Defaults to \", _jsx(InlineCode, {\n                children: \"10 ** 6\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"meta\"\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(_components.a, {\n                href: \"/api/data-formats#meta\",\n                children: \"Meta data\"\n              }), \" overrides. \", _jsx(_components.del, {\n                children: \"Dict[str, Any]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"create_tokenizer\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Optional function that receives the \", _jsx(InlineCode, {\n                children: \"nlp\"\n              }), \" object and returns a tokenizer. \", _jsx(_components.del, {\n                children: \"Callable[[Language], Callable[[str], Doc]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"batch_size\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Default batch size for \", _jsx(_components.a, {\n                href: \"#pipe\",\n                children: _jsx(InlineCode, {\n                  children: \"pipe\"\n                })\n              }), \" and \", _jsx(_components.a, {\n                href: \"#evaluate\",\n                children: _jsx(InlineCode, {\n                  children: \"evaluate\"\n                })\n              }), \". Defaults to \", _jsx(InlineCode, {\n                children: \"1000\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-from_config\",\n      children: [_jsx(_components.h2, {\n        id: \"from_config\",\n        tag: \"classmethod\",\n        version: \"3\",\n        children: \"Language.from_config \"\n      }), _jsxs(_components.p, {\n        children: [\"Create a \", _jsx(InlineCode, {\n          children: \"Language\"\n        }), \" object from a loaded config. Will set up the tokenizer and\\nlanguage data, add pipeline components based on the pipeline and add pipeline\\ncomponents based on the definitions specified in the config. If no config is\\nprovided, the default config of the given language is used. This is also how\\nspaCy loads a model under the hood based on its\\n\", _jsx(_components.a, {\n          href: \"/api/data-formats#config\",\n          children: _jsx(InlineCode, {\n            children: \"config.cfg\"\n          })\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from thinc.api import Config\\nfrom spacy.language import Language\\n\\nconfig = Config().from_disk(\\\"./config.cfg\\\")\\nnlp = Language.from_config(config)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"config\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The loaded config. \", _jsx(_components.del, {\n                children: \"Union[Dict[str, Any], Config]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vocab\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A \", _jsx(InlineCode, {\n                children: \"Vocab\"\n              }), \" object. If \", _jsx(InlineCode, {\n                children: \"True\"\n              }), \", a vocab is created using the default language data settings. \", _jsx(_components.del, {\n                children: \"Vocab\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"disable\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Name(s) of pipeline component(s) to \", _jsx(_components.a, {\n                href: \"/usage/processing-pipelines#disabling\",\n                children: \"disable\"\n              }), \". Disabled pipes will be loaded but they won’t be run unless you explicitly enable them by calling \", _jsx(_components.a, {\n                href: \"/api/language#enable_pipe\",\n                children: \"nlp.enable_pipe\"\n              }), \". Is merged with the config entry \", _jsx(InlineCode, {\n                children: \"nlp.disabled\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Union[str, Iterable[str]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"enable\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3.4\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"Name(s) of pipeline component(s) to \", _jsx(_components.a, {\n                href: \"/usage/processing-pipelines#disabling\",\n                children: \"enable\"\n              }), \". All other pipes will be disabled, but can be enabled again using \", _jsx(_components.a, {\n                href: \"/api/language#enable_pipe\",\n                children: \"nlp.enable_pipe\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Union[str, Iterable[str]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Name(s) of pipeline component(s) to \", _jsx(_components.a, {\n                href: \"/usage/processing-pipelines#disabling\",\n                children: \"exclude\"\n              }), \". Excluded components won’t be loaded. \", _jsx(_components.del, {\n                children: \"Union[str, Iterable[str]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"meta\"\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(_components.a, {\n                href: \"/api/data-formats#meta\",\n                children: \"Meta data\"\n              }), \" overrides. \", _jsx(_components.del, {\n                children: \"Dict[str, Any]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"auto_fill\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether to automatically fill in missing values in the config, based on defaults and function argument annotations. Defaults to \", _jsx(InlineCode, {\n                children: \"True\"\n              }), \". \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"validate\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether to validate the component config and arguments against the types expected by the factory. Defaults to \", _jsx(InlineCode, {\n                children: \"True\"\n              }), \". \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The initialized object. \", _jsx(_components.del, {\n                children: \"Language\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-component\",\n      children: [_jsx(_components.h2, {\n        id: \"component\",\n        tag: \"classmethod\",\n        version: \"3\",\n        children: \"Language.component \"\n      }), _jsxs(_components.p, {\n        children: [\"Register a custom pipeline component under a given name. This allows\\ninitializing the component by name using\\n\", _jsx(_components.a, {\n          href: \"/api/language#add_pipe\",\n          children: _jsx(InlineCode, {\n            children: \"Language.add_pipe\"\n          })\n        }), \" and referring to it in\\n\", _jsx(_components.a, {\n          href: \"/usage/training#config\",\n          children: \"config files\"\n        }), \". This classmethod and decorator is\\nintended for \", _jsx(_components.strong, {\n          children: \"simple stateless functions\"\n        }), \" that take a \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" and return it. For\\nmore complex stateful components that allow settings and need access to the\\nshared \", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \" object, use the \", _jsx(_components.a, {\n          href: \"/api/language#factory\",\n          children: _jsx(InlineCode, {\n            children: \"Language.factory\"\n          })\n        }), \"\\ndecorator. For more details and examples, see the\\n\", _jsx(_components.a, {\n          href: \"/usage/processing-pipelines#custom-components\",\n          children: \"usage documentation\"\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.language import Language\\n\\n# Usage as a decorator\\n@Language.component(\\\"my_component\\\")\\ndef my_component(doc):\\n   # Do something to the doc\\n   return doc\\n\\n# Usage as a function\\nLanguage.component(\\\"my_component2\\\", func=my_component)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The name of the component factory. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"assigns\"\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"Doc\"\n              }), \" or \", _jsx(InlineCode, {\n                children: \"Token\"\n              }), \" attributes assigned by this component, e.g. \", _jsx(InlineCode, {\n                children: \"[\\\"token.ent_id\\\"]\"\n              }), \". Used for \", _jsx(_components.a, {\n                href: \"/usage/processing-pipelines#analysis\",\n                children: \"pipe analysis\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"requires\"\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"Doc\"\n              }), \" or \", _jsx(InlineCode, {\n                children: \"Token\"\n              }), \" attributes required by this component, e.g. \", _jsx(InlineCode, {\n                children: \"[\\\"token.ent_id\\\"]\"\n              }), \". Used for \", _jsx(_components.a, {\n                href: \"/usage/processing-pipelines#analysis\",\n                children: \"pipe analysis\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"retokenizes\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether the component changes tokenization. Used for \", _jsx(_components.a, {\n                href: \"/usage/processing-pipelines#analysis\",\n                children: \"pipe analysis\"\n              }), \". \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"func\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Optional function if not used as a decorator. \", _jsx(_components.del, {\n                children: \"Optional[Callable[[Doc], Doc]]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-factory\",\n      children: [_jsx(_components.h2, {\n        id: \"factory\",\n        tag: \"classmethod\",\n        children: \"Language.factory \"\n      }), _jsxs(_components.p, {\n        children: [\"Register a custom pipeline component factory under a given name. This allows\\ninitializing the component by name using\\n\", _jsx(_components.a, {\n          href: \"/api/language#add_pipe\",\n          children: _jsx(InlineCode, {\n            children: \"Language.add_pipe\"\n          })\n        }), \" and referring to it in\\n\", _jsx(_components.a, {\n          href: \"/usage/training#config\",\n          children: \"config files\"\n        }), \". The registered factory function needs to\\ntake at least two \", _jsx(_components.strong, {\n          children: \"named arguments\"\n        }), \" which spaCy fills in automatically: \", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \"\\nfor the current \", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \" object and \", _jsx(InlineCode, {\n          children: \"name\"\n        }), \" for the component instance name. This\\ncan be useful to distinguish multiple instances of the same component and allows\\ntrainable components to add custom losses using the component instance name. The\\n\", _jsx(InlineCode, {\n          children: \"default_config\"\n        }), \" defines the default values of the remaining factory arguments.\\nIt’s merged into the \", _jsx(_components.a, {\n          href: \"/api/language#config\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.config\"\n          })\n        }), \". For more details and\\nexamples, see the\\n\", _jsx(_components.a, {\n          href: \"/usage/processing-pipelines#custom-components\",\n          children: \"usage documentation\"\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.language import Language\\n\\n# Usage as a decorator\\n@Language.factory(\\n   \\\"my_component\\\",\\n   default_config={\\\"some_setting\\\": True},\\n)\\ndef create_my_component(nlp, name, some_setting):\\n     return MyComponent(some_setting)\\n\\n# Usage as function\\nLanguage.factory(\\n    \\\"my_component\\\",\\n    default_config={\\\"some_setting\\\": True},\\n    func=create_my_component\\n)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The name of the component factory. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"default_config\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The default config, describing the default values of the factory arguments. \", _jsx(_components.del, {\n                children: \"Dict[str, Any]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"assigns\"\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"Doc\"\n              }), \" or \", _jsx(InlineCode, {\n                children: \"Token\"\n              }), \" attributes assigned by this component, e.g. \", _jsx(InlineCode, {\n                children: \"[\\\"token.ent_id\\\"]\"\n              }), \". Used for \", _jsx(_components.a, {\n                href: \"/usage/processing-pipelines#analysis\",\n                children: \"pipe analysis\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"requires\"\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"Doc\"\n              }), \" or \", _jsx(InlineCode, {\n                children: \"Token\"\n              }), \" attributes required by this component, e.g. \", _jsx(InlineCode, {\n                children: \"[\\\"token.ent_id\\\"]\"\n              }), \". Used for \", _jsx(_components.a, {\n                href: \"/usage/processing-pipelines#analysis\",\n                children: \"pipe analysis\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"retokenizes\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether the component changes tokenization. Used for \", _jsx(_components.a, {\n                href: \"/usage/processing-pipelines#analysis\",\n                children: \"pipe analysis\"\n              }), \". \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"default_score_weights\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The scores to report during training, and their default weight towards the final score used to select the best model. Weights should sum to \", _jsx(InlineCode, {\n                children: \"1.0\"\n              }), \" per component and will be combined and normalized for the whole pipeline. If a weight is set to \", _jsx(InlineCode, {\n                children: \"None\"\n              }), \", the score will not be logged or weighted. \", _jsx(_components.del, {\n                children: \"Dict[str, Optional[float]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"func\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Optional function if not used as a decorator. \", _jsx(_components.del, {\n                children: \"Optional[Callable[[…], Callable[[Doc], Doc]]]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-call\",\n      children: [_jsx(_components.h2, {\n        id: \"call\",\n        tag: \"method\",\n        children: \"Language.__call__ \"\n      }), _jsx(_components.p, {\n        children: \"Apply the pipeline to some text. The text can span multiple sentences, and can\\ncontain arbitrary whitespace. Alignment into the original string is preserved.\"\n      }), _jsxs(_components.p, {\n        children: [\"Instead of text, a \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" can be passed as input, in which case tokenization is\\nskipped, but the rest of the pipeline is run.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"An example sentence. Another sentence.\\\")\\nassert (doc[0].text, doc[0].head.tag_) == (\\\"An\\\", \\\"NN\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"text\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The text to be processed, or a Doc. \", _jsx(_components.del, {\n                children: \"Union[str, Doc]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"disable\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Names of pipeline components to \", _jsx(_components.a, {\n                href: \"/usage/processing-pipelines#disabling\",\n                children: \"disable\"\n              }), \". \", _jsx(_components.del, {\n                children: \"List[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"component_cfg\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Optional dictionary of keyword arguments for components, keyed by component names. Defaults to \", _jsx(InlineCode, {\n                children: \"None\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Optional[Dict[str, Dict[str, Any]]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A container for accessing the annotations. \", _jsx(_components.del, {\n                children: \"Doc\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-pipe\",\n      children: [_jsx(_components.h2, {\n        id: \"pipe\",\n        tag: \"method\",\n        children: \"Language.pipe \"\n      }), _jsxs(_components.p, {\n        children: [\"Process texts as a stream, and yield \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" objects in order. This is usually\\nmore efficient than processing texts one-by-one.\"]\n      }), _jsxs(_components.p, {\n        children: [\"Instead of text, a \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" object can be passed as input. In this case\\ntokenization is skipped but the rest of the pipeline is run.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"texts = [\\\"One document.\\\", \\\"...\\\", \\\"Lots of documents\\\"]\\nfor doc in nlp.pipe(texts, batch_size=50):\\n    assert doc.has_annotation(\\\"DEP\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"texts\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A sequence of strings (or \", _jsx(InlineCode, {\n                children: \"Doc\"\n              }), \" objects). \", _jsx(_components.del, {\n                children: \"Iterable[Union[str, Doc]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"as_tuples\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"If set to \", _jsx(InlineCode, {\n                children: \"True\"\n              }), \", inputs should be a sequence of \", _jsx(InlineCode, {\n                children: \"(text, context)\"\n              }), \" tuples. Output will then be a sequence of \", _jsx(InlineCode, {\n                children: \"(doc, context)\"\n              }), \" tuples. Defaults to \", _jsx(InlineCode, {\n                children: \"False\"\n              }), \". \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"batch_size\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of texts to buffer. \", _jsx(_components.del, {\n                children: \"Optional[int]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"disable\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Names of pipeline components to \", _jsx(_components.a, {\n                href: \"/usage/processing-pipelines#disabling\",\n                children: \"disable\"\n              }), \". \", _jsx(_components.del, {\n                children: \"List[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"component_cfg\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Optional dictionary of keyword arguments for components, keyed by component names. Defaults to \", _jsx(InlineCode, {\n                children: \"None\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Optional[Dict[str, Dict[str, Any]]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"n_process\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Number of processors to use. Defaults to \", _jsx(InlineCode, {\n                children: \"1\"\n              }), \". \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"YIELDS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Documents in the order of the original text. \", _jsx(_components.del, {\n                children: \"Doc\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-set_error_handler\",\n      children: [_jsx(_components.h2, {\n        id: \"set_error_handler\",\n        tag: \"method\",\n        version: \"3\",\n        children: \"Language.set_error_handler \"\n      }), _jsxs(_components.p, {\n        children: [\"Define a callback that will be invoked when an error is thrown during processing\\nof one or more documents. Specifically, this function will call\\n\", _jsx(_components.a, {\n          href: \"/api/pipe#set_error_handler\",\n          children: _jsx(InlineCode, {\n            children: \"set_error_handler\"\n          })\n        }), \" on all the pipeline\\ncomponents that define that function. The error handler will be invoked with the\\noriginal component’s name, the component itself, the list of documents that was\\nbeing processed, and the original error.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"def warn_error(proc_name, proc, docs, e):\\n    print(f\\\"An error occurred when applying component {proc_name}.\\\")\\n\\nnlp.set_error_handler(warn_error)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"error_handler\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A function that performs custom error handling. \", _jsx(_components.del, {\n                children: \"Callable[[str, Callable[[Doc], Doc], List[Doc], Exception]\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-initialize\",\n      children: [_jsx(_components.h2, {\n        id: \"initialize\",\n        tag: \"method\",\n        version: \"3\",\n        children: \"Language.initialize \"\n      }), _jsxs(_components.p, {\n        children: [\"Initialize the pipeline for training and return an\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-optimizers\",\n          children: _jsx(InlineCode, {\n            children: \"Optimizer\"\n          })\n        }), \". Under the hood, it uses the\\nsettings defined in the \", _jsx(_components.a, {\n          href: \"/api/data-formats#config-initialize\",\n          children: _jsx(InlineCode, {\n            children: \"[initialize]\"\n          })\n        }), \"\\nconfig block to set up the vocabulary, load in vectors and tok2vec weights and\\npass optional arguments to the \", _jsx(InlineCode, {\n          children: \"initialize\"\n        }), \" methods implemented by pipeline\\ncomponents or the tokenizer. This method is typically called automatically when\\nyou run \", _jsx(_components.a, {\n          href: \"/api/cli#train\",\n          children: _jsx(InlineCode, {\n            children: \"spacy train\"\n          })\n        }), \". See the usage guide on the\\n\", _jsx(_components.a, {\n          href: \"/usage/training#config-lifecycle\",\n          children: \"config lifecycle\"\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"/usage/training#initialization\",\n          children: \"initialization\"\n        }), \" for details.\"]\n      }), _jsxs(_components.p, {\n        children: [_jsx(InlineCode, {\n          children: \"get_examples\"\n        }), \" should be a function that returns an iterable of\\n\", _jsx(_components.a, {\n          href: \"/api/example\",\n          children: _jsx(InlineCode, {\n            children: \"Example\"\n          })\n        }), \" objects. The data examples can either be the full\\ntraining data or a representative sample. They are used to \", _jsx(_components.strong, {\n          children: \"initialize the\\nmodels\"\n        }), \" of trainable pipeline components and are passed each component’s\\n\", _jsx(_components.a, {\n          href: \"/api/pipe#initialize\",\n          children: _jsx(InlineCode, {\n            children: \"initialize\"\n          })\n        }), \" method, if available. Initialization\\nincludes validating the network,\\n\", _jsx(_components.a, {\n          href: \"/usage/layers-architectures#thinc-shape-inference\",\n          children: \"inferring missing shapes\"\n        }), \"\\nand setting up the label scheme based on the data.\"]\n      }), _jsxs(_components.p, {\n        children: [\"If no \", _jsx(InlineCode, {\n          children: \"get_examples\"\n        }), \" function is provided when calling \", _jsx(InlineCode, {\n          children: \"nlp.initialize\"\n        }), \", the\\npipeline components will be initialized with generic data. In this case, it is\\ncrucial that the output dimension of each component has already been defined\\neither in the \", _jsx(_components.a, {\n          href: \"/usage/training#config\",\n          children: \"config\"\n        }), \", or by calling\\n\", _jsx(_components.a, {\n          href: \"/api/pipe#add_label\",\n          children: _jsx(InlineCode, {\n            children: \"pipe.add_label\"\n          })\n        }), \" for each possible output label (e.g. for\\nthe tagger or textcat).\"]\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        title: \"Changed in v3.0\",\n        id: \"begin_training\",\n        children: _jsxs(_components.p, {\n          children: [\"This method was previously called \", _jsx(InlineCode, {\n            children: \"begin_training\"\n          }), \". It now also takes a\\n\", _jsx(_components.strong, {\n            children: \"function\"\n          }), \" that is called with no arguments and returns a sequence of\\n\", _jsx(_components.a, {\n            href: \"/api/example\",\n            children: _jsx(InlineCode, {\n              children: \"Example\"\n            })\n          }), \" objects instead of tuples of \", _jsx(InlineCode, {\n            children: \"Doc\"\n          }), \" and \", _jsx(InlineCode, {\n            children: \"GoldParse\"\n          }), \"\\nobjects.\"]\n        })\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"get_examples = lambda: examples\\noptimizer = nlp.initialize(get_examples)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"get_examples\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Optional function that returns gold-standard annotations in the form of \", _jsx(_components.a, {\n                href: \"/api/example\",\n                children: _jsx(InlineCode, {\n                  children: \"Example\"\n                })\n              }), \" objects. \", _jsx(_components.del, {\n                children: \"Optional[Callable[[], Iterable[Example]]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"sgd\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"An optimizer. Will be created via \", _jsx(_components.a, {\n                href: \"#create_optimizer\",\n                children: _jsx(InlineCode, {\n                  children: \"create_optimizer\"\n                })\n              }), \" if not set. \", _jsx(_components.del, {\n                children: \"Optional[Optimizer]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The optimizer. \", _jsx(_components.del, {\n                children: \"Optimizer\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-resume_training\",\n      children: [_jsx(_components.h2, {\n        id: \"resume_training\",\n        tag: \"method,experimental\",\n        version: \"3\",\n        children: \"Language.resume_training \"\n      }), _jsxs(_components.p, {\n        children: [\"Continue training a trained pipeline. Create and return an optimizer, and\\ninitialize “rehearsal” for any pipeline component that has a \", _jsx(InlineCode, {\n          children: \"rehearse\"\n        }), \" method.\\nRehearsal is used to prevent models from “forgetting” their initialized\\n“knowledge”. To perform rehearsal, collect samples of text you want the models\\nto retain performance on, and call \", _jsx(_components.a, {\n          href: \"/api/language#rehearse\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.rehearse\"\n          })\n        }), \" with\\na batch of \", _jsx(_components.a, {\n          href: \"/api/example\",\n          children: \"Example\"\n        }), \" objects.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"optimizer = nlp.resume_training()\\nnlp.rehearse(examples, sgd=optimizer)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"sgd\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"An optimizer. Will be created via \", _jsx(_components.a, {\n                href: \"#create_optimizer\",\n                children: _jsx(InlineCode, {\n                  children: \"create_optimizer\"\n                })\n              }), \" if not set. \", _jsx(_components.del, {\n                children: \"Optional[Optimizer]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The optimizer. \", _jsx(_components.del, {\n                children: \"Optimizer\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-update\",\n      children: [_jsx(_components.h2, {\n        id: \"update\",\n        tag: \"method\",\n        children: \"Language.update \"\n      }), _jsx(_components.p, {\n        children: \"Update the models in the pipeline.\"\n      }), _jsxs(Infobox, {\n        variant: \"warning\",\n        title: \"Changed in v3.0\",\n        children: [_jsxs(_components.p, {\n          children: [\"The \", _jsx(InlineCode, {\n            children: \"Language.update\"\n          }), \" method now takes a batch of \", _jsx(_components.a, {\n            href: \"/api/example\",\n            children: _jsx(InlineCode, {\n              children: \"Example\"\n            })\n          }), \"\\nobjects instead of the raw texts and annotations or \", _jsx(InlineCode, {\n            children: \"Doc\"\n          }), \" and \", _jsx(InlineCode, {\n            children: \"GoldParse\"\n          }), \"\\nobjects. An \", _jsx(_components.a, {\n            href: \"/api/example\",\n            children: _jsx(InlineCode, {\n              children: \"Example\"\n            })\n          }), \" streamlines how data is passed around. It\\nstores two \", _jsx(InlineCode, {\n            children: \"Doc\"\n          }), \" objects: one for holding the gold-standard reference data, and\\none for holding the predictions of the pipeline.\"]\n        }), _jsxs(_components.p, {\n          children: [\"For most use cases, you shouldn’t have to write your own training scripts\\nanymore. Instead, you can use \", _jsx(_components.a, {\n            href: \"/api/cli#train\",\n            children: _jsx(InlineCode, {\n              children: \"spacy train\"\n            })\n          }), \" with a config file\\nand custom registered functions if needed. See the\\n\", _jsx(_components.a, {\n            href: \"/usage/training\",\n            children: \"training documentation\"\n          }), \" for details.\"]\n        })]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"for raw_text, entity_offsets in train_data:\\n    doc = nlp.make_doc(raw_text)\\n    example = Example.from_dict(doc, {\\\"entities\\\": entity_offsets})\\n    nlp.update([example], sgd=optimizer)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"examples\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A batch of \", _jsx(_components.a, {\n                href: \"/api/example\",\n                children: _jsx(InlineCode, {\n                  children: \"Example\"\n                })\n              }), \" objects to learn from. \", _jsx(_components.del, {\n                children: \"Iterable[Example]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"drop\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The dropout rate. \", _jsx(_components.del, {\n                children: \"float\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"sgd\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"An optimizer. Will be created via \", _jsx(_components.a, {\n                href: \"#create_optimizer\",\n                children: _jsx(InlineCode, {\n                  children: \"create_optimizer\"\n                })\n              }), \" if not set. \", _jsx(_components.del, {\n                children: \"Optional[Optimizer]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"losses\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Dictionary to update with the loss, keyed by pipeline component. \", _jsx(_components.del, {\n                children: \"Optional[Dict[str, float]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"component_cfg\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Optional dictionary of keyword arguments for components, keyed by component names. Defaults to \", _jsx(InlineCode, {\n                children: \"None\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Optional[Dict[str, Dict[str, Any]]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The updated \", _jsx(InlineCode, {\n                children: \"losses\"\n              }), \" dictionary. \", _jsx(_components.del, {\n                children: \"Dict[str, float]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-rehearse\",\n      children: [_jsx(_components.h2, {\n        id: \"rehearse\",\n        tag: \"method,experimental\",\n        version: \"3\",\n        children: \"Language.rehearse \"\n      }), _jsx(_components.p, {\n        children: \"Perform a “rehearsal” update from a batch of data. Rehearsal updates teach the\\ncurrent model to make predictions similar to an initial model, to try to address\\nthe “catastrophic forgetting” problem. This feature is experimental.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"optimizer = nlp.resume_training()\\nlosses = nlp.rehearse(examples, sgd=optimizer)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"examples\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A batch of \", _jsx(_components.a, {\n                href: \"/api/example\",\n                children: _jsx(InlineCode, {\n                  children: \"Example\"\n                })\n              }), \" objects to learn from. \", _jsx(_components.del, {\n                children: \"Iterable[Example]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"drop\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The dropout rate. \", _jsx(_components.del, {\n                children: \"float\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"sgd\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"An optimizer. Will be created via \", _jsx(_components.a, {\n                href: \"#create_optimizer\",\n                children: _jsx(InlineCode, {\n                  children: \"create_optimizer\"\n                })\n              }), \" if not set. \", _jsx(_components.del, {\n                children: \"Optional[Optimizer]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"losses\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Dictionary to update with the loss, keyed by pipeline component. \", _jsx(_components.del, {\n                children: \"Optional[Dict[str, float]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The updated \", _jsx(InlineCode, {\n                children: \"losses\"\n              }), \" dictionary. \", _jsx(_components.del, {\n                children: \"Dict[str, float]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-evaluate\",\n      children: [_jsx(_components.h2, {\n        id: \"evaluate\",\n        tag: \"method\",\n        children: \"Language.evaluate \"\n      }), _jsx(_components.p, {\n        children: \"Evaluate a pipeline’s components.\"\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        title: \"Changed in v3.0\",\n        children: _jsxs(_components.p, {\n          children: [\"The \", _jsx(InlineCode, {\n            children: \"Language.evaluate\"\n          }), \" method now takes a batch of \", _jsx(_components.a, {\n            href: \"/api/example\",\n            children: _jsx(InlineCode, {\n              children: \"Example\"\n            })\n          }), \"\\nobjects instead of tuples of \", _jsx(InlineCode, {\n            children: \"Doc\"\n          }), \" and \", _jsx(InlineCode, {\n            children: \"GoldParse\"\n          }), \" objects.\"]\n        })\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"scores = nlp.evaluate(examples)\\nprint(scores)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"examples\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A batch of \", _jsx(_components.a, {\n                href: \"/api/example\",\n                children: _jsx(InlineCode, {\n                  children: \"Example\"\n                })\n              }), \" objects to learn from. \", _jsx(_components.del, {\n                children: \"Iterable[Example]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"batch_size\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The batch size to use. \", _jsx(_components.del, {\n                children: \"Optional[int]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"scorer\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Optional \", _jsx(_components.a, {\n                href: \"/api/scorer\",\n                children: _jsx(InlineCode, {\n                  children: \"Scorer\"\n                })\n              }), \" to use. If not passed in, a new one will be created. \", _jsx(_components.del, {\n                children: \"Optional[Scorer]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"component_cfg\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Optional dictionary of keyword arguments for components, keyed by component names. Defaults to \", _jsx(InlineCode, {\n                children: \"None\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Optional[Dict[str, Dict[str, Any]]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"scorer_cfg\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Optional dictionary of keyword arguments for the \", _jsx(InlineCode, {\n                children: \"Scorer\"\n              }), \". Defaults to \", _jsx(InlineCode, {\n                children: \"None\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Optional[Dict[str, Any]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A dictionary of evaluation scores. \", _jsx(_components.del, {\n                children: \"Dict[str, Union[float, Dict[str, float]]]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-use_params\",\n      children: [_jsx(_components.h2, {\n        id: \"use_params\",\n        tag: \"contextmanager, method\",\n        children: \"Language.use_params \"\n      }), _jsx(_components.p, {\n        children: \"Replace weights of models in the pipeline with those provided in the params\\ndictionary. Can be used as a context manager, in which case, models go back to\\ntheir original weights after the block.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"with nlp.use_params(optimizer.averages):\\n    nlp.to_disk(\\\"/tmp/checkpoint\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"params\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A dictionary of parameters keyed by model ID. \", _jsx(_components.del, {\n                children: \"dict\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-add_pipe\",\n      children: [_jsx(_components.h2, {\n        id: \"add_pipe\",\n        tag: \"method\",\n        version: \"2\",\n        children: \"Language.add_pipe \"\n      }), _jsxs(_components.p, {\n        children: [\"Add a component to the processing pipeline. Expects a name that maps to a\\ncomponent factory registered using\\n\", _jsx(_components.a, {\n          href: \"/api/language#component\",\n          children: _jsx(InlineCode, {\n            children: \"@Language.component\"\n          })\n        }), \" or\\n\", _jsx(_components.a, {\n          href: \"/api/language#factory\",\n          children: _jsx(InlineCode, {\n            children: \"@Language.factory\"\n          })\n        }), \". Components should be callables\\nthat take a \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" object, modify it and return it. Only one of \", _jsx(InlineCode, {\n          children: \"before\"\n        }), \",\\n\", _jsx(InlineCode, {\n          children: \"after\"\n        }), \", \", _jsx(InlineCode, {\n          children: \"first\"\n        }), \" or \", _jsx(InlineCode, {\n          children: \"last\"\n        }), \" can be set. Default behavior is \", _jsx(InlineCode, {\n          children: \"last=True\"\n        }), \".\"]\n      }), _jsx(Infobox, {\n        title: \"Changed in v3.0\",\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"As of v3.0, the \", _jsx(_components.a, {\n            href: \"/api/language#add_pipe\",\n            children: _jsx(InlineCode, {\n              children: \"Language.add_pipe\"\n            })\n          }), \" method doesn’t\\ntake callables anymore and instead expects the \", _jsx(_components.strong, {\n            children: \"name of a component factory\"\n          }), \"\\nregistered using \", _jsx(_components.a, {\n            href: \"/api/language#component\",\n            children: _jsx(InlineCode, {\n              children: \"@Language.component\"\n            })\n          }), \" or\\n\", _jsx(_components.a, {\n            href: \"/api/language#factory\",\n            children: _jsx(InlineCode, {\n              children: \"@Language.factory\"\n            })\n          }), \". It now takes care of creating the\\ncomponent, adds it to the pipeline and returns it.\"]\n        })\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"@Language.component(\\\"component\\\")\\ndef component_func(doc):\\n    # modify Doc and return it\\n    return doc\\n\\nnlp.add_pipe(\\\"component\\\", before=\\\"ner\\\")\\ncomponent = nlp.add_pipe(\\\"component\\\", name=\\\"custom_name\\\", last=True)\\n\\n# Add component from source pipeline\\nsource_nlp = spacy.load(\\\"en_core_web_sm\\\")\\nnlp.add_pipe(\\\"ner\\\", source=source_nlp)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"factory_name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Name of the registered component factory. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Optional unique name of pipeline component instance. If not set, the factory name is used. An error is raised if the name already exists in the pipeline. \", _jsx(_components.del, {\n                children: \"Optional[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"before\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Component name or index to insert component directly before. \", _jsx(_components.del, {\n                children: \"Optional[Union[str, int]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"after\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Component name or index to insert component directly after. \", _jsx(_components.del, {\n                children: \"Optional[Union[str, int]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"first\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Insert component first / not first in the pipeline. \", _jsx(_components.del, {\n                children: \"Optional[bool]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"last\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Insert component last / not last in the pipeline. \", _jsx(_components.del, {\n                children: \"Optional[bool]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"config\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"Optional config parameters to use for this component. Will be merged with the \", _jsx(InlineCode, {\n                children: \"default_config\"\n              }), \" specified by the component factory. \", _jsx(_components.del, {\n                children: \"Dict[str, Any]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"source\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"Optional source pipeline to copy component from. If a source is provided, the \", _jsx(InlineCode, {\n                children: \"factory_name\"\n              }), \" is interpreted as the name of the component in the source pipeline. Make sure that the vocab, vectors and settings of the source pipeline match the target pipeline. \", _jsx(_components.del, {\n                children: \"Optional[Language]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"validate\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"Whether to validate the component config and arguments against the types expected by the factory. Defaults to \", _jsx(InlineCode, {\n                children: \"True\"\n              }), \". \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The pipeline component. \", _jsx(_components.del, {\n                children: \"Callable[[Doc], Doc]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-create_pipe\",\n      children: [_jsx(_components.h2, {\n        id: \"create_pipe\",\n        tag: \"method\",\n        version: \"2\",\n        children: \"Language.create_pipe \"\n      }), _jsx(_components.p, {\n        children: \"Create a pipeline component from a factory.\"\n      }), _jsx(Infobox, {\n        title: \"Changed in v3.0\",\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"As of v3.0, the \", _jsx(_components.a, {\n            href: \"/api/language#add_pipe\",\n            children: _jsx(InlineCode, {\n              children: \"Language.add_pipe\"\n            })\n          }), \" method also takes\\nthe string name of the factory, creates the component, adds it to the pipeline\\nand returns it. The \", _jsx(InlineCode, {\n            children: \"Language.create_pipe\"\n          }), \" method is now mostly used internally.\\nTo create a component and add it to the pipeline, you should always use\\n\", _jsx(InlineCode, {\n            children: \"Language.add_pipe\"\n          }), \".\"]\n        })\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"parser = nlp.create_pipe(\\\"parser\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"factory_name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Name of the registered component factory. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Optional unique name of pipeline component instance. If not set, the factory name is used. An error is raised if the name already exists in the pipeline. \", _jsx(_components.del, {\n                children: \"Optional[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"config\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"Optional config parameters to use for this component. Will be merged with the \", _jsx(InlineCode, {\n                children: \"default_config\"\n              }), \" specified by the component factory. \", _jsx(_components.del, {\n                children: \"Dict[str, Any]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"validate\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"Whether to validate the component config and arguments against the types expected by the factory. Defaults to \", _jsx(InlineCode, {\n                children: \"True\"\n              }), \". \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The pipeline component. \", _jsx(_components.del, {\n                children: \"Callable[[Doc], Doc]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-has_factory\",\n      children: [_jsx(_components.h2, {\n        id: \"has_factory\",\n        tag: \"classmethod\",\n        version: \"3\",\n        children: \"Language.has_factory \"\n      }), _jsxs(_components.p, {\n        children: [\"Check whether a factory name is registered on the \", _jsx(InlineCode, {\n          children: \"Language\"\n        }), \" class or subclass.\\nWill check for\\n\", _jsx(_components.a, {\n          href: \"/usage/processing-pipelines#factories-language\",\n          children: \"language-specific factories\"\n        }), \"\\nregistered on the subclass, as well as general-purpose factories registered on\\nthe \", _jsx(InlineCode, {\n          children: \"Language\"\n        }), \" base class, available to all subclasses.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.language import Language\\nfrom spacy.lang.en import English\\n\\n@English.component(\\\"component\\\")\\ndef component(doc):\\n    return doc\\n\\nassert English.has_factory(\\\"component\\\")\\nassert not Language.has_factory(\\\"component\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Name of the pipeline factory to check. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether a factory of that name is registered on the class. \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-has_pipe\",\n      children: [_jsx(_components.h2, {\n        id: \"has_pipe\",\n        tag: \"method\",\n        version: \"2\",\n        children: \"Language.has_pipe \"\n      }), _jsxs(_components.p, {\n        children: [\"Check whether a component is present in the pipeline. Equivalent to\\n\", _jsx(InlineCode, {\n          children: \"name in nlp.pipe_names\"\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"@Language.component(\\\"component\\\")\\ndef component(doc):\\n    return doc\\n\\nnlp.add_pipe(\\\"component\\\", name=\\\"my_component\\\")\\nassert \\\"my_component\\\" in nlp.pipe_names\\nassert nlp.has_pipe(\\\"my_component\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Name of the pipeline component to check. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether a component of that name exists in the pipeline. \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_pipe\",\n      children: [_jsx(_components.h2, {\n        id: \"get_pipe\",\n        tag: \"method\",\n        version: \"2\",\n        children: \"Language.get_pipe \"\n      }), _jsx(_components.p, {\n        children: \"Get a pipeline component for a given component name.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"parser = nlp.get_pipe(\\\"parser\\\")\\ncustom_component = nlp.get_pipe(\\\"custom_component\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Name of the pipeline component to get. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The pipeline component. \", _jsx(_components.del, {\n                children: \"Callable[[Doc], Doc]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-replace_pipe\",\n      children: [_jsx(_components.h2, {\n        id: \"replace_pipe\",\n        tag: \"method\",\n        version: \"2\",\n        children: \"Language.replace_pipe \"\n      }), _jsx(_components.p, {\n        children: \"Replace a component in the pipeline and return the new component.\"\n      }), _jsx(Infobox, {\n        title: \"Changed in v3.0\",\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"As of v3.0, the \", _jsx(InlineCode, {\n            children: \"Language.replace_pipe\"\n          }), \" method doesn’t take callables anymore\\nand instead expects the \", _jsx(_components.strong, {\n            children: \"name of a component factory\"\n          }), \" registered using\\n\", _jsx(_components.a, {\n            href: \"/api/language#component\",\n            children: _jsx(InlineCode, {\n              children: \"@Language.component\"\n            })\n          }), \" or\\n\", _jsx(_components.a, {\n            href: \"/api/language#factory\",\n            children: _jsx(InlineCode, {\n              children: \"@Language.factory\"\n            })\n          }), \".\"]\n        })\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"new_parser = nlp.replace_pipe(\\\"parser\\\", \\\"my_custom_parser\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Name of the component to replace. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"component\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The factory name of the component to insert. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"config\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"Optional config parameters to use for the new component. Will be merged with the \", _jsx(InlineCode, {\n                children: \"default_config\"\n              }), \" specified by the component factory. \", _jsx(_components.del, {\n                children: \"Optional[Dict[str, Any]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"validate\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"Whether to validate the component config and arguments against the types expected by the factory. Defaults to \", _jsx(InlineCode, {\n                children: \"True\"\n              }), \". \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The new pipeline component. \", _jsx(_components.del, {\n                children: \"Callable[[Doc], Doc]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-rename_pipe\",\n      children: [_jsx(_components.h2, {\n        id: \"rename_pipe\",\n        tag: \"method\",\n        version: \"2\",\n        children: \"Language.rename_pipe \"\n      }), _jsxs(_components.p, {\n        children: [\"Rename a component in the pipeline. Useful to create custom names for\\npre-defined and pre-loaded components. To change the default name of a component\\nadded to the pipeline, you can also use the \", _jsx(InlineCode, {\n          children: \"name\"\n        }), \" argument on\\n\", _jsx(_components.a, {\n          href: \"/api/language#add_pipe\",\n          children: _jsx(InlineCode, {\n            children: \"add_pipe\"\n          })\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"nlp.rename_pipe(\\\"parser\\\", \\\"spacy_parser\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"old_name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Name of the component to rename. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"new_name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"New name of the component. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-remove_pipe\",\n      children: [_jsx(_components.h2, {\n        id: \"remove_pipe\",\n        tag: \"method\",\n        version: \"2\",\n        children: \"Language.remove_pipe \"\n      }), _jsx(_components.p, {\n        children: \"Remove a component from the pipeline. Returns the removed component name and\\ncomponent function.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"name, component = nlp.remove_pipe(\\\"parser\\\")\\nassert name == \\\"parser\\\"\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Name of the component to remove. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A \", _jsx(InlineCode, {\n                children: \"(name, component)\"\n              }), \" tuple of the removed component. \", _jsx(_components.del, {\n                children: \"Tuple[str, Callable[[Doc], Doc]]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-disable_pipe\",\n      children: [_jsx(_components.h2, {\n        id: \"disable_pipe\",\n        tag: \"method\",\n        version: \"3\",\n        children: \"Language.disable_pipe \"\n      }), _jsxs(_components.p, {\n        children: [\"Temporarily disable a pipeline component so it’s not run as part of the\\npipeline. Disabled components are listed in\\n\", _jsx(_components.a, {\n          href: \"/api/language#attributes\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.disabled\"\n          })\n        }), \" and included in\\n\", _jsx(_components.a, {\n          href: \"/api/language#attributes\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.components\"\n          })\n        }), \", but not in\\n\", _jsx(_components.a, {\n          href: \"/api/language#pipeline\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.pipeline\"\n          })\n        }), \", so they’re not run when you process a\\n\", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" with the \", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \" object. If the component is already disabled, this method\\ndoes nothing.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"nlp.add_pipe(\\\"ner\\\")\\nnlp.add_pipe(\\\"textcat\\\")\\nassert nlp.pipe_names == [\\\"ner\\\", \\\"textcat\\\"]\\nnlp.disable_pipe(\\\"ner\\\")\\nassert nlp.pipe_names == [\\\"textcat\\\"]\\nassert nlp.component_names == [\\\"ner\\\", \\\"textcat\\\"]\\nassert nlp.disabled == [\\\"ner\\\"]\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Name of the component to disable. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-enable_pipe\",\n      children: [_jsx(_components.h2, {\n        id: \"enable_pipe\",\n        tag: \"method\",\n        version: \"3\",\n        children: \"Language.enable_pipe \"\n      }), _jsxs(_components.p, {\n        children: [\"Enable a previously disabled component (e.g. via\\n\", _jsx(_components.a, {\n          href: \"/api/language#disable_pipes\",\n          children: _jsx(InlineCode, {\n            children: \"Language.disable_pipes\"\n          })\n        }), \") so it’s run as part of\\nthe pipeline, \", _jsx(_components.a, {\n          href: \"/api/language#pipeline\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.pipeline\"\n          })\n        }), \". If the component is\\nalready enabled, this method does nothing.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"nlp.disable_pipe(\\\"ner\\\")\\nassert \\\"ner\\\" in nlp.disabled\\nassert not \\\"ner\\\" in nlp.pipe_names\\nnlp.enable_pipe(\\\"ner\\\")\\nassert not \\\"ner\\\" in nlp.disabled\\nassert \\\"ner\\\" in nlp.pipe_names\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Name of the component to enable. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-select_pipes\",\n      children: [_jsx(_components.h2, {\n        id: \"select_pipes\",\n        tag: \"contextmanager, method\",\n        version: \"3\",\n        children: \"Language.select_pipes \"\n      }), _jsxs(_components.p, {\n        children: [\"Disable one or more pipeline components. If used as a context manager, the\\npipeline will be restored to the initial state at the end of the block.\\nOtherwise, a \", _jsx(InlineCode, {\n          children: \"DisabledPipes\"\n        }), \" object is returned, that has a \", _jsx(InlineCode, {\n          children: \".restore()\"\n        }), \" method\\nyou can use to undo your changes. You can specify either \", _jsx(InlineCode, {\n          children: \"disable\"\n        }), \" (as a list or\\nstring), or \", _jsx(InlineCode, {\n          children: \"enable\"\n        }), \". In the latter case, all components not in the \", _jsx(InlineCode, {\n          children: \"enable\"\n        }), \"\\nlist will be disabled. Under the hood, this method calls into\\n\", _jsx(_components.a, {\n          href: \"/api/language#disable_pipe\",\n          children: _jsx(InlineCode, {\n            children: \"disable_pipe\"\n          })\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"/api/language#enable_pipe\",\n          children: _jsx(InlineCode, {\n            children: \"enable_pipe\"\n          })\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"with nlp.select_pipes(disable=[\\\"tagger\\\", \\\"parser\\\"]):\\n   nlp.initialize()\\n\\nwith nlp.select_pipes(enable=\\\"ner\\\"):\\n    nlp.initialize()\\n\\ndisabled = nlp.select_pipes(disable=[\\\"tagger\\\", \\\"parser\\\"])\\nnlp.initialize()\\ndisabled.restore()\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(Infobox, {\n        title: \"Changed in v3.0\",\n        variant: \"warning\",\n        id: \"disable_pipes\",\n        children: [_jsxs(_components.p, {\n          children: [\"As of spaCy v3.0, the \", _jsx(InlineCode, {\n            children: \"disable_pipes\"\n          }), \" method has been renamed to \", _jsx(InlineCode, {\n            children: \"select_pipes\"\n          }), \":\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            lang: \"diff\",\n            children: \"- nlp.disable_pipes([\\\"tagger\\\", \\\"parser\\\"])\\n+ nlp.select_pipes(disable=[\\\"tagger\\\", \\\"parser\\\"])\\n\"\n          })\n        })]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"disable\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Name(s) of pipeline component(s) to disable. \", _jsx(_components.del, {\n                children: \"Optional[Union[str, Iterable[str]]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"enable\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Name(s) of pipeline component(s) that will not be disabled. \", _jsx(_components.del, {\n                children: \"Optional[Union[str, Iterable[str]]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The disabled pipes that can be restored by calling the object’s \", _jsx(InlineCode, {\n                children: \".restore()\"\n              }), \" method. \", _jsx(_components.del, {\n                children: \"DisabledPipes\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_factory_meta\",\n      children: [_jsx(_components.h2, {\n        id: \"get_factory_meta\",\n        tag: \"classmethod\",\n        version: \"3\",\n        children: \"Language.get_factory_meta \"\n      }), _jsxs(_components.p, {\n        children: [\"Get the factory meta information for a given pipeline component name. Expects\\nthe name of the component \", _jsx(_components.strong, {\n          children: \"factory\"\n        }), \". The factory meta is an instance of the\\n\", _jsx(_components.a, {\n          href: \"/api/language#factorymeta\",\n          children: _jsx(InlineCode, {\n            children: \"FactoryMeta\"\n          })\n        }), \" dataclass and contains the\\ninformation about the component and its default provided by the\\n\", _jsx(_components.a, {\n          href: \"/api/language#component\",\n          children: _jsx(InlineCode, {\n            children: \"@Language.component\"\n          })\n        }), \" or\\n\", _jsx(_components.a, {\n          href: \"/api/language#factory\",\n          children: _jsx(InlineCode, {\n            children: \"@Language.factory\"\n          })\n        }), \" decorator.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"factory_meta = Language.get_factory_meta(\\\"ner\\\")\\nassert factory_meta.factory == \\\"ner\\\"\\nprint(factory_meta.default_config)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The factory name. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The factory meta. \", _jsx(_components.del, {\n                children: \"FactoryMeta\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_pipe_meta\",\n      children: [_jsx(_components.h2, {\n        id: \"get_pipe_meta\",\n        tag: \"method\",\n        version: \"3\",\n        children: \"Language.get_pipe_meta \"\n      }), _jsxs(_components.p, {\n        children: [\"Get the factory meta information for a given pipeline component name. Expects\\nthe name of the component \", _jsx(_components.strong, {\n          children: \"instance\"\n        }), \" in the pipeline. The factory meta is an\\ninstance of the \", _jsx(_components.a, {\n          href: \"/api/language#factorymeta\",\n          children: _jsx(InlineCode, {\n            children: \"FactoryMeta\"\n          })\n        }), \" dataclass and\\ncontains the information about the component and its default provided by the\\n\", _jsx(_components.a, {\n          href: \"/api/language#component\",\n          children: _jsx(InlineCode, {\n            children: \"@Language.component\"\n          })\n        }), \" or\\n\", _jsx(_components.a, {\n          href: \"/api/language#factory\",\n          children: _jsx(InlineCode, {\n            children: \"@Language.factory\"\n          })\n        }), \" decorator.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"nlp.add_pipe(\\\"ner\\\", name=\\\"entity_recognizer\\\")\\nfactory_meta = nlp.get_pipe_meta(\\\"entity_recognizer\\\")\\nassert factory_meta.factory == \\\"ner\\\"\\nprint(factory_meta.default_config)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The pipeline component name. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The factory meta. \", _jsx(_components.del, {\n                children: \"FactoryMeta\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-analyze_pipes\",\n      children: [_jsx(_components.h2, {\n        id: \"analyze_pipes\",\n        tag: \"method\",\n        version: \"3\",\n        children: \"Language.analyze_pipes \"\n      }), _jsxs(_components.p, {\n        children: [\"Analyze the current pipeline components and show a summary of the attributes\\nthey assign and require, and the scores they set. The data is based on the\\ninformation provided in the \", _jsx(_components.a, {\n          href: \"/api/language#component\",\n          children: _jsx(InlineCode, {\n            children: \"@Language.component\"\n          })\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"/api/language#factory\",\n          children: _jsx(InlineCode, {\n            children: \"@Language.factory\"\n          })\n        }), \" decorator. If requirements aren’t\\nmet, e.g. if a component specifies a required property that is not set by a\\nprevious component, a warning is shown.\"]\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        title: \"Important note\",\n        children: _jsxs(_components.p, {\n          children: [\"The pipeline analysis is static and does \", _jsx(_components.strong, {\n            children: \"not actually run the components\"\n          }), \".\\nThis means that it relies on the information provided by the components\\nthemselves. If a custom component declares that it assigns an attribute but it\\ndoesn’t, the pipeline analysis won’t catch that.\"]\n        })\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"nlp = spacy.blank(\\\"en\\\")\\nnlp.add_pipe(\\\"tagger\\\")\\nnlp.add_pipe(\\\"entity_linker\\\")\\nanalysis = nlp.analyze_pipes()\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(Accordion, {\n        title: \"Example output\",\n        spaced: true,\n        children: [_jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-json\",\n            lang: \"json\",\n            title: \"Structured\",\n            children: \"{\\n  \\\"summary\\\": {\\n    \\\"tagger\\\": {\\n      \\\"assigns\\\": [\\\"token.tag\\\"],\\n      \\\"requires\\\": [],\\n      \\\"scores\\\": [\\\"tag_acc\\\", \\\"pos_acc\\\", \\\"lemma_acc\\\"],\\n      \\\"retokenizes\\\": false\\n    },\\n    \\\"entity_linker\\\": {\\n      \\\"assigns\\\": [\\\"token.ent_kb_id\\\"],\\n      \\\"requires\\\": [\\\"doc.ents\\\", \\\"doc.sents\\\", \\\"token.ent_iob\\\", \\\"token.ent_type\\\"],\\n      \\\"scores\\\": [],\\n      \\\"retokenizes\\\": false\\n    }\\n  },\\n  \\\"problems\\\": {\\n    \\\"tagger\\\": [],\\n    \\\"entity_linker\\\": [\\n      \\\"doc.ents\\\",\\n      \\\"doc.sents\\\",\\n      \\\"token.ent_iob\\\",\\n      \\\"token.ent_type\\\"\\n    ]\\n  },\\n  \\\"attrs\\\": {\\n    \\\"token.ent_iob\\\": { \\\"assigns\\\": [], \\\"requires\\\": [\\\"entity_linker\\\"] },\\n    \\\"doc.ents\\\": { \\\"assigns\\\": [], \\\"requires\\\": [\\\"entity_linker\\\"] },\\n    \\\"token.ent_kb_id\\\": { \\\"assigns\\\": [\\\"entity_linker\\\"], \\\"requires\\\": [] },\\n    \\\"doc.sents\\\": { \\\"assigns\\\": [], \\\"requires\\\": [\\\"entity_linker\\\"] },\\n    \\\"token.tag\\\": { \\\"assigns\\\": [\\\"tagger\\\"], \\\"requires\\\": [] },\\n    \\\"token.ent_type\\\": { \\\"assigns\\\": [], \\\"requires\\\": [\\\"entity_linker\\\"] }\\n  }\\n}\\n\"\n          })\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            lang: \"none\",\n            title: \"Pretty\",\n            children: \"============================= Pipeline Overview =============================\\n\\n#   Component       Assigns           Requires         Scores        Retokenizes\\n-   -------------   ---------------   --------------   -----------   -----------\\n0   tagger          token.tag                          tag_acc       False\\n\\n1   entity_linker   token.ent_kb_id   doc.ents         nel_micro_f   False\\n                                      doc.sents        nel_micro_r\\n                                      token.ent_iob    nel_micro_p\\n                                      token.ent_type\\n\\n\\n================================ Problems (4) ================================\\n⚠ 'entity_linker' requirements not met: doc.ents, doc.sents,\\ntoken.ent_iob, token.ent_type\\n\"\n          })\n        })]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"keys\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The values to display in the table. Corresponds to attributes of the \", _jsx(_components.a, {\n                href: \"/api/language#factorymeta\",\n                children: _jsx(InlineCode, {\n                  children: \"FactoryMeta\"\n                })\n              }), \". Defaults to \", _jsx(InlineCode, {\n                children: \"[\\\"assigns\\\", \\\"requires\\\", \\\"scores\\\", \\\"retokenizes\\\"]\"\n              }), \". \", _jsx(_components.del, {\n                children: \"List[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"pretty\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Pretty-print the results as a table. Defaults to \", _jsx(InlineCode, {\n                children: \"False\"\n              }), \". \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Dictionary containing the pipe analysis, keyed by \", _jsx(InlineCode, {\n                children: \"\\\"summary\\\"\"\n              }), \" (component meta by pipe), \", _jsx(InlineCode, {\n                children: \"\\\"problems\\\"\"\n              }), \" (attribute names by pipe) and \", _jsx(InlineCode, {\n                children: \"\\\"attrs\\\"\"\n              }), \" (pipes that assign and require an attribute, keyed by attribute). \", _jsx(_components.del, {\n                children: \"Optional[Dict[str, Any]]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-replace_listeners\",\n      children: [_jsx(_components.h2, {\n        id: \"replace_listeners\",\n        tag: \"method\",\n        version: \"3\",\n        children: \"Language.replace_listeners \"\n      }), _jsxs(_components.p, {\n        children: [\"Find \", _jsx(_components.a, {\n          href: \"/usage/embeddings-transformers#embedding-layers\",\n          children: \"listener layers\"\n        }), \"\\n(connecting to a shared token-to-vector embedding component) of a given pipeline\\ncomponent model and replace them with a standalone copy of the token-to-vector\\nlayer. The listener layer allows other components to connect to a shared\\ntoken-to-vector embedding component like \", _jsx(_components.a, {\n          href: \"/api/tok2vec\",\n          children: _jsx(InlineCode, {\n            children: \"Tok2Vec\"\n          })\n        }), \" or\\n\", _jsx(_components.a, {\n          href: \"/api/transformer\",\n          children: _jsx(InlineCode, {\n            children: \"Transformer\"\n          })\n        }), \". Replacing listeners can be useful when\\ntraining a pipeline with components sourced from an existing pipeline: if\\nmultiple components (e.g. tagger, parser, NER) listen to the same\\ntoken-to-vector component, but some of them are frozen and not updated, their\\nperformance may degrade significally as the token-to-vector component is updated\\nwith new data. To prevent this, listeners can be replaced with a standalone\\ntoken-to-vector layer that is owned by the component and doesn’t change if the\\ncomponent isn’t updated.\"]\n      }), _jsxs(_components.p, {\n        children: [\"This method is typically not called directly and only executed under the hood\\nwhen loading a config with\\n\", _jsx(_components.a, {\n          href: \"/usage/training#config-components\",\n          children: \"sourced components\"\n        }), \" that define\\n\", _jsx(InlineCode, {\n          children: \"replace_listeners\"\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            title: \"Example\",\n            children: \"nlp = spacy.load(\\\"en_core_web_sm\\\")\\nnlp.replace_listeners(\\\"tok2vec\\\", \\\"tagger\\\", [\\\"model.tok2vec\\\"])\\n\"\n          })\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            title: \"config.cfg (excerpt)\",\n            children: \"[training]\\nfrozen_components = [\\\"tagger\\\"]\\n\\n[components]\\n\\n[components.tagger]\\nsource = \\\"en_core_web_sm\\\"\\nreplace_listeners = [\\\"model.tok2vec\\\"]\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"tok2vec_name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Name of the token-to-vector component, typically \", _jsx(InlineCode, {\n                children: \"\\\"tok2vec\\\"\"\n              }), \" or \", _jsx(InlineCode, {\n                children: \"\\\"transformer\\\"\"\n              }), \".\", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"pipe_name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Name of pipeline component to replace listeners for. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"listeners\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The paths to the listeners, relative to the component config, e.g. \", _jsx(InlineCode, {\n                children: \"[\\\"model.tok2vec\\\"]\"\n              }), \". Typically, implementations will only connect to one tok2vec component, \", _jsx(InlineCode, {\n                children: \"model.tok2vec\"\n              }), \", but in theory, custom models can use multiple listeners. The value here can either be an empty list to not replace any listeners, or a \", _jsx(_components.em, {\n                children: \"complete\"\n              }), \" list of the paths to all listener layers used by the model that should be replaced.\", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-meta\",\n      children: [_jsx(_components.h2, {\n        id: \"meta\",\n        tag: \"property\",\n        children: \"Language.meta \"\n      }), _jsxs(_components.p, {\n        children: [\"Meta data for the \", _jsx(InlineCode, {\n          children: \"Language\"\n        }), \" class, including name, version, data sources,\\nlicense, author information and more. If a trained pipeline is loaded, this\\ncontains meta data of the pipeline. The \", _jsx(InlineCode, {\n          children: \"Language.meta\"\n        }), \" is also what’s\\nserialized as the \", _jsx(InlineCode, {\n          children: \"meta.json\"\n        }), \" when you save an \", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \" object to disk. See the\\n\", _jsx(_components.a, {\n          href: \"/api/data-formats#meta\",\n          children: \"meta data format\"\n        }), \" for more details.\"]\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        title: \"Changed in v3.0\",\n        children: _jsxs(_components.p, {\n          children: [\"As of v3.0, the meta only contains \", _jsx(_components.strong, {\n            children: \"meta information\"\n          }), \" about the pipeline and\\nisn’t used to construct the language class and pipeline components. This\\ninformation is expressed in the \", _jsx(_components.a, {\n            href: \"/api/data-formats#config\",\n            children: _jsx(InlineCode, {\n              children: \"config.cfg\"\n            })\n          }), \".\"]\n        })\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"print(nlp.meta)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The meta data. \", _jsx(_components.del, {\n                children: \"Dict[str, Any]\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-config\",\n      children: [_jsx(_components.h2, {\n        id: \"config\",\n        tag: \"property\",\n        version: \"3\",\n        children: \"Language.config \"\n      }), _jsxs(_components.p, {\n        children: [\"Export a trainable \", _jsx(_components.a, {\n          href: \"/api/data-formats#config\",\n          children: _jsx(InlineCode, {\n            children: \"config.cfg\"\n          })\n        }), \" for the current\\n\", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \" object. Includes the current pipeline, all configs used to create the\\ncurrently active pipeline components, as well as the default training config\\nthat can be used with \", _jsx(_components.a, {\n          href: \"/api/cli#train\",\n          children: _jsx(InlineCode, {\n            children: \"spacy train\"\n          })\n        }), \". \", _jsx(InlineCode, {\n          children: \"Language.config\"\n        }), \" returns\\na \", _jsxs(_components.a, {\n          href: \"https://thinc.ai/docs/api-config#config\",\n          children: [\"Thinc \", _jsx(InlineCode, {\n            children: \"Config\"\n          }), \" object\"]\n        }), \", which is a\\nsubclass of the built-in \", _jsx(InlineCode, {\n          children: \"dict\"\n        }), \". It supports the additional methods \", _jsx(InlineCode, {\n          children: \"to_disk\"\n        }), \"\\n(serialize the config to a file) and \", _jsx(InlineCode, {\n          children: \"to_str\"\n        }), \" (output the config as a string).\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"nlp.config.to_disk(\\\"./config.cfg\\\")\\nprint(nlp.config.to_str())\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The config. \", _jsx(_components.del, {\n                children: \"Config\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-to_disk\",\n      children: [_jsx(_components.h2, {\n        id: \"to_disk\",\n        tag: \"method\",\n        version: \"2\",\n        children: \"Language.to_disk \"\n      }), _jsxs(_components.p, {\n        children: [\"Save the current state to a directory. Under the hood, this method delegates to\\nthe \", _jsx(InlineCode, {\n          children: \"to_disk\"\n        }), \" methods of the individual pipeline components, if available. This\\nmeans that if a trained pipeline is loaded, all components and their weights\\nwill be saved to disk.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"nlp.to_disk(\\\"/path/to/pipeline\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"path\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A path to a directory, which will be created if it doesn’t exist. Paths may be either strings or \", _jsx(InlineCode, {\n                children: \"Path\"\n              }), \"-like objects. \", _jsx(_components.del, {\n                children: \"Union[str, Path]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Names of pipeline components or \", _jsx(_components.a, {\n                href: \"#serialization-fields\",\n                children: \"serialization fields\"\n              }), \" to exclude. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-from_disk\",\n      children: [_jsx(_components.h2, {\n        id: \"from_disk\",\n        tag: \"method\",\n        version: \"2\",\n        children: \"Language.from_disk \"\n      }), _jsxs(_components.p, {\n        children: [\"Loads state from a directory, including all data that was saved with the\\n\", _jsx(InlineCode, {\n          children: \"Language\"\n        }), \" object. Modifies the object in place and returns it.\"]\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        title: \"Important note\",\n        children: _jsxs(_components.p, {\n          children: [\"Keep in mind that this method \", _jsx(_components.strong, {\n            children: \"only loads the serialized state\"\n          }), \" and doesn’t\\nset up the \", _jsx(InlineCode, {\n            children: \"nlp\"\n          }), \" object. This means that it requires the correct language class\\nto be initialized and all pipeline components to be added to the pipeline. If\\nyou want to load a serialized pipeline from a directory, you should use\\n\", _jsx(_components.a, {\n            href: \"/api/top-level#spacy.load\",\n            children: _jsx(InlineCode, {\n              children: \"spacy.load\"\n            })\n          }), \", which will set everything up for you.\"]\n        })\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.language import Language\\nnlp = Language().from_disk(\\\"/path/to/pipeline\\\")\\n\\n# Using language-specific subclass\\nfrom spacy.lang.en import English\\nnlp = English().from_disk(\\\"/path/to/pipeline\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"path\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A path to a directory. Paths may be either strings or \", _jsx(InlineCode, {\n                children: \"Path\"\n              }), \"-like objects. \", _jsx(_components.del, {\n                children: \"Union[str, Path]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Names of pipeline components or \", _jsx(_components.a, {\n                href: \"#serialization-fields\",\n                children: \"serialization fields\"\n              }), \" to exclude. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The modified \", _jsx(InlineCode, {\n                children: \"Language\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"Language\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-to_bytes\",\n      children: [_jsx(_components.h2, {\n        id: \"to_bytes\",\n        tag: \"method\",\n        children: \"Language.to_bytes \"\n      }), _jsx(_components.p, {\n        children: \"Serialize the current state to a binary string.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"nlp_bytes = nlp.to_bytes()\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Names of pipeline components or \", _jsx(_components.a, {\n                href: \"#serialization-fields\",\n                children: \"serialization fields\"\n              }), \" to exclude. \", _jsx(_components.del, {\n                children: \"iterable\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The serialized form of the \", _jsx(InlineCode, {\n                children: \"Language\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"bytes\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-from_bytes\",\n      children: [_jsx(_components.h2, {\n        id: \"from_bytes\",\n        tag: \"method\",\n        children: \"Language.from_bytes \"\n      }), _jsxs(_components.p, {\n        children: [\"Load state from a binary string. Note that this method is commonly used via the\\nsubclasses like \", _jsx(InlineCode, {\n          children: \"English\"\n        }), \" or \", _jsx(InlineCode, {\n          children: \"German\"\n        }), \" to make language-specific functionality\\nlike the \", _jsx(_components.a, {\n          href: \"/usage/linguistic-features#language-data\",\n          children: \"lexical attribute getters\"\n        }), \"\\navailable to the loaded object.\"]\n      }), _jsxs(_components.p, {\n        children: [\"Note that if you want to serialize and reload a whole pipeline, using this alone\\nwon’t work, you also need to handle the config. See\\n\", _jsx(_components.a, {\n          href: \"https://spacy.io/usage/saving-loading#pipeline\",\n          children: \"“Serializing the pipeline”\"\n        }), \" for\\ndetails.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.lang.en import English\\nnlp_bytes = nlp.to_bytes()\\nnlp2 = English()\\nnlp2.from_bytes(nlp_bytes)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"bytes_data\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The data to load from. \", _jsx(_components.del, {\n                children: \"bytes\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Names of pipeline components or \", _jsx(_components.a, {\n                href: \"#serialization-fields\",\n                children: \"serialization fields\"\n              }), \" to exclude. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The \", _jsx(InlineCode, {\n                children: \"Language\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"Language\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-attributes\",\n      children: [_jsx(_components.h2, {\n        id: \"attributes\",\n        children: \"Attributes \"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vocab\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A container for the lexical types. \", _jsx(_components.del, {\n                children: \"Vocab\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"tokenizer\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The tokenizer. \", _jsx(_components.del, {\n                children: \"Tokenizer\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"make_doc\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Callable that takes a string and returns a \", _jsx(InlineCode, {\n                children: \"Doc\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Callable[[str], Doc]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"pipeline\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"List of \", _jsx(InlineCode, {\n                children: \"(name, component)\"\n              }), \" tuples describing the current processing pipeline, in order. \", _jsx(_components.del, {\n                children: \"List[Tuple[str, Callable[[Doc], Doc]]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"pipe_names\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"List of pipeline component names, in order. \", _jsx(_components.del, {\n                children: \"List[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"pipe_labels\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"List of labels set by the pipeline components, if available, keyed by component name. \", _jsx(_components.del, {\n                children: \"Dict[str, List[str]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"pipe_factories\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Dictionary of pipeline component names, mapped to their factory names. \", _jsx(_components.del, {\n                children: \"Dict[str, str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"factories\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"All available factory functions, keyed by name. \", _jsx(_components.del, {\n                children: \"Dict[str, Callable[[…], Callable[[Doc], Doc]]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"factory_names\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"List of all available factory names. \", _jsx(_components.del, {\n                children: \"List[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"components\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"List of all available \", _jsx(InlineCode, {\n                children: \"(name, component)\"\n              }), \" tuples, including components that are currently disabled. \", _jsx(_components.del, {\n                children: \"List[Tuple[str, Callable[[Doc], Doc]]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"component_names\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"List of all available component names, including components that are currently disabled. \", _jsx(_components.del, {\n                children: \"List[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"disabled\"\n              }), \" \", _jsx(Tag, {\n                variant: \"new\",\n                children: \"3\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"Names of components that are currently disabled and don’t run as part of the pipeline. \", _jsx(_components.del, {\n                children: \"List[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"path\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Path to the pipeline data directory, if a pipeline is loaded from a path or package. Otherwise \", _jsx(InlineCode, {\n                children: \"None\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Optional[Path]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-class-attributes\",\n      children: [_jsx(_components.h2, {\n        id: \"class-attributes\",\n        children: \"Class attributes \"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"Defaults\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Settings, data and factory methods for creating the \", _jsx(InlineCode, {\n                children: \"nlp\"\n              }), \" object and processing pipeline. \", _jsx(_components.del, {\n                children: \"Defaults\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"lang\"\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(_components.a, {\n                href: \"https://www.w3.org/International/articles/language-tags/\",\n                children: \"IETF language tag\"\n              }), \", such as ‘en’ for English. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"default_config\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Base \", _jsx(_components.a, {\n                href: \"/usage/training#config\",\n                children: \"config\"\n              }), \" to use for \", _jsx(_components.a, {\n                href: \"/api/language#config\",\n                children: \"Language.config\"\n              }), \". Defaults to \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/spaCy/tree/master/spacy/default_config.cfg\",\n                children: _jsx(InlineCode, {\n                  children: \"default_config.cfg\"\n                })\n              }), \". \", _jsx(_components.del, {\n                children: \"Config\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-defaults\",\n      children: [_jsx(_components.h2, {\n        id: \"defaults\",\n        children: \"Defaults \"\n      }), _jsxs(_components.p, {\n        children: [\"The following attributes can be set on the \", _jsx(InlineCode, {\n          children: \"Language.Defaults\"\n        }), \" class to\\ncustomize the default language data:\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.language import language\\nfrom spacy.lang.tokenizer_exceptions import URL_MATCH\\nfrom thinc.api import Config\\n\\nDEFAULT_CONFIFG = \\\"\\\"\\\"\\n[nlp.tokenizer]\\n@tokenizers = \\\"MyCustomTokenizer.v1\\\"\\n\\\"\\\"\\\"\\n\\nclass Defaults(Language.Defaults):\\n   stop_words = set()\\n   tokenizer_exceptions = {}\\n   prefixes = tuple()\\n   suffixes = tuple()\\n   infixes = tuple()\\n   token_match = None\\n   url_match = URL_MATCH\\n   lex_attr_getters = {}\\n   syntax_iterators = {}\\n   writing_system = {\\\"direction\\\": \\\"ltr\\\", \\\"has_case\\\": True, \\\"has_letters\\\": True}\\n   config = Config().from_str(DEFAULT_CONFIG)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"stop_words\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"List of stop words, used for \", _jsx(InlineCode, {\n                children: \"Token.is_stop\"\n              }), \".\", _jsx(\"br\", {}), _jsx(_components.strong, {\n                children: \"Example:\"\n              }), \" \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/spaCy/tree/master/spacy/lang/en/stop_words.py\",\n                children: _jsx(InlineCode, {\n                  children: \"stop_words.py\"\n                })\n              }), \" \", _jsx(_components.del, {\n                children: \"Set[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"tokenizer_exceptions\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Tokenizer exception rules, string mapped to list of token attributes.\", _jsx(\"br\", {}), _jsx(_components.strong, {\n                children: \"Example:\"\n              }), \" \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/spaCy/tree/master/spacy/lang/de/tokenizer_exceptions.py\",\n                children: _jsx(InlineCode, {\n                  children: \"de/tokenizer_exceptions.py\"\n                })\n              }), \" \", _jsx(_components.del, {\n                children: \"Dict[str, List[dict]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"prefixes\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"suffixes\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"infixes\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"Prefix, suffix and infix rules for the default tokenizer.\", _jsx(\"br\", {}), _jsx(_components.strong, {\n                children: \"Example:\"\n              }), \" \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/spaCy/tree/master/spacy/lang/punctuation.py\",\n                children: _jsx(InlineCode, {\n                  children: \"puncutation.py\"\n                })\n              }), \" \", _jsx(_components.del, {\n                children: \"Optional[Sequence[Union[str, Pattern]]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"token_match\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Optional regex for matching strings that should never be split, overriding the infix rules.\", _jsx(\"br\", {}), _jsx(_components.strong, {\n                children: \"Example:\"\n              }), \" \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/spaCy/tree/master/spacy/lang/fr/tokenizer_exceptions.py\",\n                children: _jsx(InlineCode, {\n                  children: \"fr/tokenizer_exceptions.py\"\n                })\n              }), \" \", _jsx(_components.del, {\n                children: \"Optional[Callable]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"url_match\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Regular expression for matching URLs. Prefixes and suffixes are removed before applying the match.\", _jsx(\"br\", {}), _jsx(_components.strong, {\n                children: \"Example:\"\n              }), \" \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/spaCy/tree/master/spacy/lang/tokenizer_exceptions.py\",\n                children: _jsx(InlineCode, {\n                  children: \"tokenizer_exceptions.py\"\n                })\n              }), \" \", _jsx(_components.del, {\n                children: \"Optional[Callable]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"lex_attr_getters\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Custom functions for setting lexical attributes on tokens, e.g. \", _jsx(InlineCode, {\n                children: \"like_num\"\n              }), \".\", _jsx(\"br\", {}), _jsx(_components.strong, {\n                children: \"Example:\"\n              }), \" \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/spaCy/tree/master/spacy/lang/en/lex_attrs.py\",\n                children: _jsx(InlineCode, {\n                  children: \"lex_attrs.py\"\n                })\n              }), \" \", _jsx(_components.del, {\n                children: \"Dict[int, Callable[[str], Any]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"syntax_iterators\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Functions that compute views of a \", _jsx(InlineCode, {\n                children: \"Doc\"\n              }), \" object based on its syntax. At the moment, only used for \", _jsx(_components.a, {\n                href: \"/usage/linguistic-features#noun-chunks\",\n                children: \"noun chunks\"\n              }), \".\", _jsx(\"br\", {}), _jsx(_components.strong, {\n                children: \"Example:\"\n              }), \" \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/spaCy/tree/master/spacy/lang/en/syntax_iterators.py\",\n                children: _jsx(InlineCode, {\n                  children: \"syntax_iterators.py\"\n                })\n              }), \". \", _jsx(_components.del, {\n                children: \"Dict[str, Callable[[Union[Doc, Span]], Iterator[Span]]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"writing_system\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Information about the language’s writing system, available via \", _jsx(InlineCode, {\n                children: \"Vocab.writing_system\"\n              }), \". Defaults to: \", _jsx(InlineCode, {\n                children: \"{\\\"direction\\\": \\\"ltr\\\", \\\"has_case\\\": True, \\\"has_letters\\\": True}.\"\n              }), \".\", _jsx(\"br\", {}), _jsx(_components.strong, {\n                children: \"Example:\"\n              }), \" \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/spaCy/tree/master/spacy/lang/zh/__init__.py\",\n                children: _jsx(InlineCode, {\n                  children: \"zh/__init__.py\"\n                })\n              }), \" \", _jsx(_components.del, {\n                children: \"Dict[str, Any]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"config\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Default \", _jsx(_components.a, {\n                href: \"/usage/training#config\",\n                children: \"config\"\n              }), \" added to \", _jsx(InlineCode, {\n                children: \"nlp.config\"\n              }), \". This can include references to custom tokenizers or lemmatizers.\", _jsx(\"br\", {}), _jsx(_components.strong, {\n                children: \"Example:\"\n              }), \" \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/spaCy/tree/master/spacy/lang/zh/__init__.py\",\n                children: _jsx(InlineCode, {\n                  children: \"zh/__init__.py\"\n                })\n              }), \" \", _jsx(_components.del, {\n                children: \"Config\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-serialization-fields\",\n      children: [_jsx(_components.h2, {\n        id: \"serialization-fields\",\n        children: \"Serialization fields \"\n      }), _jsxs(_components.p, {\n        children: [\"During serialization, spaCy will export several data fields used to restore\\ndifferent aspects of the object. If needed, you can exclude them from\\nserialization by passing in the string names via the \", _jsx(InlineCode, {\n          children: \"exclude\"\n        }), \" argument.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"data = nlp.to_bytes(exclude=[\\\"tokenizer\\\", \\\"vocab\\\"])\\nnlp.from_disk(\\\"/pipeline\\\", exclude=[\\\"ner\\\"])\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vocab\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The shared \", _jsx(_components.a, {\n                href: \"/api/vocab\",\n                children: _jsx(InlineCode, {\n                  children: \"Vocab\"\n                })\n              }), \".\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"tokenizer\"\n              })\n            }), _jsx(_components.td, {\n              children: \"Tokenization rules and exceptions.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"meta\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The meta data, available as \", _jsx(_components.a, {\n                href: \"/api/language#meta\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.meta\"\n                })\n              }), \".\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: \"…\"\n            }), _jsxs(_components.td, {\n              children: [\"String names of pipeline components, e.g. \", _jsx(InlineCode, {\n                children: \"\\\"ner\\\"\"\n              }), \".\"]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-factorymeta\",\n      children: [_jsx(_components.h2, {\n        id: \"factorymeta\",\n        version: \"3\",\n        tag: \"dataclass\",\n        children: \"FactoryMeta \"\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"FactoryMeta\"\n        }), \" contains the information about the component and its default\\nprovided by the \", _jsx(_components.a, {\n          href: \"/api/language#component\",\n          children: _jsx(InlineCode, {\n            children: \"@Language.component\"\n          })\n        }), \" or\\n\", _jsx(_components.a, {\n          href: \"/api/language#factory\",\n          children: _jsx(InlineCode, {\n            children: \"@Language.factory\"\n          })\n        }), \" decorator. It’s created whenever a\\ncomponent is defined and stored on the \", _jsx(InlineCode, {\n          children: \"Language\"\n        }), \" class for each component\\ninstance and factory instance.\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"factory\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The name of the registered component factory. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"default_config\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The default config, describing the default values of the factory arguments. \", _jsx(_components.del, {\n                children: \"Dict[str, Any]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"assigns\"\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"Doc\"\n              }), \" or \", _jsx(InlineCode, {\n                children: \"Token\"\n              }), \" attributes assigned by this component, e.g. \", _jsx(InlineCode, {\n                children: \"[\\\"token.ent_id\\\"]\"\n              }), \". Used for \", _jsx(_components.a, {\n                href: \"/usage/processing-pipelines#analysis\",\n                children: \"pipe analysis\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"requires\"\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"Doc\"\n              }), \" or \", _jsx(InlineCode, {\n                children: \"Token\"\n              }), \" attributes required by this component, e.g. \", _jsx(InlineCode, {\n                children: \"[\\\"token.ent_id\\\"]\"\n              }), \". Used for \", _jsx(_components.a, {\n                href: \"/usage/processing-pipelines#analysis\",\n                children: \"pipe analysis\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"retokenizes\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether the component changes tokenization. Used for \", _jsx(_components.a, {\n                href: \"/usage/processing-pipelines#analysis\",\n                children: \"pipe analysis\"\n              }), \". \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"default_score_weights\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The scores to report during training, and their default weight towards the final score used to select the best model. Weights should sum to \", _jsx(InlineCode, {\n                children: \"1.0\"\n              }), \" per component and will be combined and normalized for the whole pipeline. If a weight is set to \", _jsx(InlineCode, {\n                children: \"None\"\n              }), \", the score will not be logged or weighted. \", _jsx(_components.del, {\n                children: \"Dict[str, Optional[float]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"scores\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"All scores set by the components if it’s trainable, e.g. \", _jsx(InlineCode, {\n                children: \"[\\\"ents_f\\\", \\\"ents_r\\\", \\\"ents_p\\\"]\"\n              }), \". Based on the \", _jsx(InlineCode, {\n                children: \"default_score_weights\"\n              }), \" and used for \", _jsx(_components.a, {\n                href: \"/usage/processing-pipelines#analysis\",\n                children: \"pipe analysis\"\n              }), \". \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Language","teaser":"A text-processing pipeline","tag":"class","source":"spacy/language.py"},"scope":{}},"sectionTitle":"API Documentation","theme":"green","section":"api","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false,"next":null},"__N_SSG":true}