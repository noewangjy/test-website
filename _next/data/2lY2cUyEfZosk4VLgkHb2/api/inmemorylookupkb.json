{"pageProps":{"title":"InMemoryLookupKB","teaser":"The default implementation of the KnowledgeBase interface. Stores all information in-memory.","tag":"class","source":"spacy/kb/kb_in_memory.pyx","version":3.5,"slug":"/api/inmemorylookupkb","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    pre: \"pre\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    del: \"del\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {InlineCode} = _components;\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.section, {\n      children: _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"InMemoryLookupKB\"\n        }), \" class inherits from \", _jsx(_components.a, {\n          href: \"/api/kb\",\n          children: _jsx(InlineCode, {\n            children: \"KnowledgeBase\"\n          })\n        }), \" and\\nimplements all of its methods. It stores all KB data in-memory and generates\\n\", _jsx(_components.a, {\n          href: \"/api/kb#candidate\",\n          children: _jsx(InlineCode, {\n            children: \"Candidate\"\n          })\n        }), \" objects by exactly matching mentions with\\nentity names. Itâ€™s highly optimized for both a low memory footprint and speed of\\nretrieval.\"]\n      })\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-init\",\n      children: [_jsx(_components.h2, {\n        id: \"init\",\n        tag: \"method\",\n        children: \"InMemoryLookupKB.__init__ \"\n      }), _jsx(_components.p, {\n        children: \"Create the knowledge base.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.kb import InMemoryLookupKB\\nvocab = nlp.vocab\\nkb = InMemoryLookupKB(vocab=vocab, entity_vector_length=64)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vocab\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The shared vocabulary. \", _jsx(_components.del, {\n                children: \"Vocab\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entity_vector_length\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Length of the fixed-size entity vectors. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-entity_vector_length\",\n      children: [_jsx(_components.h2, {\n        id: \"entity_vector_length\",\n        tag: \"property\",\n        children: \"InMemoryLookupKB.entity_vector_length \"\n      }), _jsx(_components.p, {\n        children: \"The length of the fixed-size entity vectors in the knowledge base.\"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Length of the fixed-size entity vectors. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-add_entity\",\n      children: [_jsx(_components.h2, {\n        id: \"add_entity\",\n        tag: \"method\",\n        children: \"InMemoryLookupKB.add_entity \"\n      }), _jsxs(_components.p, {\n        children: [\"Add an entity to the knowledge base, specifying its corpus frequency and entity\\nvector, which should be of length\\n\", _jsx(_components.a, {\n          href: \"/api/inmemorylookupkb#entity_vector_length\",\n          children: _jsx(InlineCode, {\n            children: \"entity_vector_length\"\n          })\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"kb.add_entity(entity=\\\"Q42\\\", freq=32, entity_vector=vector1)\\nkb.add_entity(entity=\\\"Q463035\\\", freq=111, entity_vector=vector2)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entity\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The unique entity identifier. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"freq\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The frequency of the entity in a typical corpus. \", _jsx(_components.del, {\n                children: \"float\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entity_vector\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The pretrained vector of the entity. \", _jsx(_components.del, {\n                children: \"numpy.ndarray\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-set_entities\",\n      children: [_jsx(_components.h2, {\n        id: \"set_entities\",\n        tag: \"method\",\n        children: \"InMemoryLookupKB.set_entities \"\n      }), _jsx(_components.p, {\n        children: \"Define the full list of entities in the knowledge base, specifying the corpus\\nfrequency and entity vector for each entity.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"kb.set_entities(entity_list=[\\\"Q42\\\", \\\"Q463035\\\"], freq_list=[32, 111], vector_list=[vector1, vector2])\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entity_list\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"List of unique entity identifiers. \", _jsx(_components.del, {\n                children: \"Iterable[Union[str, int]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"freq_list\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"List of entity frequencies. \", _jsx(_components.del, {\n                children: \"Iterable[int]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"vector_list\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"List of entity vectors. \", _jsx(_components.del, {\n                children: \"Iterable[numpy.ndarray]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-add_alias\",\n      children: [_jsx(_components.h2, {\n        id: \"add_alias\",\n        tag: \"method\",\n        children: \"InMemoryLookupKB.add_alias \"\n      }), _jsxs(_components.p, {\n        children: [\"Add an alias or mention to the knowledge base, specifying its potential KB\\nidentifiers and their prior probabilities. The entity identifiers should refer\\nto entities previously added with\\n\", _jsx(_components.a, {\n          href: \"/api/inmemorylookupkb#add_entity\",\n          children: _jsx(InlineCode, {\n            children: \"add_entity\"\n          })\n        }), \" or\\n\", _jsx(_components.a, {\n          href: \"/api/inmemorylookupkb#set_entities\",\n          children: _jsx(InlineCode, {\n            children: \"set_entities\"\n          })\n        }), \". The sum of the prior\\nprobabilities should not exceed 1. Note that an empty string can not be used as\\nalias.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"kb.add_alias(alias=\\\"Douglas\\\", entities=[\\\"Q42\\\", \\\"Q463035\\\"], probabilities=[0.6, 0.3])\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"alias\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The textual mention or alias. Can not be the empty string. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entities\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The potential entities that the alias may refer to. \", _jsx(_components.del, {\n                children: \"Iterable[Union[str, int]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"probabilities\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The prior probabilities of each entity. \", _jsx(_components.del, {\n                children: \"Iterable[float]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-len\",\n      children: [_jsx(_components.h2, {\n        id: \"len\",\n        tag: \"method\",\n        children: \"InMemoryLookupKB.__len__ \"\n      }), _jsx(_components.p, {\n        children: \"Get the total number of entities in the knowledge base.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"total_entities = len(kb)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of entities in the knowledge base. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_entity_strings\",\n      children: [_jsx(_components.h2, {\n        id: \"get_entity_strings\",\n        tag: \"method\",\n        children: \"InMemoryLookupKB.get_entity_strings \"\n      }), _jsx(_components.p, {\n        children: \"Get a list of all entity IDs in the knowledge base.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"all_entities = kb.get_entity_strings()\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The list of entities in the knowledge base. \", _jsx(_components.del, {\n                children: \"List[str]\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_size_aliases\",\n      children: [_jsx(_components.h2, {\n        id: \"get_size_aliases\",\n        tag: \"method\",\n        children: \"InMemoryLookupKB.get_size_aliases \"\n      }), _jsx(_components.p, {\n        children: \"Get the total number of aliases in the knowledge base.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"total_aliases = kb.get_size_aliases()\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of aliases in the knowledge base. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_alias_strings\",\n      children: [_jsx(_components.h2, {\n        id: \"get_alias_strings\",\n        tag: \"method\",\n        children: \"InMemoryLookupKB.get_alias_strings \"\n      }), _jsx(_components.p, {\n        children: \"Get a list of all aliases in the knowledge base.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"all_aliases = kb.get_alias_strings()\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The list of aliases in the knowledge base. \", _jsx(_components.del, {\n                children: \"List[str]\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_candidates\",\n      children: [_jsx(_components.h2, {\n        id: \"get_candidates\",\n        tag: \"method\",\n        children: \"InMemoryLookupKB.get_candidates \"\n      }), _jsxs(_components.p, {\n        children: [\"Given a certain textual mention as input, retrieve a list of candidate entities\\nof type \", _jsx(_components.a, {\n          href: \"/api/kb#candidate\",\n          children: _jsx(InlineCode, {\n            children: \"Candidate\"\n          })\n        }), \". Wraps\\n\", _jsx(_components.a, {\n          href: \"/api/inmemorylookupkb#get_alias_candidates\",\n          children: _jsx(InlineCode, {\n            children: \"get_alias_candidates()\"\n          })\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.lang.en import English\\nnlp = English()\\ndoc = nlp(\\\"Douglas Adams wrote 'The Hitchhiker's Guide to the Galaxy'.\\\")\\ncandidates = kb.get_candidates(doc[0:2])\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"mention\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The textual mention or alias. \", _jsx(_components.del, {\n                children: \"Span\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"An iterable of relevant \", _jsx(InlineCode, {\n                children: \"Candidate\"\n              }), \" objects. \", _jsx(_components.del, {\n                children: \"Iterable[Candidate]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_candidates_batch\",\n      children: [_jsx(_components.h2, {\n        id: \"get_candidates_batch\",\n        tag: \"method\",\n        children: \"InMemoryLookupKB.get_candidates_batch \"\n      }), _jsxs(_components.p, {\n        children: [\"Same as \", _jsx(_components.a, {\n          href: \"/api/inmemorylookupkb#get_candidates\",\n          children: _jsx(InlineCode, {\n            children: \"get_candidates()\"\n          })\n        }), \", but for an\\narbitrary number of mentions. The \", _jsx(_components.a, {\n          href: \"/api/entitylinker\",\n          children: _jsx(InlineCode, {\n            children: \"EntityLinker\"\n          })\n        }), \" component\\nwill call \", _jsx(InlineCode, {\n          children: \"get_candidates_batch()\"\n        }), \" instead of \", _jsx(InlineCode, {\n          children: \"get_candidates()\"\n        }), \", if the config\\nparameter \", _jsx(InlineCode, {\n          children: \"candidates_batch_size\"\n        }), \" is greater or equal than 1.\"]\n      }), _jsxs(_components.p, {\n        children: [\"The default implementation of \", _jsx(InlineCode, {\n          children: \"get_candidates_batch()\"\n        }), \" executes\\n\", _jsx(InlineCode, {\n          children: \"get_candidates()\"\n        }), \" in a loop. We recommend implementing a more efficient way to\\nretrieve candidates for multiple mentions at once, if performance is of concern\\nto you.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.lang.en import English\\nnlp = English()\\ndoc = nlp(\\\"Douglas Adams wrote 'The Hitchhiker's Guide to the Galaxy'.\\\")\\ncandidates = kb.get_candidates((doc[0:2], doc[3:]))\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"mentions\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The textual mention or alias. \", _jsx(_components.del, {\n                children: \"Iterable[Span]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"An iterable of iterable with relevant \", _jsx(InlineCode, {\n                children: \"Candidate\"\n              }), \" objects. \", _jsx(_components.del, {\n                children: \"Iterable[Iterable[Candidate]]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_alias_candidates\",\n      children: [_jsx(_components.h2, {\n        id: \"get_alias_candidates\",\n        tag: \"method\",\n        children: \"InMemoryLookupKB.get_alias_candidates \"\n      }), _jsxs(_components.p, {\n        children: [\"Given a certain textual mention as input, retrieve a list of candidate entities\\nof type \", _jsx(_components.a, {\n          href: \"/api/kb#candidate\",\n          children: _jsx(InlineCode, {\n            children: \"Candidate\"\n          })\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"candidates = kb.get_alias_candidates(\\\"Douglas\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"alias\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The textual mention or alias. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The list of relevant \", _jsx(InlineCode, {\n                children: \"Candidate\"\n              }), \" objects. \", _jsx(_components.del, {\n                children: \"List[Candidate]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_vector\",\n      children: [_jsx(_components.h2, {\n        id: \"get_vector\",\n        tag: \"method\",\n        children: \"InMemoryLookupKB.get_vector \"\n      }), _jsx(_components.p, {\n        children: \"Given a certain entity ID, retrieve its pretrained entity vector.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"vector = kb.get_vector(\\\"Q42\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entity\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The entity ID. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The entity vector. \", _jsx(_components.del, {\n                children: \"numpy.ndarray\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_vectors\",\n      children: [_jsx(_components.h2, {\n        id: \"get_vectors\",\n        tag: \"method\",\n        children: \"InMemoryLookupKB.get_vectors \"\n      }), _jsxs(_components.p, {\n        children: [\"Same as \", _jsx(_components.a, {\n          href: \"/api/inmemorylookupkb#get_vector\",\n          children: _jsx(InlineCode, {\n            children: \"get_vector()\"\n          })\n        }), \", but for an arbitrary\\nnumber of entity IDs.\"]\n      }), _jsxs(_components.p, {\n        children: [\"The default implementation of \", _jsx(InlineCode, {\n          children: \"get_vectors()\"\n        }), \" executes \", _jsx(InlineCode, {\n          children: \"get_vector()\"\n        }), \" in a loop.\\nWe recommend implementing a more efficient way to retrieve vectors for multiple\\nentities at once, if performance is of concern to you.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"vectors = kb.get_vectors((\\\"Q42\\\", \\\"Q3107329\\\"))\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entities\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The entity IDs. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The entity vectors. \", _jsx(_components.del, {\n                children: \"Iterable[Iterable[numpy.ndarray]]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-get_prior_prob\",\n      children: [_jsx(_components.h2, {\n        id: \"get_prior_prob\",\n        tag: \"method\",\n        children: \"InMemoryLookupKB.get_prior_prob \"\n      }), _jsx(_components.p, {\n        children: \"Given a certain entity ID and a certain textual mention, retrieve the prior\\nprobability of the fact that the mention links to the entity ID.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"probability = kb.get_prior_prob(\\\"Q42\\\", \\\"Douglas\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"entity\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The entity ID. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"alias\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The textual mention or alias. \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The prior probability of the \", _jsx(InlineCode, {\n                children: \"alias\"\n              }), \" referring to the \", _jsx(InlineCode, {\n                children: \"entity\"\n              }), \". \", _jsx(_components.del, {\n                children: \"float\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-to_disk\",\n      children: [_jsx(_components.h2, {\n        id: \"to_disk\",\n        tag: \"method\",\n        children: \"InMemoryLookupKB.to_disk \"\n      }), _jsx(_components.p, {\n        children: \"Save the current state of the knowledge base to a directory.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"kb.to_disk(path)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"path\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A path to a directory, which will be created if it doesnâ€™t exist. Paths may be either strings or \", _jsx(InlineCode, {\n                children: \"Path\"\n              }), \"-like objects. \", _jsx(_components.del, {\n                children: \"Union[str, Path]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"List of components to exclude. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-from_disk\",\n      children: [_jsx(_components.h2, {\n        id: \"from_disk\",\n        tag: \"method\",\n        children: \"InMemoryLookupKB.from_disk \"\n      }), _jsxs(_components.p, {\n        children: [\"Restore the state of the knowledge base from a given directory. Note that the\\n\", _jsx(_components.a, {\n          href: \"/api/vocab\",\n          children: _jsx(InlineCode, {\n            children: \"Vocab\"\n          })\n        }), \" should also be the same as the one used to create the KB.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.vocab import Vocab\\nvocab = Vocab().from_disk(\\\"/path/to/vocab\\\")\\nkb = FullyImplementedKB(vocab=vocab, entity_vector_length=64)\\nkb.from_disk(\\\"/path/to/kb\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"loc\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A path to a directory. Paths may be either strings or \", _jsx(InlineCode, {\n                children: \"Path\"\n              }), \"-like objects. \", _jsx(_components.del, {\n                children: \"Union[str, Path]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"List of components to exclude. \", _jsx(_components.del, {\n                children: \"Iterable[str]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The modified \", _jsx(InlineCode, {\n                children: \"KnowledgeBase\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"KnowledgeBase\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"InMemoryLookupKB","teaser":"The default implementation of the KnowledgeBase interface. Stores all information in-memory.","tag":"class","source":"spacy/kb/kb_in_memory.pyx","version":3.5},"scope":{}},"sectionTitle":"API Documentation","theme":"green","section":"api","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false,"next":null},"__N_SSG":true}