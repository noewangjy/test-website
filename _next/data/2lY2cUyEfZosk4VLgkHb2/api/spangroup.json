{"pageProps":{"title":"SpanGroup","tag":"class","source":"spacy/tokens/span_group.pyx","version":3,"slug":"/api/spangroup","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    pre: \"pre\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    del: \"del\",\n    em: \"em\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {InlineCode, Infobox} = _components;\n  if (!Infobox) _missingMdxReference(\"Infobox\", true);\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.section, {\n      children: _jsxs(_components.p, {\n        children: [\"A group of arbitrary, potentially overlapping \", _jsx(_components.a, {\n          href: \"/api/span\",\n          children: _jsx(InlineCode, {\n            children: \"Span\"\n          })\n        }), \" objects that\\nall belong to the same \", _jsx(_components.a, {\n          href: \"/api/doc\",\n          children: _jsx(InlineCode, {\n            children: \"Doc\"\n          })\n        }), \" object. The group can be named, and you\\ncan attach additional attributes to it. Span groups are generally accessed via\\nthe \", _jsx(_components.a, {\n          href: \"/api/doc#spans\",\n          children: _jsx(InlineCode, {\n            children: \"Doc.spans\"\n          })\n        }), \" attribute, which will convert lists of spans\\ninto a \", _jsx(InlineCode, {\n          children: \"SpanGroup\"\n        }), \" object for you automatically on assignment. \", _jsx(InlineCode, {\n          children: \"SpanGroup\"\n        }), \"\\nobjects behave similar to \", _jsx(InlineCode, {\n          children: \"list\"\n        }), \"s, so you can append \", _jsx(InlineCode, {\n          children: \"Span\"\n        }), \" objects to them or\\naccess a member at a given index.\"]\n      })\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-init\",\n      children: [_jsx(_components.h2, {\n        id: \"init\",\n        tag: \"method\",\n        children: \"SpanGroup.__init__ \"\n      }), _jsxs(_components.p, {\n        children: [\"Create a \", _jsx(InlineCode, {\n          children: \"SpanGroup\"\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"Their goi ng home\\\")\\nspans = [doc[0:1], doc[1:3]]\\n\\n# Construction 1\\nfrom spacy.tokens import SpanGroup\\n\\ngroup = SpanGroup(doc, name=\\\"errors\\\", spans=spans, attrs={\\\"annotator\\\": \\\"matt\\\"})\\ndoc.spans[\\\"errors\\\"] = group\\n\\n# Construction 2\\ndoc.spans[\\\"errors\\\"] = spans\\nassert isinstance(doc.spans[\\\"errors\\\"], SpanGroup)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"doc\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The document the span group belongs to. \", _jsx(_components.del, {\n                children: \"Doc\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.em, {\n                children: \"keyword-only\"\n              })\n            }), _jsx(_components.td, {})]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"name\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The name of the span group. If the span group is created automatically on assignment to \", _jsx(InlineCode, {\n                children: \"doc.spans\"\n              }), \", the key name is used. Defaults to \", _jsx(InlineCode, {\n                children: \"\\\"\\\"\"\n              }), \". \", _jsx(_components.del, {\n                children: \"str\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"attrs\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Optional JSON-serializable attributes to attach to the span group. \", _jsx(_components.del, {\n                children: \"Dict[str, Any]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"spans\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The spans to add to the span group. \", _jsx(_components.del, {\n                children: \"Iterable[Span]\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-doc\",\n      children: [_jsx(_components.h2, {\n        id: \"doc\",\n        tag: \"property\",\n        children: \"SpanGroup.doc \"\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.a, {\n          href: \"/api/doc\",\n          children: _jsx(InlineCode, {\n            children: \"Doc\"\n          })\n        }), \" object the span group is referring to.\"]\n      }), _jsx(Infobox, {\n        title: \"SpanGroup and Doc lifecycle\",\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"When a \", _jsx(InlineCode, {\n            children: \"Doc\"\n          }), \" object is garbage collected, any related \", _jsx(InlineCode, {\n            children: \"SpanGroup\"\n          }), \" object won’t\\nbe functional anymore, as these objects use a \", _jsx(InlineCode, {\n            children: \"weakref\"\n          }), \" to refer to the\\ndocument. An error will be raised as the internal \", _jsx(InlineCode, {\n            children: \"doc\"\n          }), \" object will be \", _jsx(InlineCode, {\n            children: \"None\"\n          }), \".\\nTo avoid this, make sure that the original \", _jsx(InlineCode, {\n            children: \"Doc\"\n          }), \" objects are still available in\\nthe scope of your function.\"]\n        })\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"Their goi ng home\\\")\\ndoc.spans[\\\"errors\\\"] = [doc[0:1], doc[1:3]]\\nassert doc.spans[\\\"errors\\\"].doc == doc\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The reference document. \", _jsx(_components.del, {\n                children: \"Doc\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-has_overlap\",\n      children: [_jsx(_components.h2, {\n        id: \"has_overlap\",\n        tag: \"property\",\n        children: \"SpanGroup.has_overlap \"\n      }), _jsx(_components.p, {\n        children: \"Check whether the span group contains overlapping spans.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"Their goi ng home\\\")\\ndoc.spans[\\\"errors\\\"] = [doc[0:1], doc[1:3]]\\nassert not doc.spans[\\\"errors\\\"].has_overlap\\ndoc.spans[\\\"errors\\\"].append(doc[2:4])\\nassert doc.spans[\\\"errors\\\"].has_overlap\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Whether the span group contains overlaps. \", _jsx(_components.del, {\n                children: \"bool\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-len\",\n      children: [_jsx(_components.h2, {\n        id: \"len\",\n        tag: \"method\",\n        children: \"SpanGroup.__len__ \"\n      }), _jsx(_components.p, {\n        children: \"Get the number of spans in the group.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"Their goi ng home\\\")\\ndoc.spans[\\\"errors\\\"] = [doc[0:1], doc[1:3]]\\nassert len(doc.spans[\\\"errors\\\"]) == 2\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The number of spans in the group. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-getitem\",\n      children: [_jsx(_components.h2, {\n        id: \"getitem\",\n        tag: \"method\",\n        children: \"SpanGroup.__getitem__ \"\n      }), _jsx(_components.p, {\n        children: \"Get a span from the group. Note that a copy of the span is returned, so if any\\nchanges are made to this span, they are not reflected in the corresponding\\nmember of the span group. The item or group will need to be reassigned for\\nchanges to be reflected in the span group.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"Their goi ng home\\\")\\ndoc.spans[\\\"errors\\\"] = [doc[0:1], doc[1:3]]\\nspan = doc.spans[\\\"errors\\\"][1]\\nassert span.text == \\\"goi ng\\\"\\nspan.label_ = 'LABEL'\\nassert doc.spans[\\\"errors\\\"][1].label_ != 'LABEL' # The span within the group was not updated\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"i\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The item index. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The span at the given index. \", _jsx(_components.del, {\n                children: \"Span\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-setitem\",\n      children: [_jsx(_components.h2, {\n        id: \"setitem\",\n        tag: \"method\",\n        version: \"3.3\",\n        children: \"SpanGroup.__setitem__ \"\n      }), _jsx(_components.p, {\n        children: \"Set a span in the span group.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"Their goi ng home\\\")\\ndoc.spans[\\\"errors\\\"] = [doc[0:1], doc[1:3]]\\nspan = doc[0:2]\\ndoc.spans[\\\"errors\\\"][0] = span\\nassert doc.spans[\\\"errors\\\"][0].text == \\\"Their goi\\\"\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"i\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The item index. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"span\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The new value. \", _jsx(_components.del, {\n                children: \"Span\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-delitem\",\n      children: [_jsx(_components.h2, {\n        id: \"delitem\",\n        tag: \"method\",\n        version: \"3.3\",\n        children: \"SpanGroup.__delitem__ \"\n      }), _jsx(_components.p, {\n        children: \"Delete a span from the span group.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"Their goi ng home\\\")\\ndoc.spans[\\\"errors\\\"] = [doc[0:1], doc[1:3]]\\ndel doc.spans[0]\\nassert len(doc.spans[\\\"errors\\\"]) == 1\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"i\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The item index. \", _jsx(_components.del, {\n                children: \"int\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-add\",\n      children: [_jsx(_components.h2, {\n        id: \"add\",\n        tag: \"method\",\n        version: \"3.3\",\n        children: \"SpanGroup.__add__ \"\n      }), _jsxs(_components.p, {\n        children: [\"Concatenate the current span group with another span group and return the result\\nin a new span group. Any \", _jsx(InlineCode, {\n          children: \"attrs\"\n        }), \" from the first span group will have precedence\\nover \", _jsx(InlineCode, {\n          children: \"attrs\"\n        }), \" in the second.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"Their goi ng home\\\")\\ndoc.spans[\\\"errors\\\"] = [doc[0:1], doc[1:3]]\\ndoc.spans[\\\"other\\\"] = [doc[0:2], doc[2:4]]\\nspan_group = doc.spans[\\\"errors\\\"] + doc.spans[\\\"other\\\"]\\nassert len(span_group) == 4\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"other\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The span group or spans to concatenate. \", _jsx(_components.del, {\n                children: \"Union[SpanGroup, Iterable[Span]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The new span group. \", _jsx(_components.del, {\n                children: \"SpanGroup\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-iadd\",\n      children: [_jsx(_components.h2, {\n        id: \"iadd\",\n        tag: \"method\",\n        version: \"3.3\",\n        children: \"SpanGroup.__iadd__ \"\n      }), _jsxs(_components.p, {\n        children: [\"Append an iterable of spans or the content of a span group to the current span\\ngroup. Any \", _jsx(InlineCode, {\n          children: \"attrs\"\n        }), \" in the other span group will be added for keys that are not\\nalready present in the current span group.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"Their goi ng home\\\")\\ndoc.spans[\\\"errors\\\"] = [doc[0:1], doc[1:3]]\\ndoc.spans[\\\"errors\\\"] += [doc[3:4], doc[2:3]]\\nassert len(doc.spans[\\\"errors\\\"]) == 4\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"other\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The span group or spans to append. \", _jsx(_components.del, {\n                children: \"Union[SpanGroup, Iterable[Span]]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The span group. \", _jsx(_components.del, {\n                children: \"SpanGroup\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-iter\",\n      children: [_jsx(_components.h2, {\n        id: \"iter\",\n        tag: \"method\",\n        version: \"3.5\",\n        children: \"SpanGroup.__iter__ \"\n      }), _jsx(_components.p, {\n        children: \"Iterate over the spans in this span group.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"Their goi ng home\\\")\\ndoc.spans[\\\"errors\\\"] = [doc[0:1], doc[1:3]]\\nfor error_span in doc.spans[\\\"errors\\\"]:\\n    print(error_span)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"YIELDS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A span in this span group. \", _jsx(_components.del, {\n                children: \"Span\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-append\",\n      children: [_jsx(_components.h2, {\n        id: \"append\",\n        tag: \"method\",\n        children: \"SpanGroup.append \"\n      }), _jsxs(_components.p, {\n        children: [\"Add a \", _jsx(_components.a, {\n          href: \"/api/span\",\n          children: _jsx(InlineCode, {\n            children: \"Span\"\n          })\n        }), \" object to the group. The span must refer to the same\\n\", _jsx(_components.a, {\n          href: \"/api/doc\",\n          children: _jsx(InlineCode, {\n            children: \"Doc\"\n          })\n        }), \" object as the span group.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"Their goi ng home\\\")\\ndoc.spans[\\\"errors\\\"] = [doc[0:1]]\\ndoc.spans[\\\"errors\\\"].append(doc[1:3])\\nassert len(doc.spans[\\\"errors\\\"]) == 2\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"span\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The span to append. \", _jsx(_components.del, {\n                children: \"Span\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-extend\",\n      children: [_jsx(_components.h2, {\n        id: \"extend\",\n        tag: \"method\",\n        children: \"SpanGroup.extend \"\n      }), _jsxs(_components.p, {\n        children: [\"Add multiple \", _jsx(_components.a, {\n          href: \"/api/span\",\n          children: _jsx(InlineCode, {\n            children: \"Span\"\n          })\n        }), \" objects or contents of another \", _jsx(InlineCode, {\n          children: \"SpanGroup\"\n        }), \" to\\nthe group. All spans must refer to the same \", _jsx(_components.a, {\n          href: \"/api/doc\",\n          children: _jsx(InlineCode, {\n            children: \"Doc\"\n          })\n        }), \" object as the span\\ngroup.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"Their goi ng home\\\")\\ndoc.spans[\\\"errors\\\"] = []\\ndoc.spans[\\\"errors\\\"].extend([doc[1:3], doc[0:1]])\\nassert len(doc.spans[\\\"errors\\\"]) == 2\\nspan_group = SpanGroup(doc, spans=[doc[1:4], doc[0:3]])\\ndoc.spans[\\\"errors\\\"].extend(span_group)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"spans\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The spans to add. \", _jsx(_components.del, {\n                children: \"Union[SpanGroup, Iterable[“Span”]]\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-copy\",\n      children: [_jsx(_components.h2, {\n        id: \"copy\",\n        tag: \"method\",\n        version: \"3.3\",\n        children: \"SpanGroup.copy \"\n      }), _jsx(_components.p, {\n        children: \"Return a copy of the span group.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.tokens import SpanGroup\\n\\ndoc = nlp(\\\"Their goi ng home\\\")\\ndoc.spans[\\\"errors\\\"] = [doc[1:3], doc[0:3]]\\nnew_group = doc.spans[\\\"errors\\\"].copy()\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"doc\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The document to which the copy is bound. Defaults to \", _jsx(InlineCode, {\n                children: \"None\"\n              }), \" for the current doc. \", _jsx(_components.del, {\n                children: \"Optional[Doc]\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A copy of the \", _jsx(InlineCode, {\n                children: \"SpanGroup\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"SpanGroup\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-to_bytes\",\n      children: [_jsx(_components.h2, {\n        id: \"to_bytes\",\n        tag: \"method\",\n        children: \"SpanGroup.to_bytes \"\n      }), _jsx(_components.p, {\n        children: \"Serialize the span group to a bytestring.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"Their goi ng home\\\")\\ndoc.spans[\\\"errors\\\"] = [doc[0:1], doc[1:3]]\\ngroup_bytes = doc.spans[\\\"errors\\\"].to_bytes()\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The serialized \", _jsx(InlineCode, {\n                children: \"SpanGroup\"\n              }), \". \", _jsx(_components.del, {\n                children: \"bytes\"\n              })]\n            })]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-from_bytes\",\n      children: [_jsx(_components.h2, {\n        id: \"from_bytes\",\n        tag: \"method\",\n        children: \"SpanGroup.from_bytes \"\n      }), _jsx(_components.p, {\n        children: \"Load the span group from a bytestring. Modifies the object in place and returns\\nit.\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.tokens import SpanGroup\\n\\ndoc = nlp(\\\"Their goi ng home\\\")\\ndoc.spans[\\\"errors\\\"] = [doc[0:1], doc[1:3]]\\ngroup_bytes = doc.spans[\\\"errors\\\"].to_bytes()\\nnew_group = SpanGroup()\\nnew_group.from_bytes(group_bytes)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"bytes_data\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The data to load from. \", _jsx(_components.del, {\n                children: \"bytes\"\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.strong, {\n                children: \"RETURNS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The \", _jsx(InlineCode, {\n                children: \"SpanGroup\"\n              }), \" object. \", _jsx(_components.del, {\n                children: \"SpanGroup\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"SpanGroup","tag":"class","source":"spacy/tokens/span_group.pyx","version":3},"scope":{}},"sectionTitle":"API Documentation","theme":"green","section":"api","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false,"next":null},"__N_SSG":true}