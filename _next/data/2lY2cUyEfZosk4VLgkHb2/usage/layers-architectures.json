{"pageProps":{"title":"Layers and Model Architectures","teaser":"Power spaCy components with custom neural networks","menu":[["Type Signatures","type-sigs"],["Swapping Architectures","swap-architectures"],["PyTorch & TensorFlow","frameworks"],["Custom Thinc Models","thinc"],["Trainable Components","components"]],"next":{"slug":"/usage/projects","title":"spaCy Projects"},"slug":"/usage/layers-architectures","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    h2: \"h2\",\n    del: \"del\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    em: \"em\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    img: \"img\"\n  }, _provideComponents(), props.components), {InlineCode, Accordion, Image, Infobox, Project, YouTube} = _components;\n  if (!Accordion) _missingMdxReference(\"Accordion\", true);\n  if (!Image) _missingMdxReference(\"Image\", true);\n  if (!Infobox) _missingMdxReference(\"Infobox\", true);\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  if (!Project) _missingMdxReference(\"Project\", true);\n  if (!YouTube) _missingMdxReference(\"YouTube\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.section, {\n      children: [_jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from thinc.api import Model, chain\\n\\n@spacy.registry.architectures(\\\"model.v1\\\")\\ndef build_model(width: int, classes: int) -> Model:\\n    tok2vec = build_tok2vec(width)\\n    output_layer = build_output_layer(width, classes)\\n    model = chain(tok2vec, output_layer)\\n    return model\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"A \", _jsx(_components.strong, {\n          children: \"model architecture\"\n        }), \" is a function that wires up a\\n\", _jsxs(_components.a, {\n          href: \"https://thinc.ai/docs/api-model\",\n          children: [\"Thinc \", _jsx(InlineCode, {\n            children: \"Model\"\n          })]\n        }), \" instance. It describes the\\nneural network that is run internally as part of a component in a spaCy\\npipeline. To define the actual architecture, you can implement your logic in\\nThinc directly, or you can use Thinc as a thin wrapper around frameworks such as\\nPyTorch, TensorFlow and MXNet. Each \", _jsx(InlineCode, {\n          children: \"Model\"\n        }), \" can also be used as a sublayer of a\\nlarger network, allowing you to freely combine implementations from different\\nframeworks into a single model.\"]\n      }), _jsxs(_components.p, {\n        children: [\"spaCy’s built-in components require a \", _jsx(InlineCode, {\n          children: \"Model\"\n        }), \" instance to be passed to them via\\nthe config system. To change the model architecture of an existing component,\\nyou just need to \", _jsx(_components.a, {\n          href: \"#swap-architectures\",\n          children: _jsx(_components.strong, {\n            children: \"update the config\"\n          })\n        }), \" so that it refers\\nto a different registered function. Once the component has been created from\\nthis config, you won’t be able to change it anymore. The architecture is like a\\nrecipe for the network, and you can’t change the recipe once the dish has\\nalready been prepared. You have to make a new one.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ini\",\n          lang: \"ini\",\n          title: \"config.cfg (excerpt)\",\n          children: \"[components.tagger]\\nfactory = \\\"tagger\\\"\\n\\n[components.tagger.model]\\n@architectures = \\\"model.v1\\\"\\nwidth = 512\\nclasses = 16\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-type-sigs\",\n      children: [_jsx(_components.h2, {\n        id: \"type-sigs\",\n        children: \"Type signatures \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from typing import List\\nfrom thinc.api import Model, chain\\nfrom thinc.types import Floats2d\\ndef chain_model(\\n    tok2vec: Model[List[Doc], List[Floats2d]],\\n    layer1: Model[List[Floats2d], Floats2d],\\n    layer2: Model[Floats2d, Floats2d]\\n) -> Model[List[Doc], Floats2d]:\\n    model = chain(tok2vec, layer1, layer2)\\n    return model\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"The Thinc \", _jsx(InlineCode, {\n          children: \"Model\"\n        }), \" class is a \", _jsx(_components.strong, {\n          children: \"generic type\"\n        }), \" that can specify its input and\\noutput types. Python uses a square-bracket notation for this, so the type\\n\", _jsx(_components.del, {\n          children: \"Model[List, Dict]\"\n        }), \" says that each batch of inputs to the model will be a\\nlist, and the outputs will be a dictionary. You can be even more specific and\\nwrite for instance\", _jsx(_components.del, {\n          children: \"Model[List[Doc], Dict[str, float]]\"\n        }), \" to specify that the\\nmodel expects a list of \", _jsx(_components.a, {\n          href: \"/api/doc\",\n          children: _jsx(InlineCode, {\n            children: \"Doc\"\n          })\n        }), \" objects as input, and returns a\\ndictionary mapping of strings to floats. Some of the most common types you’ll\\nsee are: ​\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Type\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.del, {\n                children: \"List[Doc]\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A batch of \", _jsx(_components.a, {\n                href: \"/api/doc\",\n                children: _jsx(InlineCode, {\n                  children: \"Doc\"\n                })\n              }), \" objects. Most components expect their models to take this as input.\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.del, {\n                children: \"Floats2d\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A two-dimensional \", _jsx(InlineCode, {\n                children: \"numpy\"\n              }), \" or \", _jsx(InlineCode, {\n                children: \"cupy\"\n              }), \" array of floats. Usually 32-bit.\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.del, {\n                children: \"Ints2d\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A two-dimensional \", _jsx(InlineCode, {\n                children: \"numpy\"\n              }), \" or \", _jsx(InlineCode, {\n                children: \"cupy\"\n              }), \" array of integers. Common dtypes include uint64, int32 and int8.\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.del, {\n                children: \"List[Floats2d]\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"A list of two-dimensional arrays, generally with one array per \", _jsx(InlineCode, {\n                children: \"Doc\"\n              }), \" and one row per token.\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.del, {\n                children: \"Ragged\"\n              })\n            }), _jsx(_components.td, {\n              children: \"A container to handle variable-length sequence data in an unpadded contiguous array.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.del, {\n                children: \"Padded\"\n              })\n            }), _jsx(_components.td, {\n              children: \"A container to handle variable-length sequence data in a padded contiguous array.\"\n            })]\n          })]\n        })]\n      }), _jsxs(_components.p, {\n        children: [\"See the \", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-types\",\n          children: \"Thinc type reference\"\n        }), \" for details. The\\nmodel type signatures help you figure out which model architectures and\\ncomponents can \", _jsx(_components.strong, {\n          children: \"fit together\"\n        }), \". For instance, the\\n\", _jsx(_components.a, {\n          href: \"/api/textcategorizer\",\n          children: _jsx(InlineCode, {\n            children: \"TextCategorizer\"\n          })\n        }), \" class expects a model typed\\n\", _jsx(_components.del, {\n          children: \"Model[List[Doc], Floats2d]\"\n        }), \", because the model will predict one row of\\ncategory probabilities per \", _jsx(_components.a, {\n          href: \"/api/doc\",\n          children: _jsx(InlineCode, {\n            children: \"Doc\"\n          })\n        }), \". In contrast, the\\n\", _jsx(_components.a, {\n          href: \"/api/tagger\",\n          children: _jsx(InlineCode, {\n            children: \"Tagger\"\n          })\n        }), \" class expects a model typed \", _jsx(_components.del, {\n          children: \"Model[List[Doc],\\nList[Floats2d]]\"\n        }), \", because it needs to predict one row of probabilities per\\ntoken.\"]\n      }), _jsxs(_components.p, {\n        children: [\"There’s no guarantee that two models with the same type signature can be used\\ninterchangeably. There are many other ways they could be incompatible. However,\\nif the types don’t match, they almost surely \", _jsx(_components.em, {\n          children: \"won’t\"\n        }), \" be compatible. This little\\nbit of validation goes a long way, especially if you\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/usage-type-checking\",\n          children: \"configure your editor\"\n        }), \" or other\\ntools to highlight these errors early. The config file is also validated at the\\nbeginning of training, to verify that all the types match correctly.\"]\n      }), _jsxs(Accordion, {\n        title: \"Tip: Static type checking in your editor\",\n        children: [_jsxs(_components.p, {\n          children: [\"If you’re using a modern editor like Visual Studio Code, you can\\n\", _jsxs(_components.a, {\n            href: \"https://thinc.ai/docs/usage-type-checking#install\",\n            children: [\"set up \", _jsx(InlineCode, {\n              children: \"mypy\"\n            })]\n          }), \" with the\\ncustom Thinc plugin and get live feedback about mismatched types as you write\\ncode.\"]\n        }), _jsx(Image, {\n          src: \"/images/thinc_mypy.jpg\",\n          href: \"https://thinc.ai/docs/usage-type-checking#linting\",\n          alt: \"Screenshot of Thinc type checking in VSCode with mypy\"\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-swap-architectures\",\n      children: [_jsx(_components.h2, {\n        id: \"swap-architectures\",\n        children: \"Swapping model architectures \"\n      }), _jsxs(_components.p, {\n        children: [\"If no model is specified for the \", _jsx(_components.a, {\n          href: \"/api/textcategorizer\",\n          children: _jsx(InlineCode, {\n            children: \"TextCategorizer\"\n          })\n        }), \", the\\n\", _jsx(_components.a, {\n          href: \"/api/architectures#TextCatEnsemble\",\n          children: \"TextCatEnsemble\"\n        }), \" architecture is used by\\ndefault. This architecture combines a simple bag-of-words model with a neural\\nnetwork, usually resulting in the most accurate results, but at the cost of\\nspeed. The config file for this model would look something like this:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ini\",\n          lang: \"ini\",\n          title: \"config.cfg (excerpt)\",\n          children: \"[components.textcat]\\nfactory = \\\"textcat\\\"\\nlabels = []\\n\\n[components.textcat.model]\\n@architectures = \\\"spacy.TextCatEnsemble.v2\\\"\\nnO = null\\n\\n[components.textcat.model.tok2vec]\\n@architectures = \\\"spacy.Tok2Vec.v2\\\"\\n\\n[components.textcat.model.tok2vec.embed]\\n@architectures = \\\"spacy.MultiHashEmbed.v2\\\"\\nwidth = 64\\nrows = [2000, 2000, 1000, 1000, 1000, 1000]\\nattrs = [\\\"ORTH\\\", \\\"LOWER\\\", \\\"PREFIX\\\", \\\"SUFFIX\\\", \\\"SHAPE\\\", \\\"ID\\\"]\\ninclude_static_vectors = false\\n\\n[components.textcat.model.tok2vec.encode]\\n@architectures = \\\"spacy.MaxoutWindowEncoder.v2\\\"\\nwidth = ${components.textcat.model.tok2vec.embed.width}\\nwindow_size = 1\\nmaxout_pieces = 3\\ndepth = 2\\n\\n[components.textcat.model.linear_model]\\n@architectures = \\\"spacy.TextCatBOW.v2\\\"\\nexclusive_classes = true\\nngram_size = 1\\nno_output_layer = false\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"spaCy has two additional built-in \", _jsx(InlineCode, {\n          children: \"textcat\"\n        }), \" architectures, and you can easily\\nuse those by swapping out the definition of the textcat’s model. For instance,\\nto use the simple and fast bag-of-words model\\n\", _jsx(_components.a, {\n          href: \"/api/architectures#TextCatBOW\",\n          children: \"TextCatBOW\"\n        }), \", you can change the config to:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ini\",\n          lang: \"ini\",\n          title: \"config.cfg (excerpt)\",\n          highlight: \"6-10\",\n          children: \"[components.textcat]\\nfactory = \\\"textcat\\\"\\nlabels = []\\n\\n[components.textcat.model]\\n@architectures = \\\"spacy.TextCatBOW.v2\\\"\\nexclusive_classes = true\\nngram_size = 1\\nno_output_layer = false\\nnO = null\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"For details on all pre-defined architectures shipped with spaCy and how to\\nconfigure them, check out the \", _jsx(_components.a, {\n          href: \"/api/architectures\",\n          children: \"model architectures\"\n        }), \"\\ndocumentation.\"]\n      }), _jsx(_components.h3, {\n        id: \"sublayers\",\n        children: \"Defining sublayers \"\n      }), _jsxs(_components.p, {\n        children: [\"Model architecture functions often accept \", _jsx(_components.strong, {\n          children: \"sublayers as arguments\"\n        }), \", so that\\nyou can try \", _jsx(_components.strong, {\n          children: \"substituting a different layer\"\n        }), \" into the network. Depending on\\nhow the architecture function is structured, you might be able to define your\\nnetwork structure entirely through the \", _jsx(_components.a, {\n          href: \"/usage/training#config\",\n          children: \"config system\"\n        }), \",\\nusing layers that have already been defined. ​\"]\n      }), _jsxs(_components.p, {\n        children: [\"In most neural network models for NLP, the most important parts of the network\\nare what we refer to as the\\n\", _jsx(_components.a, {\n          href: \"https://explosion.ai/blog/deep-learning-formula-nlp\",\n          children: \"embed and encode\"\n        }), \" steps.\\nThese steps together compute dense, context-sensitive representations of the\\ntokens, and their combination forms a typical\\n\", _jsx(_components.a, {\n          href: \"/api/architectures#Tok2Vec\",\n          children: _jsx(InlineCode, {\n            children: \"Tok2Vec\"\n          })\n        }), \" layer:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ini\",\n          lang: \"ini\",\n          title: \"config.cfg (excerpt)\",\n          children: \"[components.tok2vec]\\nfactory = \\\"tok2vec\\\"\\n\\n[components.tok2vec.model]\\n@architectures = \\\"spacy.Tok2Vec.v2\\\"\\n\\n[components.tok2vec.model.embed]\\n@architectures = \\\"spacy.MultiHashEmbed.v2\\\"\\n# ...\\n\\n[components.tok2vec.model.encode]\\n@architectures = \\\"spacy.MaxoutWindowEncoder.v2\\\"\\n# ...\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"By defining these sublayers specifically, it becomes straightforward to swap out\\na sublayer for another one, for instance changing the first sublayer to a\\ncharacter embedding with the \", _jsx(_components.a, {\n          href: \"/api/architectures#CharacterEmbed\",\n          children: \"CharacterEmbed\"\n        }), \"\\narchitecture:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ini\",\n          lang: \"ini\",\n          title: \"config.cfg (excerpt)\",\n          children: \"[components.tok2vec.model.embed]\\n@architectures = \\\"spacy.CharacterEmbed.v2\\\"\\n# ...\\n\\n[components.tok2vec.model.encode]\\n@architectures = \\\"spacy.MaxoutWindowEncoder.v2\\\"\\n# ...\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Most of spaCy’s default architectures accept a \", _jsx(InlineCode, {\n          children: \"tok2vec\"\n        }), \" layer as a sublayer\\nwithin the larger task-specific neural network. This makes it easy to \", _jsx(_components.strong, {\n          children: \"switch\\nbetween\"\n        }), \" transformer, CNN, BiLSTM or other feature extraction approaches. The\\n\", _jsx(_components.a, {\n          href: \"/usage/embeddings-transformers#training-custom-model\",\n          children: \"transformers documentation\"\n        }), \"\\nsection shows an example of swapping out a model’s standard \", _jsx(InlineCode, {\n          children: \"tok2vec\"\n        }), \" layer with\\na transformer. And if you want to define your own solution, all you need to do\\nis register a \", _jsx(_components.del, {\n          children: \"Model[List[Doc], List[Floats2d]]\"\n        }), \" architecture function, and\\nyou’ll be able to try it out in any of the spaCy components. ​\"]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-frameworks\",\n      children: [_jsx(_components.h2, {\n        id: \"frameworks\",\n        children: \"Wrapping PyTorch, TensorFlow and other frameworks \"\n      }), _jsxs(_components.p, {\n        children: [\"Thinc allows you to \", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/usage-frameworks\",\n          children: \"wrap models\"\n        }), \"\\nwritten in other machine learning frameworks like PyTorch, TensorFlow and MXNet\\nusing a unified \", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-model\",\n          children: _jsx(InlineCode, {\n            children: \"Model\"\n          })\n        }), \" API. This makes it\\neasy to use a model implemented in a different framework to power a component in\\nyour spaCy pipeline. For example, to wrap a PyTorch model as a Thinc \", _jsx(InlineCode, {\n          children: \"Model\"\n        }), \",\\nyou can use Thinc’s\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-layers#pytorchwrapper\",\n          children: _jsx(InlineCode, {\n            children: \"PyTorchWrapper\"\n          })\n        }), \":\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"from thinc.api import PyTorchWrapper\\n\\nwrapped_pt_model = PyTorchWrapper(torch_model)\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Let’s use PyTorch to define a very simple neural network consisting of two\\nhidden \", _jsx(InlineCode, {\n          children: \"Linear\"\n        }), \" layers with \", _jsx(InlineCode, {\n          children: \"ReLU\"\n        }), \" activation and dropout, and a\\nsoftmax-activated output layer:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"PyTorch model\",\n          children: \"from torch import nn\\n\\ntorch_model = nn.Sequential(\\n    nn.Linear(width, hidden_width),\\n    nn.ReLU(),\\n    nn.Dropout2d(dropout),\\n    nn.Linear(hidden_width, nO),\\n    nn.ReLU(),\\n    nn.Dropout2d(dropout),\\n    nn.Softmax(dim=1)\\n)\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"The resulting wrapped \", _jsx(InlineCode, {\n          children: \"Model\"\n        }), \" can be used as a \", _jsx(_components.strong, {\n          children: \"custom architecture\"\n        }), \" as such,\\nor can be a \", _jsx(_components.strong, {\n          children: \"subcomponent of a larger model\"\n        }), \". For instance, we can use Thinc’s\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-layers#chain\",\n          children: _jsx(InlineCode, {\n            children: \"chain\"\n          })\n        }), \" combinator, which works like\\n\", _jsx(InlineCode, {\n          children: \"Sequential\"\n        }), \" in PyTorch, to combine the wrapped model with other components in a\\nlarger network. This effectively means that you can easily wrap different\\ncomponents from different frameworks, and “glue” them together with Thinc:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"from thinc.api import chain, with_array, PyTorchWrapper\\nfrom spacy.ml import CharacterEmbed\\n\\nwrapped_pt_model = PyTorchWrapper(torch_model)\\nchar_embed = CharacterEmbed(width, embed_size, nM, nC)\\nmodel = chain(char_embed, with_array(wrapped_pt_model))\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"In the above example, we have combined our custom PyTorch model with a character\\nembedding layer defined by spaCy.\\n\", _jsx(_components.a, {\n          href: \"/api/architectures#CharacterEmbed\",\n          children: \"CharacterEmbed\"\n        }), \" returns a \", _jsx(InlineCode, {\n          children: \"Model\"\n        }), \" that takes\\na \", _jsx(_components.del, {\n          children: \"List[Doc]\"\n        }), \" as input, and outputs a \", _jsx(_components.del, {\n          children: \"List[Floats2d]\"\n        }), \". To make sure that\\nthe wrapped PyTorch model receives valid inputs, we use Thinc’s\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-layers#with_array\",\n          children: _jsx(InlineCode, {\n            children: \"with_array\"\n          })\n        }), \" helper.\"]\n      }), _jsx(_components.p, {\n        children: \"You could also implement a model that only uses PyTorch for the transformer\\nlayers, and “native” Thinc layers to do fiddly input and output transformations\\nand add on task-specific “heads”, as efficiency is less of a consideration for\\nthose parts of the network.\"\n      }), _jsx(_components.h3, {\n        id: \"frameworks-usage\",\n        children: \"Using wrapped models \"\n      }), _jsxs(_components.p, {\n        children: [\"To use our custom model including the PyTorch subnetwork, all we need to do is\\nregister the architecture using the\\n\", _jsxs(_components.a, {\n          href: \"/api/top-level#registry\",\n          children: [_jsx(InlineCode, {\n            children: \"architectures\"\n          }), \" registry\"]\n        }), \". This assigns the\\narchitecture a name so spaCy knows how to find it, and allows passing in\\narguments like hyperparameters via the \", _jsx(_components.a, {\n          href: \"/usage/training#config\",\n          children: \"config\"\n        }), \". The\\nfull example then becomes:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"Registering the architecture\",\n          highlight: \"9\",\n          children: \"from typing import List\\nfrom thinc.types import Floats2d\\nfrom thinc.api import Model, PyTorchWrapper, chain, with_array\\nimport spacy\\nfrom spacy.tokens.doc import Doc\\nfrom spacy.ml import CharacterEmbed\\nfrom torch import nn\\n\\n@spacy.registry.architectures(\\\"CustomTorchModel.v1\\\")\\ndef create_torch_model(\\n    nO: int,\\n    width: int,\\n    hidden_width: int,\\n    embed_size: int,\\n    nM: int,\\n    nC: int,\\n    dropout: float,\\n) -> Model[List[Doc], List[Floats2d]]:\\n    char_embed = CharacterEmbed(width, embed_size, nM, nC)\\n    torch_model = nn.Sequential(\\n        nn.Linear(width, hidden_width),\\n        nn.ReLU(),\\n        nn.Dropout2d(dropout),\\n        nn.Linear(hidden_width, nO),\\n        nn.ReLU(),\\n        nn.Dropout2d(dropout),\\n        nn.Softmax(dim=1)\\n    )\\n    wrapped_pt_model = PyTorchWrapper(torch_model)\\n    model = chain(char_embed, with_array(wrapped_pt_model))\\n    return model\\n\"\n        })\n      }), _jsx(_components.p, {\n        children: \"The model definition can now be used in any existing trainable spaCy component,\\nby specifying it in the config file. In this configuration, all required\\nparameters for the various subcomponents of the custom architecture are passed\\nin as settings via the config.\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ini\",\n          lang: \"ini\",\n          title: \"config.cfg (excerpt)\",\n          highlight: \"5-5\",\n          children: \"[components.tagger]\\nfactory = \\\"tagger\\\"\\n\\n[components.tagger.model]\\n@architectures = \\\"CustomTorchModel.v1\\\"\\nnO = 50\\nwidth = 96\\nhidden_width = 48\\nembed_size = 2000\\nnM = 64\\nnC = 8\\ndropout = 0.2\\n\"\n        })\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        children: _jsx(_components.p, {\n          children: \"Remember that it is best not to rely on any (hidden) default values to ensure\\nthat training configs are complete and experiments fully reproducible.\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Note that when using a PyTorch or Tensorflow model, it is recommended to set the\\nGPU memory allocator accordingly. When \", _jsx(InlineCode, {\n          children: \"gpu_allocator\"\n        }), \" is set to “pytorch” or\\n“tensorflow” in the training config, cupy will allocate memory via those\\nrespective libraries, preventing OOM errors when there’s available memory\\nsitting in the other library’s pool.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ini\",\n          lang: \"ini\",\n          title: \"config.cfg (excerpt)\",\n          children: \"[training]\\ngpu_allocator = \\\"pytorch\\\"\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-thinc\",\n      children: [_jsx(_components.h2, {\n        id: \"thinc\",\n        children: \"Custom models with Thinc \"\n      }), _jsxs(_components.p, {\n        children: [\"Of course it’s also possible to define the \", _jsx(InlineCode, {\n          children: \"Model\"\n        }), \" from the previous section\\nentirely in Thinc. The Thinc documentation provides details on the\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-layers\",\n          children: \"various layers\"\n        }), \" and helper functions\\navailable. Combinators can be used to\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/usage-models#operators\",\n          children: \"overload operators\"\n        }), \" and a common\\nusage pattern is to bind \", _jsx(InlineCode, {\n          children: \"chain\"\n        }), \" to \", _jsx(InlineCode, {\n          children: \">>\"\n        }), \". The “native” Thinc version of our\\nsimple neural network would then become:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"from thinc.api import chain, with_array, Model, Relu, Dropout, Softmax\\nfrom spacy.ml import CharacterEmbed\\n\\nchar_embed = CharacterEmbed(width, embed_size, nM, nC)\\nwith Model.define_operators({\\\">>\\\": chain}):\\n    layers = (\\n        Relu(hidden_width, width)\\n        >> Dropout(dropout)\\n        >> Relu(hidden_width, hidden_width)\\n        >> Dropout(dropout)\\n        >> Softmax(nO, hidden_width)\\n    )\\n    model = char_embed >> with_array(layers)\\n\"\n        })\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        title: \"Important note on inputs and outputs\",\n        children: _jsxs(_components.p, {\n          children: [\"Note that Thinc layers define the output dimension (\", _jsx(InlineCode, {\n            children: \"nO\"\n          }), \") as the first argument,\\nfollowed (optionally) by the input dimension (\", _jsx(InlineCode, {\n            children: \"nI\"\n          }), \"). This is in contrast to how\\nthe PyTorch layers are defined, where \", _jsx(InlineCode, {\n            children: \"in_features\"\n          }), \" precedes \", _jsx(InlineCode, {\n            children: \"out_features\"\n          }), \".\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"thinc-shape-inference\",\n        children: \"Shape inference in Thinc \"\n      }), _jsxs(_components.p, {\n        children: [\"It is \", _jsx(_components.strong, {\n          children: \"not\"\n        }), \" strictly necessary to define all the input and output dimensions\\nfor each layer, as Thinc can perform\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/usage-models#validation\",\n          children: \"shape inference\"\n        }), \" between\\nsequential layers by matching up the output dimensionality of one layer to the\\ninput dimensionality of the next. This means that we can simplify the \", _jsx(InlineCode, {\n          children: \"layers\"\n        }), \"\\ndefinition:\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Diff\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            lang: \"diff\",\n            children: \"layers = (\\n    Relu(hidden_width, width)\\n    >> Dropout(dropout)\\n-   >> Relu(hidden_width, hidden_width)\\n+    >> Relu(hidden_width)\\n    >> Dropout(dropout)\\n-   >> Softmax(nO, hidden_width)\\n+   >> Softmax(nO)\\n)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"with Model.define_operators({\\\">>\\\": chain}):\\n    layers = (\\n        Relu(hidden_width, width)\\n        >> Dropout(dropout)\\n        >> Relu(hidden_width)\\n        >> Dropout(dropout)\\n        >> Softmax(nO)\\n    )\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Thinc can even go one step further and \", _jsx(_components.strong, {\n          children: \"deduce the correct input dimension\"\n        }), \" of\\nthe first layer, and output dimension of the last. To enable this functionality,\\nyou have to call\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-model#initialize\",\n          children: _jsx(InlineCode, {\n            children: \"Model.initialize\"\n          })\n        }), \" with an \", _jsx(_components.strong, {\n          children: \"input\\nsample\"\n        }), \" \", _jsx(InlineCode, {\n          children: \"X\"\n        }), \" and an \", _jsx(_components.strong, {\n          children: \"output sample\"\n        }), \" \", _jsx(InlineCode, {\n          children: \"Y\"\n        }), \" with the correct dimensions:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"Shape inference with initialization\",\n          highlight: \"3,7,10\",\n          children: \"with Model.define_operators({\\\">>\\\": chain}):\\n    layers = (\\n        Relu(hidden_width)\\n        >> Dropout(dropout)\\n        >> Relu(hidden_width)\\n        >> Dropout(dropout)\\n        >> Softmax()\\n    )\\n    model = char_embed >> with_array(layers)\\n    model.initialize(X=input_sample, Y=output_sample)\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"The built-in \", _jsx(_components.a, {\n          href: \"/usage/processing-pipelines\",\n          children: \"pipeline components\"\n        }), \" in spaCy ensure\\nthat their internal models are \", _jsx(_components.strong, {\n          children: \"always initialized\"\n        }), \" with appropriate sample\\ndata. In this case, \", _jsx(InlineCode, {\n          children: \"X\"\n        }), \" is typically a \", _jsx(_components.del, {\n          children: \"List[Doc]\"\n        }), \", while \", _jsx(InlineCode, {\n          children: \"Y\"\n        }), \" is typically a\\n\", _jsx(_components.del, {\n          children: \"List[Array1d]\"\n        }), \" or \", _jsx(_components.del, {\n          children: \"List[Array2d]\"\n        }), \", depending on the specific task. This\\nfunctionality is triggered when \", _jsx(_components.a, {\n          href: \"/api/language#initialize\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.initialize\"\n          })\n        }), \" is\\ncalled.\"]\n      }), _jsx(_components.h3, {\n        id: \"thinc-dropout-norm\",\n        children: \"Dropout and normalization in Thinc \"\n      }), _jsxs(_components.p, {\n        children: [\"Many of the available Thinc \", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-layers\",\n          children: \"layers\"\n        }), \" allow you\\nto define a \", _jsx(InlineCode, {\n          children: \"dropout\"\n        }), \" argument that will result in “chaining” an additional\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-layers#dropout\",\n          children: _jsx(InlineCode, {\n            children: \"Dropout\"\n          })\n        }), \" layer. Optionally, you can\\noften specify whether or not you want to add layer normalization, which would\\nresult in an additional\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-layers#layernorm\",\n          children: _jsx(InlineCode, {\n            children: \"LayerNorm\"\n          })\n        }), \" layer. That means that\\nthe following \", _jsx(InlineCode, {\n          children: \"layers\"\n        }), \" definition is equivalent to the previous:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"with Model.define_operators({\\\">>\\\": chain}):\\n    layers = (\\n        Relu(hidden_width, dropout=dropout, normalize=False)\\n        >> Relu(hidden_width, dropout=dropout, normalize=False)\\n        >> Softmax()\\n    )\\n    model = char_embed >> with_array(layers)\\n    model.initialize(X=input_sample, Y=output_sample)\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-components\",\n      children: [_jsx(_components.h2, {\n        id: \"components\",\n        children: \"Create new trainable components \"\n      }), _jsxs(_components.p, {\n        children: [\"In addition to \", _jsx(_components.a, {\n          href: \"#swap-architectures\",\n          children: \"swapping out\"\n        }), \" layers in existing\\ncomponents, you can also implement an entirely new,\\n\", _jsx(_components.a, {\n          href: \"/usage/processing-pipelines#trainable-components\",\n          children: \"trainable\"\n        }), \" pipeline component\\nfrom scratch. This can be done by creating a new class inheriting from\\n\", _jsx(_components.a, {\n          href: \"/api/pipe\",\n          children: _jsx(InlineCode, {\n            children: \"TrainablePipe\"\n          })\n        }), \", and linking it up to your custom model\\nimplementation.\"]\n      }), _jsx(Infobox, {\n        title: \"Trainable component API\",\n        emoji: \"💡\",\n        children: _jsxs(_components.p, {\n          children: [\"For details on how to implement pipeline components, check out the usage guide\\non \", _jsx(_components.a, {\n            href: \"/usage/processing-pipelines#custom-component\",\n            children: \"custom components\"\n          }), \" and the\\noverview of the \", _jsx(InlineCode, {\n            children: \"TrainablePipe\"\n          }), \" methods used by\\n\", _jsx(_components.a, {\n            href: \"/usage/processing-pipelines#trainable-components\",\n            children: \"trainable components\"\n          }), \".\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"component-rel\",\n        children: \"Example: Entity relation extraction component \"\n      }), _jsxs(_components.p, {\n        children: [\"This section outlines an example use-case of implementing a \", _jsx(_components.strong, {\n          children: \"novel relation\\nextraction component\"\n        }), \" from scratch. We’ll implement a binary relation\\nextraction method that determines whether or not \", _jsx(_components.strong, {\n          children: \"two entities\"\n        }), \" in a document\\nare related, and if so, what type of relation connects them. We allow multiple\\ntypes of relations between two such entities (a multi-label setting). There are\\ntwo major steps required:\"]\n      }), _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Implement a \", _jsx(_components.a, {\n            href: \"#component-rel-model\",\n            children: \"machine learning model\"\n          }), \" specific to this\\ntask. It will have to extract candidate relation instances from a\\n\", _jsx(_components.a, {\n            href: \"/api/doc\",\n            children: _jsx(InlineCode, {\n              children: \"Doc\"\n            })\n          }), \" and predict the corresponding scores for each relation\\nlabel.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Implement a custom \", _jsx(_components.a, {\n            href: \"#component-rel-pipe\",\n            children: \"pipeline component\"\n          }), \" - powered by the\\nmachine learning model from step 1 - that translates the predicted scores\\ninto annotations that are stored on the \", _jsx(_components.a, {\n            href: \"/api/doc\",\n            children: _jsx(InlineCode, {\n              children: \"Doc\"\n            })\n          }), \" objects as they\\npass through the \", _jsx(InlineCode, {\n            children: \"nlp\"\n          }), \" pipeline.\"]\n        }), \"\\n\"]\n      }), _jsx(Project, {\n        id: \"tutorials/rel_component\",\n        children: _jsx(_components.p, {\n          children: \"Run this example use-case by using our project template. It includes all the\\ncode to create the ML model and the pipeline component from scratch. It also\\ncontains two config files to train the model: one to run on CPU with a Tok2Vec\\nlayer, and one for the GPU using a transformer. The project applies the\\nrelation extraction component to identify biomolecular interactions in a\\nsample dataset, but you can easily swap in your own dataset for your\\nexperiments in any other domain.\"\n        })\n      }), _jsx(YouTube, {\n        id: \"8HL-Ap5_Axo\"\n      }), _jsx(_components.h4, {\n        id: \"component-rel-model\",\n        children: \"Step 1: Implementing the Model \"\n      }), _jsxs(_components.p, {\n        children: [\"We need to implement a \", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-model\",\n          children: _jsx(InlineCode, {\n            children: \"Model\"\n          })\n        }), \" that takes a\\n\", _jsx(_components.strong, {\n          children: \"list of documents\"\n        }), \" (\", _jsx(_components.del, {\n          children: \"List[Doc]\"\n        }), \") as input, and outputs a \", _jsx(_components.strong, {\n          children: \"two-dimensional\\nmatrix\"\n        }), \" (\", _jsx(_components.del, {\n          children: \"Floats2d\"\n        }), \") of predictions:\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Model type annotations\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(InlineCode, {\n            children: \"Model\"\n          }), \" class is a generic type that can specify its input and output\\ntypes, e.g. \", _jsx(_components.del, {\n            children: \"Model[List[Doc], Floats2d]\"\n          }), \". Type hints are used for static\\ntype checks and validation. See the section on \", _jsx(_components.a, {\n            href: \"#type-sigs\",\n            children: \"type signatures\"\n          }), \"\\nfor details.\"]\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"The model architecture\",\n          children: \"@spacy.registry.architectures(\\\"rel_model.v1\\\")\\ndef create_relation_model(...) -> Model[List[Doc], Floats2d]:\\n    model = ...  # 👈 model will go here\\n    return model\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"We adapt a \", _jsx(_components.strong, {\n          children: \"modular approach\"\n        }), \" to the definition of this relation model, and\\ndefine it as chaining two layers together: the first layer that generates an\\ninstance tensor from a given set of documents, and the second layer that\\ntransforms the instance tensor into a final tensor holding the predictions:\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"config.cfg (excerpt)\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"[model]\\n@architectures = \\\"rel_model.v1\\\"\\n\\n[model.create_instance_tensor]\\n# ...\\n\\n[model.classification_layer]\\n# ...\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"The model architecture\",\n          highlight: \"6\",\n          children: \"@spacy.registry.architectures(\\\"rel_model.v1\\\")\\ndef create_relation_model(\\n    create_instance_tensor: Model[List[Doc], Floats2d],\\n    classification_layer: Model[Floats2d, Floats2d],\\n) -> Model[List[Doc], Floats2d]:\\n    model = chain(create_instance_tensor, classification_layer)\\n    return model\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"classification_layer\"\n        }), \" could be something like a\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-layers#linear\",\n          children: \"Linear\"\n        }), \" layer followed by a\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-layers#logistic\",\n          children: \"logistic\"\n        }), \" activation function:\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"config.cfg (excerpt)\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"[model.classification_layer]\\n@architectures = \\\"rel_classification_layer.v1\\\"\\nnI = null\\nnO = null\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"The classification layer\",\n          children: \"@spacy.registry.architectures(\\\"rel_classification_layer.v1\\\")\\ndef create_classification_layer(\\n    nO: int = None, nI: int = None\\n) -> Model[Floats2d, Floats2d]:\\n    return chain(Linear(nO=nO, nI=nI), Logistic())\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"The first layer that \", _jsx(_components.strong, {\n          children: \"creates the instance tensor\"\n        }), \" can be defined by\\nimplementing a\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/usage-models#weights-layers-forward\",\n          children: \"custom forward function\"\n        }), \"\\nwith an appropriate backpropagation callback. We also define an\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/usage-models#weights-layers-init\",\n          children: \"initialization method\"\n        }), \"\\nthat ensures that the layer is properly set up for training.\"]\n      }), _jsxs(_components.p, {\n        children: [\"We omit some of the implementation details here, and refer to the\\n\", _jsx(_components.a, {\n          href: \"https://github.com/explosion/projects/tree/v3/tutorials/rel_component\",\n          children: \"spaCy project\"\n        }), \"\\nthat has the full implementation.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"config.cfg (excerpt)\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"[model.create_instance_tensor]\\n@architectures = \\\"rel_instance_tensor.v1\\\"\\n\\n[model.create_instance_tensor.tok2vec]\\n@architectures = \\\"spacy.HashEmbedCNN.v2\\\"\\n# ...\\n\\n[model.create_instance_tensor.pooling]\\n@layers = \\\"reduce_mean.v1\\\"\\n\\n[model.create_instance_tensor.get_instances]\\n# ...\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"The layer that creates the instance tensor\",\n          children: \"@spacy.registry.architectures(\\\"rel_instance_tensor.v1\\\")\\ndef create_tensors(\\n    tok2vec: Model[List[Doc], List[Floats2d]],\\n    pooling: Model[Ragged, Floats2d],\\n    get_instances: Callable[[Doc], List[Tuple[Span, Span]]],\\n) -> Model[List[Doc], Floats2d]:\\n\\n    return Model(\\n        \\\"instance_tensors\\\",\\n        instance_forward,\\n        init=instance_init,\\n        layers=[tok2vec, pooling],\\n        refs={\\\"tok2vec\\\": tok2vec, \\\"pooling\\\": pooling},\\n        attrs={\\\"get_instances\\\": get_instances},\\n    )\\n\\n\\n# The custom forward function\\ndef instance_forward(\\n    model: Model[List[Doc], Floats2d],\\n    docs: List[Doc],\\n    is_train: bool,\\n) -> Tuple[Floats2d, Callable]:\\n    tok2vec = model.get_ref(\\\"tok2vec\\\")\\n    tokvecs, bp_tokvecs = tok2vec(docs, is_train)\\n    get_instances = model.attrs[\\\"get_instances\\\"]\\n    all_instances = [get_instances(doc) for doc in docs]\\n    pooling = model.get_ref(\\\"pooling\\\")\\n    relations = ...\\n\\n    def backprop(d_relations: Floats2d) -> List[Doc]:\\n        d_tokvecs = ...\\n        return bp_tokvecs(d_tokvecs)\\n\\n    return relations, backprop\\n\\n\\n# The custom initialization method\\ndef instance_init(\\n    model: Model,\\n    X: List[Doc] = None,\\n    Y: Floats2d = None,\\n) -> Model:\\n    tok2vec = model.get_ref(\\\"tok2vec\\\")\\n    tok2vec.initialize(X)\\n    return model\\n\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"This custom layer uses an \", _jsx(_components.a, {\n          href: \"/usage/embeddings-transformers\",\n          children: \"embedding layer\"\n        }), \" such\\nas a \", _jsx(_components.a, {\n          href: \"/api/tok2vec\",\n          children: _jsx(InlineCode, {\n            children: \"Tok2Vec\"\n          })\n        }), \" component or a \", _jsx(_components.a, {\n          href: \"/api/transformer\",\n          children: _jsx(InlineCode, {\n            children: \"Transformer\"\n          })\n        }), \".\\nThis layer is assumed to be of type \", _jsx(_components.del, {\n          children: \"Model[List[Doc], List[Floats2d]]\"\n        }), \" as it\\ntransforms each \", _jsx(_components.strong, {\n          children: \"document into a list of tokens\"\n        }), \", with each token being\\nrepresented by its embedding in the vector space.\"]\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"pooling\"\n        }), \" layer will be applied to summarize the token vectors into \", _jsx(_components.strong, {\n          children: \"entity\\nvectors\"\n        }), \", as named entities (represented by \", _jsx(_components.del, {\n          children: \"Span\"\n        }), \" objects) can consist of\\none or multiple tokens. For instance, the pooling layer could resort to\\ncalculating the average of all token vectors in an entity. Thinc provides\\nseveral\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-layers#reduction-ops\",\n          children: \"built-in pooling operators\"\n        }), \" for\\nthis purpose.\"]\n      }), _jsxs(_components.p, {\n        children: [\"Finally, we need a \", _jsx(InlineCode, {\n          children: \"get_instances\"\n        }), \" method that \", _jsx(_components.strong, {\n          children: \"generates pairs of entities\"\n        }), \"\\nthat we want to classify as being related or not. As these candidate pairs are\\ntypically formed within one document, this function takes a \", _jsx(_components.a, {\n          href: \"/api/doc\",\n          children: _jsx(InlineCode, {\n            children: \"Doc\"\n          })\n        }), \" as\\ninput and outputs a \", _jsx(InlineCode, {\n          children: \"List\"\n        }), \" of \", _jsx(InlineCode, {\n          children: \"Span\"\n        }), \" tuples. For instance, the following\\nimplementation takes any two entities from the same document, as long as they\\nare within a \", _jsx(_components.strong, {\n          children: \"maximum distance\"\n        }), \" (in number of tokens) of each other:\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"config.cfg (excerpt)\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"\\n[model.create_instance_tensor.get_instances]\\n@misc = \\\"rel_instance_generator.v1\\\"\\nmax_length = 100\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"Candidate generation\",\n          children: \"@spacy.registry.misc(\\\"rel_instance_generator.v1\\\")\\ndef create_instances(max_length: int) -> Callable[[Doc], List[Tuple[Span, Span]]]:\\n    def get_candidates(doc: \\\"Doc\\\") -> List[Tuple[Span, Span]]:\\n        candidates = []\\n        for ent1 in doc.ents:\\n            for ent2 in doc.ents:\\n                if ent1 != ent2:\\n                    if max_length and abs(ent2.start - ent1.start) <= max_length:\\n                        candidates.append((ent1, ent2))\\n        return candidates\\n    return get_candidates\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"This function is added to the \", _jsxs(_components.a, {\n          href: \"/api/top-level#registry\",\n          children: [_jsx(InlineCode, {\n            children: \"@misc\"\n          }), \" registry\"]\n        }), \" so we\\ncan refer to it from the config, and easily swap it out for any other candidate\\ngeneration function.\"]\n      }), _jsx(_components.h4, {\n        id: \"component-rel-attribute\",\n        children: \"Intermezzo: define how to store the relations data \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example output\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"doc = nlp(\\\"Amsterdam is the capital of the Netherlands.\\\")\\nprint(\\\"spans\\\", [(e.start, e.text, e.label_) for e in doc.ents])\\nfor value, rel_dict in doc._.rel.items():\\n    print(f\\\"{value}: {rel_dict}\\\")\\n\\n# spans [(0, 'Amsterdam', 'LOC'), (6, 'Netherlands', 'LOC')]\\n# (0, 6): {'CAPITAL_OF': 0.89, 'LOCATED_IN': 0.75, 'UNRELATED': 0.002}\\n# (6, 0): {'CAPITAL_OF': 0.01, 'LOCATED_IN': 0.13, 'UNRELATED': 0.017}\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"For our new relation extraction component, we will use a custom\\n\", _jsx(_components.a, {\n          href: \"/usage/processing-pipelines#custom-components-attributes\",\n          children: \"extension attribute\"\n        }), \"\\n\", _jsx(InlineCode, {\n          children: \"doc._.rel\"\n        }), \" in which we store relation data. The attribute refers to a\\ndictionary, keyed by the \", _jsx(_components.strong, {\n          children: \"start offsets of each entity\"\n        }), \" involved in the\\ncandidate relation. The values in the dictionary refer to another dictionary\\nwhere relation labels are mapped to values between 0 and 1. We assume anything\\nabove 0.5 to be a \", _jsx(InlineCode, {\n          children: \"True\"\n        }), \" relation. The \", _jsx(_components.del, {\n          children: \"Example\"\n        }), \" instances that we’ll use as\\ntraining data, will include their gold-standard relation annotations in\\n\", _jsx(InlineCode, {\n          children: \"example.reference._.rel\"\n        }), \".\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"Registering the extension attribute\",\n          children: \"from spacy.tokens import Doc\\nDoc.set_extension(\\\"rel\\\", default={})\\n\"\n        })\n      }), _jsx(_components.h4, {\n        id: \"component-rel-pipe\",\n        children: \"Step 2: Implementing the pipeline component \"\n      }), _jsxs(_components.p, {\n        children: [\"To use our new relation extraction model as part of a custom\\n\", _jsx(_components.a, {\n          href: \"/usage/processing-pipelines#trainable-components\",\n          children: \"trainable component\"\n        }), \", we\\ncreate a subclass of \", _jsx(_components.a, {\n          href: \"/api/pipe\",\n          children: _jsx(InlineCode, {\n            children: \"TrainablePipe\"\n          })\n        }), \" that holds the model.\"]\n      }), _jsx(_components.img, {\n        src: \"/images/trainable_component.svg\",\n        alt: \"Illustration of Pipe methods\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"Pipeline component skeleton\",\n          children: \"from spacy.pipeline import TrainablePipe\\n\\nclass RelationExtractor(TrainablePipe):\\n     def __init__(self, vocab, model, name=\\\"rel\\\"):\\n        \\\"\\\"\\\"Create a component instance.\\\"\\\"\\\"\\n        self.model = model\\n        self.vocab = vocab\\n        self.name = name\\n\\n    def update(self, examples, drop=0.0, sgd=None, losses=None):\\n        \\\"\\\"\\\"Learn from a batch of Example objects.\\\"\\\"\\\"\\n        ...\\n\\n    def predict(self, docs):\\n        \\\"\\\"\\\"Apply the model to a batch of Doc objects.\\\"\\\"\\\"\\n        ...\\n\\n    def set_annotations(self, docs, predictions):\\n        \\\"\\\"\\\"Modify a batch of Doc objects using the predictions.\\\"\\\"\\\"\\n         ...\\n\\n    def initialize(self, get_examples, nlp=None, labels=None):\\n        \\\"\\\"\\\"Initialize the model before training.\\\"\\\"\\\"\\n        ...\\n\\n    def add_label(self, label):\\n        \\\"\\\"\\\"Add a label to the component.\\\"\\\"\\\"\\n        ...\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Typically, the \", _jsx(_components.strong, {\n          children: \"constructor\"\n        }), \" defines the vocab, the Machine Learning model,\\nand the name of this component. Additionally, this component, just like the\\n\", _jsx(InlineCode, {\n          children: \"textcat\"\n        }), \" and the \", _jsx(InlineCode, {\n          children: \"tagger\"\n        }), \", stores an \", _jsx(_components.strong, {\n          children: \"internal list of labels\"\n        }), \". The ML model\\nwill predict scores for each label. We add convenience methods to easily\\nretrieve and add to them.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"The constructor (continued)\",\n          children: \"    def __init__(self, vocab, model, name=\\\"rel\\\"):\\n        \\\"\\\"\\\"Create a component instance.\\\"\\\"\\\"\\n        # ...\\n        self.cfg = {\\\"labels\\\": []}\\n\\n    @property\\n    def labels(self) -> Tuple[str, ...]:\\n        \\\"\\\"\\\"Returns the labels currently added to the component.\\\"\\\"\\\"\\n        return tuple(self.cfg[\\\"labels\\\"])\\n\\n    def add_label(self, label: str):\\n        \\\"\\\"\\\"Add a new label to the pipe.\\\"\\\"\\\"\\n        self.cfg[\\\"labels\\\"] = list(self.labels) + [label]\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"After creation, the component needs to be\\n\", _jsx(_components.a, {\n          href: \"/usage/training#initialization\",\n          children: \"initialized\"\n        }), \". This method can define the\\nrelevant labels in two ways: explicitely by setting the \", _jsx(InlineCode, {\n          children: \"labels\"\n        }), \" argument in the\\n\", _jsxs(_components.a, {\n          href: \"/api/data-formats#config-initialize\",\n          children: [_jsx(InlineCode, {\n            children: \"initialize\"\n          }), \" block\"]\n        }), \" of the config, or\\nimplicately by deducing them from the \", _jsx(InlineCode, {\n          children: \"get_examples\"\n        }), \" callback that generates the\\nfull \", _jsx(_components.strong, {\n          children: \"training data set\"\n        }), \", or a representative sample.\"]\n      }), _jsxs(_components.p, {\n        children: [\"The final number of labels defines the output dimensionality of the network, and\\nwill be used to do\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/usage-models#validation\",\n          children: \"shape inference\"\n        }), \" throughout the\\nlayers of the neural network. This is triggered by calling\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/api/model#initialize\",\n          children: _jsx(InlineCode, {\n            children: \"Model.initialize\"\n          })\n        }), \".\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"The initialize method\",\n          highlight: \"12,15,18,22\",\n          children: \"from itertools import islice\\n\\ndef initialize(\\n    self,\\n    get_examples: Callable[[], Iterable[Example]],\\n    *,\\n    nlp: Language = None,\\n    labels: Optional[List[str]] = None,\\n):\\n    if labels is not None:\\n        for label in labels:\\n            self.add_label(label)\\n    else:\\n        for example in get_examples():\\n            relations = example.reference._.rel\\n            for indices, label_dict in relations.items():\\n                for label in label_dict.keys():\\n                    self.add_label(label)\\n    subbatch = list(islice(get_examples(), 10))\\n    doc_sample = [eg.reference for eg in subbatch]\\n    label_sample = self._examples_to_truth(subbatch)\\n    self.model.initialize(X=doc_sample, Y=label_sample)\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"initialize\"\n        }), \" method is triggered whenever this component is part of an \", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \"\\npipeline, and \", _jsx(_components.a, {\n          href: \"/api/language#initialize\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.initialize\"\n          })\n        }), \" is invoked.\\nTypically, this happens when the pipeline is set up before training in\\n\", _jsx(_components.a, {\n          href: \"/api/cli#training\",\n          children: _jsx(InlineCode, {\n            children: \"spacy train\"\n          })\n        }), \". After initialization, the pipeline component\\nand its internal model can be trained and used to make predictions.\"]\n      }), _jsxs(_components.p, {\n        children: [\"During training, the method \", _jsx(_components.a, {\n          href: \"/api/pipe#update\",\n          children: _jsx(InlineCode, {\n            children: \"update\"\n          })\n        }), \" is invoked which\\ndelegates to\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-model#begin_update\",\n          children: _jsx(InlineCode, {\n            children: \"Model.begin_update\"\n          })\n        }), \" and a\\n\", _jsx(_components.a, {\n          href: \"/api/pipe#get_loss\",\n          children: _jsx(InlineCode, {\n            children: \"get_loss\"\n          })\n        }), \" function that \", _jsx(_components.strong, {\n          children: \"calculates the loss\"\n        }), \" for a\\nbatch of examples, as well as the \", _jsx(_components.strong, {\n          children: \"gradient\"\n        }), \" of loss that will be used to\\nupdate the weights of the model layers. Thinc provides several\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-loss\",\n          children: \"loss functions\"\n        }), \" that can be used for the\\nimplementation of the \", _jsx(InlineCode, {\n          children: \"get_loss\"\n        }), \" function.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"The update method\",\n          highlight: \"12-14\",\n          children: \"def update(\\n    self,\\n    examples: Iterable[Example],\\n    *,\\n    drop: float = 0.0,\\n    sgd: Optional[Optimizer] = None,\\n    losses: Optional[Dict[str, float]] = None,\\n) -> Dict[str, float]:\\n    # ...\\n    docs = [eg.predicted for eg in examples]\\n    predictions, backprop = self.model.begin_update(docs)\\n    loss, gradient = self.get_loss(examples, predictions)\\n    backprop(gradient)\\n    losses[self.name] += loss\\n    # ...\\n    return losses\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"After training the model, the component can be used to make novel\\n\", _jsx(_components.strong, {\n          children: \"predictions\"\n        }), \". The \", _jsx(_components.a, {\n          href: \"/api/pipe#predict\",\n          children: _jsx(InlineCode, {\n            children: \"predict\"\n          })\n        }), \" method needs to be\\nimplemented for each subclass of \", _jsx(InlineCode, {\n          children: \"TrainablePipe\"\n        }), \". In our case, we can simply\\ndelegate to the internal model’s\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-model#predict\",\n          children: \"predict\"\n        }), \" function that takes a batch\\nof \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" objects and returns a \", _jsx(_components.del, {\n          children: \"Floats2d\"\n        }), \" array:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"The predict method\",\n          children: \"def predict(self, docs: Iterable[Doc]) -> Floats2d:\\n    predictions = self.model.predict(docs)\\n    return self.model.ops.asarray(predictions)\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"The final method that needs to be implemented, is\\n\", _jsx(_components.a, {\n          href: \"/api/pipe#set_annotations\",\n          children: _jsx(InlineCode, {\n            children: \"set_annotations\"\n          })\n        }), \". This function takes the\\npredictions, and modifies the given \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" object in place to store them. For our\\nrelation extraction component, we store the data in the\\n\", _jsx(_components.a, {\n          href: \"#component-rel-attribute\",\n          children: \"custom attribute\"\n        }), _jsx(InlineCode, {\n          children: \"doc._.rel\"\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [\"To interpret the scores predicted by the relation extraction model correctly, we\\nneed to refer to the model’s \", _jsx(InlineCode, {\n          children: \"get_instances\"\n        }), \" function that defined which pairs\\nof entities were relevant candidates, so that the predictions can be linked to\\nthose exact entities:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"The set_annotations method\",\n          highlight: \"5-6,10\",\n          children: \"def set_annotations(self, docs: Iterable[Doc], predictions: Floats2d):\\n    c = 0\\n    get_instances = self.model.attrs[\\\"get_instances\\\"]\\n    for doc in docs:\\n        for (e1, e2) in get_instances(doc):\\n            offset = (e1.start, e2.start)\\n            if offset not in doc._.rel:\\n                doc._.rel[offset] = {}\\n            for j, label in enumerate(self.labels):\\n                doc._.rel[offset][label] = predictions[c, j]\\n            c += 1\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Under the hood, when the pipe is applied to a document, it delegates to the\\n\", _jsx(InlineCode, {\n          children: \"predict\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"set_annotations\"\n        }), \" methods:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"The __call__ method\",\n          children: \"def __call__(self, doc: Doc):\\n    predictions = self.predict([doc])\\n    self.set_annotations([doc], predictions)\\n    return doc\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"There is one more optional method to implement: \", _jsx(_components.a, {\n          href: \"/api/pipe#score\",\n          children: _jsx(InlineCode, {\n            children: \"score\"\n          })\n        }), \"\\ncalculates the performance of your component on a set of examples, and returns\\nthe results as a dictionary:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"The score method\",\n          children: \"def score(self, examples: Iterable[Example]) -> Dict[str, Any]:\\n    prf = PRFScore()\\n    for example in examples:\\n        ...\\n\\n    return {\\n        \\\"rel_micro_p\\\": prf.precision,\\n        \\\"rel_micro_r\\\": prf.recall,\\n        \\\"rel_micro_f\\\": prf.fscore,\\n    }\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"This is particularly useful for calculating relevant scores on the development\\ncorpus when training the component with \", _jsx(_components.a, {\n          href: \"/api/cli#training\",\n          children: _jsx(InlineCode, {\n            children: \"spacy train\"\n          })\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [\"Once our \", _jsx(InlineCode, {\n          children: \"TrainablePipe\"\n        }), \" subclass is fully implemented, we can\\n\", _jsx(_components.a, {\n          href: \"/usage/processing-pipelines#custom-components-factories\",\n          children: \"register\"\n        }), \" the\\ncomponent with the \", _jsx(_components.a, {\n          href: \"/api/language#factory\",\n          children: _jsx(InlineCode, {\n            children: \"@Language.factory\"\n          })\n        }), \" decorator. This\\nassigns it a name and lets you create the component with\\n\", _jsx(_components.a, {\n          href: \"/api/language#add_pipe\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.add_pipe\"\n          })\n        }), \" and via the\\n\", _jsx(_components.a, {\n          href: \"/usage/training#config\",\n          children: \"config\"\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"config.cfg (excerpt)\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"[components.relation_extractor]\\nfactory = \\\"relation_extractor\\\"\\n\\n[components.relation_extractor.model]\\n@architectures = \\\"rel_model.v1\\\"\\n# ...\\n\\n[training.score_weights]\\nrel_micro_p = 0.0\\nrel_micro_r = 0.0\\nrel_micro_f = 1.0\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"Registering the pipeline component\",\n          children: \"from spacy.language import Language\\n\\n@Language.factory(\\\"relation_extractor\\\")\\ndef make_relation_extractor(nlp, name, model):\\n    return RelationExtractor(nlp.vocab, model, name)\\n\"\n        })\n      }), _jsx(_components.p, {\n        children: \"You can extend the decorator to include information such as the type of\\nannotations that are required for this component to run, the type of annotations\\nit produces, and the scores that can be calculated:\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"Factory annotations\",\n          highlight: \"5-11\",\n          children: \"from spacy.language import Language\\n\\n@Language.factory(\\n    \\\"relation_extractor\\\",\\n    requires=[\\\"doc.ents\\\", \\\"token.ent_iob\\\", \\\"token.ent_type\\\"],\\n    assigns=[\\\"doc._.rel\\\"],\\n    default_score_weights={\\n        \\\"rel_micro_p\\\": None,\\n        \\\"rel_micro_r\\\": None,\\n        \\\"rel_micro_f\\\": None,\\n    },\\n)\\ndef make_relation_extractor(nlp, name, model):\\n    return RelationExtractor(nlp.vocab, model, name)\\n\"\n        })\n      }), _jsx(Project, {\n        id: \"tutorials/rel_component\",\n        children: _jsx(_components.p, {\n          children: \"Run this example use-case by using our project template. It includes all the\\ncode to create the ML model and the pipeline component from scratch. It\\ncontains two config files to train the model: one to run on CPU with a Tok2Vec\\nlayer, and one for the GPU using a transformer. The project applies the\\nrelation extraction component to identify biomolecular interactions, but you\\ncan easily swap in your own dataset for your experiments in any other domain.\"\n        })\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Layers and Model Architectures","teaser":"Power spaCy components with custom neural networks","menu":[["Type Signatures","type-sigs"],["Swapping Architectures","swap-architectures"],["PyTorch & TensorFlow","frameworks"],["Custom Thinc Models","thinc"],["Trainable Components","components"]],"next":"/usage/projects"},"scope":{}},"sectionTitle":"Usage Documentation","theme":"blue","section":"usage","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false},"__N_SSG":true}