{"pageProps":{"title":"What's New in v2.3","teaser":"New features, backwards incompatibilities and migration guide","menu":[["New Features","features"],["Backwards Incompatibilities","incompat"],["Migrating from v2.2","migrating"]],"slug":"/usage/v2-3","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    h2: \"h2\",\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    h3: \"h3\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {InlineCode, Infobox} = _components;\n  if (!Infobox) _missingMdxReference(\"Infobox\", true);\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.section, {\n      id: \"section-features\",\n      children: [_jsx(_components.h2, {\n        id: \"features\",\n        hidden: \"true\",\n        children: \"New Features \"\n      }), _jsxs(_components.p, {\n        children: [\"spaCy v2.3 features new pretrained models for five languages, word vectors for\\nall language models, and decreased model size and loading times for models with\\nvectors. We’ve added pretrained models for \", _jsx(_components.strong, {\n          children: \"Chinese, Danish, Japanese, Polish\\nand Romanian\"\n        }), \" and updated the training data and vectors for most languages.\\nModel packages with vectors are about \", _jsx(_components.strong, {\n          children: \"2&times\"\n        }), \" smaller on disk and load\\n\", _jsx(_components.strong, {\n          children: \"2-4×\"\n        }), \" faster. For the full changelog, see the\\n\", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spaCy/releases/tag/v2.3.0\",\n          children: \"release notes on GitHub\"\n        }), \".\\nFor more details and a behind-the-scenes look at the new release,\\n\", _jsx(_components.a, {\n          href: \"https://explosion.ai/blog/spacy-v2-3\",\n          children: \"see our blog post\"\n        }), \".\"]\n      }), _jsx(_components.h3, {\n        id: \"models\",\n        children: \"Expanded model families with vectors \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            lang: \"bash\",\n            children: \"python -m spacy download da_core_news_sm\\npython -m spacy download ja_core_news_sm\\npython -m spacy download pl_core_news_sm\\npython -m spacy download ro_core_news_sm\\npython -m spacy download zh_core_web_sm\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"With new model families for Chinese, Danish, Polish, Romanian and Chinese plus\\n\", _jsx(InlineCode, {\n          children: \"md\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"lg\"\n        }), \" models with word vectors for all languages, this release provides\\na total of 46 model packages. For models trained using\\n\", _jsx(_components.a, {\n          href: \"https://universaldependencies.org\",\n          children: \"Universal Dependencies\"\n        }), \" corpora, the\\ntraining data has been updated to UD v2.5 (v2.6 for Japanese, v2.3 for Polish)\\nand Dutch has been extended to include both UD Dutch Alpino and LassySmall.\"]\n      }), _jsx(Infobox, {\n        children: _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Models:\"\n          }), \" \", _jsx(_components.a, {\n            href: \"/models\",\n            children: \"Models directory\"\n          }), \" **Benchmarks: **\\n\", _jsx(_components.a, {\n            href: \"https://github.com/explosion/spaCy/releases/tag/v2.3.0\",\n            children: \"Release notes\"\n          })]\n        })\n      }), _jsx(_components.h3, {\n        id: \"chinese\",\n        children: \"Chinese \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.lang.zh import Chinese\\n\\n# Load with \\\"default\\\" model provided by pkuseg\\ncfg = {\\\"pkuseg_model\\\": \\\"default\\\", \\\"require_pkuseg\\\": True}\\nnlp = Chinese(meta={\\\"tokenizer\\\": {\\\"config\\\": cfg}})\\n\\n# Append words to user dict\\nnlp.tokenizer.pkuseg_update_user_dict([\\\"中国\\\", \\\"ABC\\\"])\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"This release adds support for\\n\", _jsx(_components.a, {\n          href: \"https://github.com/lancopku/pkuseg-python\",\n          children: _jsx(InlineCode, {\n            children: \"pkuseg\"\n          })\n        }), \" for word segmentation and\\nthe new Chinese models ship with a custom pkuseg model trained on OntoNotes. The\\nChinese tokenizer can be initialized with both \", _jsx(InlineCode, {\n          children: \"pkuseg\"\n        }), \" and custom models and\\nthe \", _jsx(InlineCode, {\n          children: \"pkuseg\"\n        }), \" user dictionary is easy to customize. Note that\\n\", _jsx(_components.a, {\n          href: \"https://github.com/lancopku/pkuseg-python\",\n          children: _jsx(InlineCode, {\n            children: \"pkuseg\"\n          })\n        }), \" doesn’t yet ship with\\npre-compiled wheels for Python 3.8. See the\\n\", _jsx(_components.a, {\n          href: \"/usage/models#chinese\",\n          children: \"usage documentation\"\n        }), \" for details on how to install it on\\nPython 3.8.\"]\n      }), _jsx(Infobox, {\n        children: _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Models:\"\n          }), \" \", _jsx(_components.a, {\n            href: \"/models/zh\",\n            children: \"Chinese models\"\n          }), \" **Usage: **\\n\", _jsx(_components.a, {\n            href: \"/usage/models#chinese\",\n            children: \"Chinese tokenizer usage\"\n          })]\n        })\n      }), _jsx(_components.h3, {\n        id: \"japanese\",\n        children: \"Japanese \"\n      }), _jsxs(_components.p, {\n        children: [\"The updated Japanese language class switches to\\n\", _jsx(_components.a, {\n          href: \"https://github.com/WorksApplications/SudachiPy\",\n          children: _jsx(InlineCode, {\n            children: \"SudachiPy\"\n          })\n        }), \" for word\\nsegmentation and part-of-speech tagging. Using \", _jsx(InlineCode, {\n          children: \"SudachiPy\"\n        }), \" greatly simplifies\\ninstalling spaCy for Japanese, which is now possible with a single command:\\n\", _jsx(InlineCode, {\n          children: \"pip install spacy[ja]\"\n        }), \".\"]\n      }), _jsx(Infobox, {\n        children: _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Models:\"\n          }), \" \", _jsx(_components.a, {\n            href: \"/models/ja\",\n            children: \"Japanese models\"\n          }), \" \", _jsx(_components.strong, {\n            children: \"Usage:\"\n          }), \"\\n\", _jsx(_components.a, {\n            href: \"/usage/models#japanese\",\n            children: \"Japanese tokenizer usage\"\n          })]\n        })\n      }), _jsx(_components.h3, {\n        children: \"Small CLI updates\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.a, {\n            href: \"/api/cli#debug-data\",\n            children: _jsx(InlineCode, {\n              children: \"spacy debug-data\"\n            })\n          }), \" provides the coverage of the vectors\\nin a base model with \", _jsx(InlineCode, {\n            children: \"spacy debug-data lang train dev -b base_model\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.a, {\n            href: \"/api/cli#evaluate\",\n            children: _jsx(InlineCode, {\n              children: \"spacy evaluate\"\n            })\n          }), \" supports \", _jsx(InlineCode, {\n            children: \"blank:lg\"\n          }), \" (e.g.\\n\", _jsx(InlineCode, {\n            children: \"spacy evaluate blank:en dev.json\"\n          }), \") to evaluate the tokenization accuracy\\nwithout loading a model\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.a, {\n            href: \"/api/cli#train\",\n            children: _jsx(InlineCode, {\n              children: \"spacy train\"\n            })\n          }), \" on GPU restricts the CPU timing evaluation to\\nthe first iteration\"]\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-incompat\",\n      children: [_jsx(_components.h2, {\n        id: \"incompat\",\n        children: \"Backwards incompatibilities \"\n      }), _jsx(Infobox, {\n        title: \"Important note on models\",\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"If you’ve been training \", _jsx(_components.strong, {\n            children: \"your own models\"\n          }), \", you’ll need to \", _jsx(_components.strong, {\n            children: \"retrain\"\n          }), \" them\\nwith the new version. Also don’t forget to upgrade all models to the latest\\nversions. Models for earlier v2 releases (v2.0, v2.1, v2.2) aren’t compatible\\nwith models for v2.3. To check if all of your models are up to date, you can run\\nthe \", _jsx(_components.a, {\n            href: \"/api/cli#validate\",\n            children: _jsx(InlineCode, {\n              children: \"spacy validate\"\n            })\n          }), \" command.\"]\n        })\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Install with lookups data\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            lang: \"bash\",\n            children: \"$ pip install spacy[lookups]\\n\"\n          })\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"You can also install\\n\", _jsx(_components.a, {\n            href: \"https://github.com/explosion/spacy-lookups-data\",\n            children: _jsx(InlineCode, {\n              children: \"spacy-lookups-data\"\n            })\n          }), \"\\ndirectly.\"]\n        }), \"\\n\"]\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"If you’re training new models, you’ll want to install the package\\n\", _jsx(_components.a, {\n            href: \"https://github.com/explosion/spacy-lookups-data\",\n            children: _jsx(InlineCode, {\n              children: \"spacy-lookups-data\"\n            })\n          }), \", which\\nnow includes both the lemmatization tables (as in v2.2) and the normalization\\ntables (new in v2.3). If you’re using pretrained models, \", _jsx(_components.strong, {\n            children: \"nothing changes\"\n          }), \",\\nbecause the relevant tables are included in the model packages.\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Due to the updated Universal Dependencies training data, the fine-grained\\npart-of-speech tags will change for many provided language models. The\\ncoarse-grained part-of-speech tagset remains the same, but the mapping from\\nparticular fine-grained to coarse-grained tags may show minor differences.\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"For French, Italian, Portuguese and Spanish, the fine-grained part-of-speech\\ntagsets contain new merged tags related to contracted forms, such as \", _jsx(InlineCode, {\n            children: \"ADP_DET\"\n          }), \"\\nfor French \", _jsx(InlineCode, {\n            children: \"\\\"au\\\"\"\n          }), \", which maps to UPOS \", _jsx(InlineCode, {\n            children: \"ADP\"\n          }), \" based on the head \", _jsx(InlineCode, {\n            children: \"\\\"à\\\"\"\n          }), \". This\\nincreases the accuracy of the models by improving the alignment between\\nspaCy’s tokenization and Universal Dependencies multi-word tokens used for\\ncontractions.\"]\n        }), \"\\n\"]\n      }), _jsx(_components.h3, {\n        id: \"migrating\",\n        children: \"Migrating from spaCy 2.2 \"\n      }), _jsx(_components.h4, {\n        children: \"Tokenizer settings\"\n      }), _jsxs(_components.p, {\n        children: [\"In spaCy v2.2.2-v2.2.4, there was a change to the precedence of \", _jsx(InlineCode, {\n          children: \"token_match\"\n        }), \"\\nthat gave prefixes and suffixes priority over \", _jsx(InlineCode, {\n          children: \"token_match\"\n        }), \", which caused\\nproblems for many custom tokenizer configurations. This has been reverted in\\nv2.3 so that \", _jsx(InlineCode, {\n          children: \"token_match\"\n        }), \" has priority over prefixes and suffixes as in v2.2.1\\nand earlier versions.\"]\n      }), _jsxs(_components.p, {\n        children: [\"A new tokenizer setting \", _jsx(InlineCode, {\n          children: \"url_match\"\n        }), \" has been introduced in v2.3.0 to handle\\ncases like URLs where the tokenizer should remove prefixes and suffixes (e.g., a\\ncomma at the end of a URL) before applying the match. See the full\\n\", _jsx(_components.a, {\n          href: \"/usage/linguistic-features#tokenization\",\n          children: \"tokenizer documentation\"\n        }), \" and try out\\n\", _jsx(_components.a, {\n          href: \"/usage/linguistic-features#tokenizer-debug\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.tokenizer.explain()\"\n          })\n        }), \" when\\ndebugging your tokenizer configuration.\"]\n      }), _jsx(_components.h4, {\n        children: \"Warnings configuration\"\n      }), _jsxs(_components.p, {\n        children: [\"spaCy’s custom warnings have been replaced with native Python\\n\", _jsx(_components.a, {\n          href: \"https://docs.python.org/3/library/warnings.html\",\n          children: _jsx(InlineCode, {\n            children: \"warnings\"\n          })\n        }), \". Instead of\\nsetting \", _jsx(InlineCode, {\n          children: \"SPACY_WARNING_IGNORE\"\n        }), \", use the\\n\", _jsxs(_components.a, {\n          href: \"https://docs.python.org/3/library/warnings.html#the-warnings-filter\",\n          children: [_jsx(InlineCode, {\n            children: \"warnings\"\n          }), \" filters\"]\n        }), \"\\nto manage warnings.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"import spacy\\n+ import warnings\\n\\n- spacy.errors.SPACY_WARNING_IGNORE.append('W007')\\n+ warnings.filterwarnings(\\\"ignore\\\", message=r\\\"\\\\\\\\[W007\\\\\\\\]\\\", category=UserWarning)\\n\"\n        })\n      }), _jsx(_components.h4, {\n        children: \"Normalization tables\"\n      }), _jsxs(_components.p, {\n        children: [\"The normalization tables have moved from the language data in\\n\", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spacy/tree/v2.x/spacy/lang\",\n          children: _jsx(InlineCode, {\n            children: \"spacy/lang\"\n          })\n        }), \" to the\\npackage \", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spacy-lookups-data\",\n          children: _jsx(InlineCode, {\n            children: \"spacy-lookups-data\"\n          })\n        }), \".\\nIf you’re adding data for a new language, the normalization table should be\\nadded to \", _jsx(InlineCode, {\n          children: \"spacy-lookups-data\"\n        }), \". See\\n\", _jsx(_components.a, {\n          href: \"/usage/adding-languages#norm-exceptions\",\n          children: \"adding norm exceptions\"\n        }), \".\"]\n      }), _jsx(_components.h4, {\n        children: \"No preloaded vocab for models with vectors\"\n      }), _jsxs(_components.p, {\n        children: [\"To reduce the initial loading time, the lexemes in \", _jsx(InlineCode, {\n          children: \"nlp.vocab\"\n        }), \" are no longer\\nloaded on initialization for models with vectors. As you process texts, the\\nlexemes will be added to the vocab automatically, just as in small models\\nwithout vectors.\"]\n      }), _jsxs(_components.p, {\n        children: [\"To see the number of unique vectors and number of words with vectors, see\\n\", _jsx(InlineCode, {\n          children: \"nlp.meta['vectors']\"\n        }), \", for example for \", _jsx(InlineCode, {\n          children: \"en_core_web_md\"\n        }), \" there are \", _jsx(InlineCode, {\n          children: \"20000\"\n        }), \" unique\\nvectors and \", _jsx(InlineCode, {\n          children: \"684830\"\n        }), \" words with vectors:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"{\\n    'width': 300,\\n    'vectors': 20000,\\n    'keys': 684830,\\n    'name': 'en_core_web_md.vectors'\\n}\\n\"\n        })\n      }), _jsx(_components.p, {\n        children: \"If required, for instance if you are working directly with word vectors rather\\nthan processing texts, you can load all lexemes for words with vectors at once:\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"for orth in nlp.vocab.vectors:\\n    _ = nlp.vocab[orth]\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"If your workflow previously iterated over \", _jsx(InlineCode, {\n          children: \"nlp.vocab\"\n        }), \", a similar alternative is\\nto iterate over words with vectors instead:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"- lexemes = [w for w in nlp.vocab]\\n+ lexemes = [nlp.vocab[orth] for orth in nlp.vocab.vectors]\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Be aware that the set of preloaded lexemes in a v2.2 model is not equivalent to\\nthe set of words with vectors. For English, v2.2 \", _jsx(InlineCode, {\n          children: \"md/lg\"\n        }), \" models have 1.3M\\nprovided lexemes but only 685K words with vectors. The vectors have been updated\\nfor most languages in v2.2, but the English models contain the same vectors for\\nboth v2.2 and v2.3.\"]\n      }), _jsx(_components.h4, {\n        children: \"Lexeme.is_oov and Token.is_oov\"\n      }), _jsx(Infobox, {\n        title: \"Important note\",\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"Due to a bug, the values for \", _jsx(InlineCode, {\n            children: \"is_oov\"\n          }), \" are reversed in v2.3.0, but this will be\\nfixed in the next patch release v2.3.1.\"]\n        })\n      }), _jsxs(_components.p, {\n        children: [\"In v2.3, \", _jsx(InlineCode, {\n          children: \"Lexeme.is_oov\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"Token.is_oov\"\n        }), \" are \", _jsx(InlineCode, {\n          children: \"True\"\n        }), \" if the lexeme does not\\nhave a word vector. This is equivalent to \", _jsx(InlineCode, {\n          children: \"token.orth not in nlp.vocab.vectors\"\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [\"Previously in v2.2, \", _jsx(InlineCode, {\n          children: \"is_oov\"\n        }), \" corresponded to whether a lexeme had stored\\nprobability and cluster features. The probability and cluster features are no\\nlonger included in the provided medium and large models (see the next section).\"]\n      }), _jsx(_components.h4, {\n        children: \"Probability and cluster features\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Load and save extra prob lookups table\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.lang.en import English\\nnlp = English()\\ndoc = nlp(\\\"the\\\")\\nprint(doc[0].prob) # lazily loads extra prob table\\nnlp.to_disk(\\\"/path/to/model\\\") # includes prob table\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"Token.prob\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"Token.cluster\"\n        }), \" features, which are no longer used by the\\ncore pipeline components as of spaCy v2, are no longer provided in the\\npretrained models to reduce the model size. To keep these features available for\\nusers relying on them, the \", _jsx(InlineCode, {\n          children: \"prob\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"cluster\"\n        }), \" features for the most frequent\\n1M tokens have been moved to\\n\", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spacy-lookups-data\",\n          children: _jsx(InlineCode, {\n            children: \"spacy-lookups-data\"\n          })\n        }), \" as\\n\", _jsx(InlineCode, {\n          children: \"extra\"\n        }), \" features for the relevant languages (English, German, Greek and\\nSpanish).\"]\n      }), _jsxs(_components.p, {\n        children: [\"The extra tables are loaded lazily, so if you have \", _jsx(InlineCode, {\n          children: \"spacy-lookups-data\"\n        }), \"\\ninstalled and your code accesses \", _jsx(InlineCode, {\n          children: \"Token.prob\"\n        }), \", the full table is loaded into the\\nmodel vocab, which will take a few seconds on initial loading. When you save\\nthis model after loading the \", _jsx(InlineCode, {\n          children: \"prob\"\n        }), \" table, the full \", _jsx(InlineCode, {\n          children: \"prob\"\n        }), \" table will be saved\\nas part of the model vocab.\"]\n      }), _jsxs(_components.p, {\n        children: [\"To load the probability table into a provided model, first make sure you have\\n\", _jsx(InlineCode, {\n          children: \"spacy-lookups-data\"\n        }), \" installed. To load the table, remove the empty provided\\n\", _jsx(InlineCode, {\n          children: \"lexeme_prob\"\n        }), \" table and then access \", _jsx(InlineCode, {\n          children: \"Lexeme.prob\"\n        }), \" for any word to load the table\\nfrom \", _jsx(InlineCode, {\n          children: \"spacy-lookups-data\"\n        }), \":\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"+ # prerequisite: pip install spacy-lookups-data\\nimport spacy\\n\\nnlp = spacy.load(\\\"en_core_web_md\\\")\\n\\n# remove the empty placeholder prob table\\n+ if nlp.vocab.lookups_extra.has_table(\\\"lexeme_prob\\\"):\\n+     nlp.vocab.lookups_extra.remove_table(\\\"lexeme_prob\\\")\\n\\n# access any `.prob` to load the full table into the model\\nassert nlp.vocab[\\\"a\\\"].prob == -3.9297883511\\n\\n# if desired, save this model with the probability table included\\nnlp.to_disk(\\\"/path/to/model\\\")\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"If you’d like to include custom \", _jsx(InlineCode, {\n          children: \"cluster\"\n        }), \", \", _jsx(InlineCode, {\n          children: \"prob\"\n        }), \", or \", _jsx(InlineCode, {\n          children: \"sentiment\"\n        }), \" tables as part\\nof a new model, add the data to\\n\", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spacy-lookups-data\",\n          children: _jsx(InlineCode, {\n            children: \"spacy-lookups-data\"\n          })\n        }), \" under\\nthe entry point \", _jsx(InlineCode, {\n          children: \"lg_extra\"\n        }), \", e.g. \", _jsx(InlineCode, {\n          children: \"en_extra\"\n        }), \" for English. Alternatively, you can\\ninitialize your \", _jsx(_components.a, {\n          href: \"/api/vocab\",\n          children: _jsx(InlineCode, {\n            children: \"Vocab\"\n          })\n        }), \" with the \", _jsx(InlineCode, {\n          children: \"lookups_extra\"\n        }), \" argument with a\\n\", _jsx(_components.a, {\n          href: \"/api/lookups\",\n          children: _jsx(InlineCode, {\n            children: \"Lookups\"\n          })\n        }), \" object that includes the tables \", _jsx(InlineCode, {\n          children: \"lexeme_cluster\"\n        }), \",\\n\", _jsx(InlineCode, {\n          children: \"lexeme_prob\"\n        }), \", \", _jsx(InlineCode, {\n          children: \"lexeme_sentiment\"\n        }), \" or \", _jsx(InlineCode, {\n          children: \"lexeme_settings\"\n        }), \". \", _jsx(InlineCode, {\n          children: \"lexeme_settings\"\n        }), \" is\\ncurrently only used to provide a custom \", _jsx(InlineCode, {\n          children: \"oov_prob\"\n        }), \". See examples in the\\n\", _jsxs(_components.a, {\n          href: \"https://github.com/explosion/spacy-lookups-data/tree/master/spacy_lookups_data/data\",\n          children: [_jsx(InlineCode, {\n            children: \"data\"\n          }), \" directory\"]\n        }), \"\\nin \", _jsx(InlineCode, {\n          children: \"spacy-lookups-data\"\n        }), \".\"]\n      }), _jsx(_components.h4, {\n        children: \"Initializing new models without extra lookups tables\"\n      }), _jsxs(_components.p, {\n        children: [\"When you initialize a new model with \", _jsx(_components.a, {\n          href: \"/api/cli#init-model\",\n          children: _jsx(InlineCode, {\n            children: \"spacy init-model\"\n          })\n        }), \",\\nthe \", _jsx(InlineCode, {\n          children: \"prob\"\n        }), \" table from \", _jsx(InlineCode, {\n          children: \"spacy-lookups-data\"\n        }), \" may be loaded as part of the\\ninitialization. If you’d like to omit this extra data as in spaCy’s provided\\nv2.3 models, use the new flag \", _jsx(InlineCode, {\n          children: \"--omit-extra-lookups\"\n        }), \".\"]\n      }), _jsx(_components.h4, {\n        children: \"Tag maps in provided models vs. blank models\"\n      }), _jsxs(_components.p, {\n        children: [\"The tag maps in the provided models may differ from the tag maps in the spaCy\\nlibrary. You can access the tag map in a loaded model under\\n\", _jsx(InlineCode, {\n          children: \"nlp.vocab.morphology.tag_map\"\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [\"The tag map from \", _jsx(InlineCode, {\n          children: \"spacy.lang.lg.tag_map\"\n        }), \" is still used when a blank model is\\ninitialized. If you want to provide an alternate tag map, update\\n\", _jsx(InlineCode, {\n          children: \"nlp.vocab.morphology.tag_map\"\n        }), \" after initializing the model or if you’re using\\nthe \", _jsx(_components.a, {\n          href: \"/api/cli#train\",\n          children: \"train CLI\"\n        }), \", you can use the new \", _jsx(InlineCode, {\n          children: \"--tag-map-path\"\n        }), \" option to\\nprovide in the tag map as a JSON dict.\"]\n      }), _jsx(_components.p, {\n        children: \"If you want to export a tag map from a provided model for use with the train\\nCLI, you can save it as a JSON dict. To only use string keys as required by JSON\\nand to make it easier to read and edit, any internal integer IDs need to be\\nconverted back to strings:\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"import spacy\\nimport srsly\\n\\nnlp = spacy.load(\\\"en_core_web_sm\\\")\\ntag_map = {}\\n\\n# convert any integer IDs to strings for JSON\\nfor tag, morph in nlp.vocab.morphology.tag_map.items():\\n    tag_map[tag] = {}\\n    for feat, val in morph.items():\\n        feat = nlp.vocab.strings.as_string(feat)\\n        if not isinstance(val, bool):\\n            val = nlp.vocab.strings.as_string(val)\\n        tag_map[tag][feat] = val\\n\\nsrsly.write_json(\\\"tag_map.json\\\", tag_map)\\n\"\n        })\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"What's New in v2.3","teaser":"New features, backwards incompatibilities and migration guide","menu":[["New Features","features"],["Backwards Incompatibilities","incompat"],["Migrating from v2.2","migrating"]]},"scope":{}},"sectionTitle":"Usage Documentation","theme":"blue","section":"usage","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false,"next":null},"__N_SSG":true}