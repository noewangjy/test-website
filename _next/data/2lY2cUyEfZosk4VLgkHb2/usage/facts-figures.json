{"pageProps":{"title":"Facts & Figures","teaser":"The hard numbers for spaCy and how it compares to other tools","next":{"slug":"/usage/spacy-101","title":"spaCy 101"},"menu":[["Feature Comparison","comparison"],["Benchmarks","benchmarks"]],"slug":"/usage/facts-figures","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*TODO: update benchmarks and intro*/\n/*TODO: ## Citing spaCy {id=\"citation\"}*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    h2: \"h2\",\n    p: \"p\",\n    strong: \"strong\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    em: \"em\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\"\n  }, _provideComponents(), props.components), {Features, Benchmarks, InlineCode, Help} = _components;\n  if (!Benchmarks) _missingMdxReference(\"Benchmarks\", true);\n  if (!Features) _missingMdxReference(\"Features\", true);\n  if (!Help) _missingMdxReference(\"Help\", true);\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.section, {\n      id: \"section-comparison\",\n      children: [_jsx(_components.h2, {\n        id: \"comparison\",\n        hidden: \"true\",\n        children: \"Comparison \"\n      }), _jsxs(_components.p, {\n        children: [\"spaCy is a \", _jsx(_components.strong, {\n          children: \"free, open-source library\"\n        }), \" for advanced \", _jsx(_components.strong, {\n          children: \"Natural Language\\nProcessing\"\n        }), \" (NLP) in Python. It’s designed specifically for \", _jsx(_components.strong, {\n          children: \"production use\"\n        }), \"\\nand helps you build applications that process and “understand” large volumes of\\ntext. It can be used to build information extraction or natural language\\nunderstanding systems.\"]\n      }), _jsx(_components.h3, {\n        id: \"comparison-features\",\n        children: \"Feature overview \"\n      }), _jsx(Features, {}), _jsx(_components.h3, {\n        id: \"comparison-usage\",\n        children: \"When should I use spaCy? \"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"✅ \", _jsx(_components.strong, {\n            children: \"I’m a beginner and just getting started with NLP.\"\n          }), \" – spaCy makes it easy\\nto get started and comes with extensive documentation, including a\\nbeginner-friendly \", _jsx(_components.a, {\n            href: \"/usage/spacy-101\",\n            children: \"101 guide\"\n          }), \", a free interactive\\n\", _jsx(_components.a, {\n            href: \"https://course.spacy.io\",\n            children: \"online course\"\n          }), \" and a range of\\n\", _jsx(_components.a, {\n            href: \"https://www.youtube.com/c/ExplosionAI\",\n            children: \"video tutorials\"\n          }), \".\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"✅ \", _jsx(_components.strong, {\n            children: \"I want to build an end-to-end production application.\"\n          }), \" – spaCy is\\nspecifically designed for production use and lets you build and train powerful\\nNLP pipelines and package them for easy deployment.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"✅ \", _jsxs(_components.strong, {\n            children: [\"I want my application to be efficient on GPU \", _jsx(_components.em, {\n              children: \"and\"\n            }), \" CPU.\"]\n          }), \" – While spaCy\\nlets you train modern NLP models that are best run on GPU, it also offers\\nCPU-optimized pipelines, which are less accurate but much cheaper to run.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"✅ \", _jsx(_components.strong, {\n            children: \"I want to try out different neural network architectures for NLP.\"\n          }), \" –\\nspaCy lets you customize and swap out the model architectures powering its\\ncomponents, and implement your own using a framework like PyTorch or\\nTensorFlow. The declarative configuration system makes it easy to mix and\\nmatch functions and keep track of your hyperparameters to make sure your\\nexperiments are reproducible.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"❌ \", _jsx(_components.strong, {\n            children: \"I want to build a language generation application.\"\n          }), \" – spaCy’s focus is\\nnatural language \", _jsx(_components.em, {\n            children: \"processing\"\n          }), \" and extracting information from large volumes of\\ntext. While you can use it to help you re-write existing text, it doesn’t\\ninclude any specific functionality for language generation tasks.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"❌ \", _jsx(_components.strong, {\n            children: \"I want to research machine learning algorithms.\"\n          }), \" spaCy is built on the\\nlatest research, but it’s not a research library. If your goal is to write\\npapers and run benchmarks, spaCy is probably not a good choice. However, you\\ncan use it to make the results of your research easily available for others to\\nuse, e.g. via a custom spaCy component.\"]\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-benchmarks\",\n      children: [_jsx(_components.h2, {\n        id: \"benchmarks\",\n        children: \"Benchmarks \"\n      }), _jsxs(_components.p, {\n        children: [\"spaCy v3.0 introduces transformer-based pipelines that bring spaCy’s accuracy\\nright up to \", _jsx(_components.strong, {\n          children: \"current state-of-the-art\"\n        }), \". You can also use a CPU-optimized\\npipeline, which is less accurate but much cheaper to run.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Evaluation details\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"OntoNotes 5.0:\"\n            }), \" spaCy’s English models are trained on this corpus, as\\nit’s several times larger than other English treebanks. However, most\\nsystems do not report accuracies on it.\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"Penn Treebank:\"\n            }), \" The “classic” parsing evaluation for research. However,\\nit’s quite far removed from actual usage: it uses sentences with\\ngold-standard segmentation and tokenization, from a pretty specific type of\\ntext (articles from a single newspaper, 1984-1989).\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), _jsx(Benchmarks, {}), _jsxs(\"figure\", {\n        children: [_jsxs(_components.table, {\n          children: [_jsx(_components.thead, {\n            children: _jsxs(_components.tr, {\n              children: [_jsx(_components.th, {\n                children: \"Dependency Parsing System\"\n              }), _jsx(_components.th, {\n                align: \"right\",\n                children: \"UAS\"\n              }), _jsx(_components.th, {\n                align: \"right\",\n                children: \"LAS\"\n              })]\n            })\n          }), _jsxs(_components.tbody, {\n            children: [_jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"spaCy RoBERTa (2020)\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"95.1\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"93.7\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsxs(_components.td, {\n                children: [_jsx(_components.a, {\n                  href: \"https://khalilmrini.github.io/Label_Attention_Layer.pdf\",\n                  children: \"Mrini et al.\"\n                }), \" (2019)\"]\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"97.4\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"96.3\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsxs(_components.td, {\n                children: [_jsx(_components.a, {\n                  href: \"https://www.aclweb.org/anthology/P19-1230/\",\n                  children: \"Zhou and Zhao\"\n                }), \" (2019)\"]\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"97.2\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"95.7\"\n              })]\n            })]\n          })]\n        }), _jsx(\"figcaption\", {\n          className: \"caption\",\n          children: _jsxs(_components.p, {\n            children: [_jsx(_components.strong, {\n              children: \"Dependency parsing accuracy\"\n            }), \" on the Penn Treebank. See\\n\", _jsx(_components.a, {\n              href: \"http://nlpprogress.com/english/dependency_parsing.html\",\n              children: \"NLP-progress\"\n            }), \" for more\\nresults. Project template:\\n\", _jsx(_components.a, {\n              href: \"https://github.com/explosion/projects/tree/v3/benchmarks/parsing_penn_treebank\",\n              children: _jsx(InlineCode, {\n                children: \"benchmarks/parsing_penn_treebank\"\n              })\n            }), \".\"]\n          })\n        })]\n      }), _jsx(_components.h3, {\n        id: \"benchmarks-speed\",\n        children: \"Speed comparison \"\n      }), _jsx(_components.p, {\n        children: \"We compare the speed of different NLP libraries, measured in words per second\\n(WPS) - higher is better. The evaluation was performed on 10,000 Reddit\\ncomments.\"\n      }), _jsxs(\"figure\", {\n        children: [_jsxs(_components.table, {\n          children: [_jsx(_components.thead, {\n            children: _jsxs(_components.tr, {\n              children: [_jsx(_components.th, {\n                children: \"Library\"\n              }), _jsx(_components.th, {\n                children: \"Pipeline\"\n              }), _jsxs(_components.th, {\n                align: \"right\",\n                children: [\"WPS CPU \", _jsx(Help, {\n                  children: \"words per second on CPU, higher is better\"\n                })]\n              }), _jsxs(_components.th, {\n                align: \"right\",\n                children: [\"WPS GPU \", _jsx(Help, {\n                  children: \"words per second on GPU, higher is better\"\n                })]\n              })]\n            })\n          }), _jsxs(_components.tbody, {\n            children: [_jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"spaCy\"\n              }), _jsx(_components.td, {\n                children: _jsx(_components.a, {\n                  href: \"/models/en#en_core_web_lg\",\n                  children: _jsx(InlineCode, {\n                    children: \"en_core_web_lg\"\n                  })\n                })\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"10,014\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"14,954\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"spaCy\"\n              }), _jsx(_components.td, {\n                children: _jsx(_components.a, {\n                  href: \"/models/en#en_core_web_trf\",\n                  children: _jsx(InlineCode, {\n                    children: \"en_core_web_trf\"\n                  })\n                })\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"684\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"3,768\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"Stanza\"\n              }), _jsx(_components.td, {\n                children: _jsx(InlineCode, {\n                  children: \"en_ewt\"\n                })\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"878\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"2,180\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"Flair\"\n              }), _jsxs(_components.td, {\n                children: [_jsx(InlineCode, {\n                  children: \"pos\"\n                }), \"(\", _jsx(InlineCode, {\n                  children: \"-fast\"\n                }), \") & \", _jsx(InlineCode, {\n                  children: \"ner\"\n                }), \"(\", _jsx(InlineCode, {\n                  children: \"-fast\"\n                }), \")\"]\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"323\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"1,184\"\n              })]\n            }), _jsxs(_components.tr, {\n              children: [_jsx(_components.td, {\n                children: \"UDPipe\"\n              }), _jsx(_components.td, {\n                children: _jsx(InlineCode, {\n                  children: \"english-ewt-ud-2.5\"\n                })\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: \"1,101\"\n              }), _jsx(_components.td, {\n                align: \"right\",\n                children: _jsx(_components.em, {\n                  children: \"n/a\"\n                })\n              })]\n            })]\n          })]\n        }), _jsx(\"figcaption\", {\n          className: \"caption\",\n          children: _jsxs(_components.p, {\n            children: [_jsx(_components.strong, {\n              children: \"End-to-end processing speed\"\n            }), \" on raw unannotated text. Project template:\\n\", _jsx(_components.a, {\n              href: \"https://github.com/explosion/projects/tree/v3/benchmarks/speed\",\n              children: _jsx(InlineCode, {\n                children: \"benchmarks/speed\"\n              })\n            }), \".\"]\n          })\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Facts & Figures","teaser":"The hard numbers for spaCy and how it compares to other tools","next":"/usage/spacy-101","menu":[["Feature Comparison","comparison"],["Benchmarks","benchmarks"]]},"scope":{}},"sectionTitle":"Usage Documentation","theme":"blue","section":"usage","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false},"__N_SSG":true}