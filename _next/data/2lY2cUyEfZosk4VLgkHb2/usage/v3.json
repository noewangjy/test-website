{"pageProps":{"title":"What's New in v3.0","teaser":"New features, backwards incompatibilities and migration guide","menu":[["Summary","summary"],["New Features","features"],["Backwards Incompatibilities","incompat"],["Migrating from v2.x","migrating"]],"slug":"/usage/v3","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    img: \"img\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    em: \"em\"\n  }, _provideComponents(), props.components), {Grid, Infobox, Tag, YouTube, InlineCode, Benchmarks, Project, Image} = _components;\n  if (!Benchmarks) _missingMdxReference(\"Benchmarks\", true);\n  if (!Grid) _missingMdxReference(\"Grid\", true);\n  if (!Image) _missingMdxReference(\"Image\", true);\n  if (!Infobox) _missingMdxReference(\"Infobox\", true);\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  if (!Project) _missingMdxReference(\"Project\", true);\n  if (!Tag) _missingMdxReference(\"Tag\", true);\n  if (!YouTube) _missingMdxReference(\"YouTube\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.section, {\n      id: \"section-summary\",\n      children: [_jsx(_components.h2, {\n        id: \"summary\",\n        hidden: \"true\",\n        children: \"Summary \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"📖 Looking for the old docs?\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"To help you make the transition from v2.x to v3.0, we’ve uploaded the old\\nwebsite to \", _jsx(_components.a, {\n            href: \"https://v2.spacy.io/docs\",\n            children: _jsx(_components.strong, {\n              children: \"v2.spacy.io\"\n            })\n          }), \".\"]\n        }), \"\\n\"]\n      }), _jsxs(Grid, {\n        cols: 2,\n        gutterBottom: false,\n        children: [_jsx(\"div\", {\n          children: _jsxs(_components.p, {\n            children: [\"spaCy v3.0 features all new \", _jsx(_components.strong, {\n              children: \"transformer-based pipelines\"\n            }), \" that bring spaCy’s\\naccuracy right up to the current \", _jsx(_components.strong, {\n              children: \"state-of-the-art\"\n            }), \". You can use any\\npretrained transformer to train your own pipelines, and even share one\\ntransformer between multiple components with \", _jsx(_components.strong, {\n              children: \"multi-task learning\"\n            }), \". Training\\nis now fully configurable and extensible, and you can define your own custom\\nmodels using \", _jsx(_components.strong, {\n              children: \"PyTorch\"\n            }), \", \", _jsx(_components.strong, {\n              children: \"TensorFlow\"\n            }), \" and other frameworks. The new spaCy\\nprojects system lets you describe whole \", _jsx(_components.strong, {\n              children: \"end-to-end workflows\"\n            }), \" in a single\\nfile, giving you an easy path from prototype to production, and making it easy\\nto clone and adapt best-practice projects for your own use cases.\"]\n          })\n        }), _jsx(Infobox, {\n          title: \"Table of Contents\",\n          id: \"toc\",\n          children: _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: _jsx(_components.a, {\n                href: \"#summary\",\n                children: \"Summary\"\n              })\n            }), \"\\n\", _jsx(_components.li, {\n              children: _jsx(_components.a, {\n                href: \"#features\",\n                children: \"New features\"\n              })\n            }), \"\\n\", _jsx(_components.li, {\n              children: _jsx(_components.a, {\n                href: \"#features-transformers\",\n                children: \"Transformer-based pipelines\"\n              })\n            }), \"\\n\", _jsx(_components.li, {\n              children: _jsx(_components.a, {\n                href: \"#features-training\",\n                children: \"Training & config system\"\n              })\n            }), \"\\n\", _jsx(_components.li, {\n              children: _jsx(_components.a, {\n                href: \"#features-custom-models\",\n                children: \"Custom models\"\n              })\n            }), \"\\n\", _jsx(_components.li, {\n              children: _jsx(_components.a, {\n                href: \"#features-projects\",\n                children: \"End-to-end project workflows\"\n              })\n            }), \"\\n\", _jsx(_components.li, {\n              children: _jsx(_components.a, {\n                href: \"#features-parallel-training\",\n                children: \"Parallel training with Ray\"\n              })\n            }), \"\\n\", _jsx(_components.li, {\n              children: _jsx(_components.a, {\n                href: \"#features-pipeline-components\",\n                children: \"New built-in components\"\n              })\n            }), \"\\n\", _jsx(_components.li, {\n              children: _jsx(_components.a, {\n                href: \"#features-components\",\n                children: \"New custom component API\"\n              })\n            }), \"\\n\", _jsx(_components.li, {\n              children: _jsx(_components.a, {\n                href: \"#features-dep-matcher\",\n                children: \"Dependency matching\"\n              })\n            }), \"\\n\", _jsx(_components.li, {\n              children: _jsx(_components.a, {\n                href: \"#features-types\",\n                children: \"Python type hints\"\n              })\n            }), \"\\n\", _jsx(_components.li, {\n              children: _jsx(_components.a, {\n                href: \"#new-methods\",\n                children: \"New methods & attributes\"\n              })\n            }), \"\\n\", _jsx(_components.li, {\n              children: _jsx(_components.a, {\n                href: \"#new-docs\",\n                children: \"New & updated documentation\"\n              })\n            }), \"\\n\", _jsx(_components.li, {\n              children: _jsx(_components.a, {\n                href: \"#incompat\",\n                children: \"Backwards incompatibilities\"\n              })\n            }), \"\\n\", _jsx(_components.li, {\n              children: _jsx(_components.a, {\n                href: \"#migrating\",\n                children: \"Migrating from spaCy v2.x\"\n              })\n            }), \"\\n\"]\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-features\",\n      children: [_jsx(_components.h2, {\n        id: \"features\",\n        children: \"New Features \"\n      }), _jsxs(_components.p, {\n        children: [\"This section contains an overview of the most important \", _jsx(_components.strong, {\n          children: \"new features and\\nimprovements\"\n        }), \". The \", _jsx(_components.a, {\n          href: \"/api\",\n          children: \"API docs\"\n        }), \" include additional deprecation notes. New\\nmethods and functions that were introduced in this version are marked with the\\ntag \", _jsx(Tag, {\n          variant: \"new\",\n          children: \"3\"\n        }), \".\"]\n      }), _jsx(YouTube, {\n        id: \"9k_EfV7Cns0\"\n      }), _jsxs(Grid, {\n        cols: 2,\n        gutterBottom: false,\n        narrow: true,\n        children: [_jsx(YouTube, {\n          id: \"BWhh3r6W-qE\"\n        }), _jsx(YouTube, {\n          id: \"8HL-Ap5_Axo\"\n        })]\n      }), _jsx(_components.h3, {\n        id: \"features-transformers\",\n        children: \"Transformer-based pipelines \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            lang: \"bash\",\n            children: \"$ python -m spacy download en_core_web_trf\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"spaCy v3.0 features all new transformer-based pipelines that bring spaCy’s\\naccuracy right up to the current \", _jsx(_components.strong, {\n          children: \"state-of-the-art\"\n        }), \". You can use any\\npretrained transformer to train your own pipelines, and even share one\\ntransformer between multiple components with \", _jsx(_components.strong, {\n          children: \"multi-task learning\"\n        }), \". spaCy’s\\ntransformer support interoperates with \", _jsx(_components.a, {\n          href: \"https://pytorch.org\",\n          children: \"PyTorch\"\n        }), \" and the\\n\", _jsxs(_components.a, {\n          href: \"https://huggingface.co/transformers/\",\n          children: [\"HuggingFace \", _jsx(InlineCode, {\n            children: \"transformers\"\n          })]\n        }), \" library,\\ngiving you access to thousands of pretrained models for your pipelines.\"]\n      }), _jsx(_components.img, {\n        src: \"/images/tok2vec-listener.svg\",\n        alt: \"Pipeline components listening to shared embedding component\"\n      }), _jsx(Benchmarks, {}), _jsx(_components.h4, {\n        id: \"features-transformers-pipelines\",\n        children: \"New trained transformer-based pipelines \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Notes on model capabilities\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"The models are each trained with a \", _jsx(_components.strong, {\n            children: \"single transformer\"\n          }), \" shared across the\\npipeline, which requires it to be trained on a single corpus. For\\n\", _jsx(_components.a, {\n            href: \"/models/en\",\n            children: \"English\"\n          }), \" and \", _jsx(_components.a, {\n            href: \"/models/zh\",\n            children: \"Chinese\"\n          }), \", we used the OntoNotes 5\\ncorpus, which has annotations across several tasks. For \", _jsx(_components.a, {\n            href: \"/models/fr\",\n            children: \"French\"\n          }), \",\\n\", _jsx(_components.a, {\n            href: \"/models/es\",\n            children: \"Spanish\"\n          }), \" and \", _jsx(_components.a, {\n            href: \"/models/de\",\n            children: \"German\"\n          }), \", we didn’t have a suitable\\ncorpus that had both syntactic and entity annotations, so the transformer\\nmodels for those languages do not include NER.\"]\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Package\"\n            }), _jsx(_components.th, {\n              children: \"Language\"\n            }), _jsx(_components.th, {\n              children: \"Transformer\"\n            }), _jsx(_components.th, {\n              align: \"right\",\n              children: \"Tagger\"\n            }), _jsx(_components.th, {\n              align: \"right\",\n              children: \"Parser\"\n            }), _jsx(_components.th, {\n              align: \"right\",\n              children: \"NER\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/models/en#en_core_web_trf\",\n                children: _jsx(InlineCode, {\n                  children: \"en_core_web_trf\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"English\"\n            }), _jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"https://huggingface.co/roberta-base\",\n                children: _jsx(InlineCode, {\n                  children: \"roberta-base\"\n                })\n              })\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"97.8\"\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"95.2\"\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"89.9\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/models/de#de_dep_news_trf\",\n                children: _jsx(InlineCode, {\n                  children: \"de_dep_news_trf\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"German\"\n            }), _jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"https://huggingface.co/bert-base-german-cased\",\n                children: _jsx(InlineCode, {\n                  children: \"bert-base-german-cased\"\n                })\n              })\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"99.0\"\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"95.8\"\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"-\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/models/es#es_dep_news_trf\",\n                children: _jsx(InlineCode, {\n                  children: \"es_dep_news_trf\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Spanish\"\n            }), _jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"https://huggingface.co/dccuchile/bert-base-spanish-wwm-cased\",\n                children: _jsx(InlineCode, {\n                  children: \"bert-base-spanish-wwm-cased\"\n                })\n              })\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"98.2\"\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"94.6\"\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"-\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/models/fr#fr_dep_news_trf\",\n                children: _jsx(InlineCode, {\n                  children: \"fr_dep_news_trf\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"French\"\n            }), _jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"https://huggingface.co/camembert-base\",\n                children: _jsx(InlineCode, {\n                  children: \"camembert-base\"\n                })\n              })\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"95.7\"\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"94.4\"\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"-\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/models/zh#zh_core_news_trf\",\n                children: _jsx(InlineCode, {\n                  children: \"zh_core_web_trf\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Chinese\"\n            }), _jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"https://huggingface.co/bert-base-chinese\",\n                children: _jsx(InlineCode, {\n                  children: \"bert-base-chinese\"\n                })\n              })\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"92.5\"\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"76.6\"\n            }), _jsx(_components.td, {\n              align: \"right\",\n              children: \"75.4\"\n            })]\n          })]\n        })]\n      }), _jsx(Infobox, {\n        title: \"Details & Documentation\",\n        emoji: \"📖\",\n        list: true,\n        children: _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"Usage:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/usage/embeddings-transformers\",\n              children: \"Embeddings & Transformers\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/training\",\n              children: \"Training pipelines and models\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/facts-figures#benchmarks\",\n              children: \"Benchmarks\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"API:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/api/transformer\",\n              children: _jsx(InlineCode, {\n                children: \"Transformer\"\n              })\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/transformer#transformerdata\",\n              children: _jsx(InlineCode, {\n                children: \"TransformerData\"\n              })\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/transformer#fulltransformerbatch\",\n              children: _jsx(InlineCode, {\n                children: \"FullTransformerBatch\"\n              })\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"**Architectures: ** \", _jsx(_components.a, {\n              href: \"/api/architectures#TransformerModel\",\n              children: \"TransformerModel\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/architectures#TransformerListener\",\n              children: \"TransformerListener\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/architectures#Tok2VecTransformer\",\n              children: \"Tok2VecTransformer\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"Implementation:\"\n            }), \"\\n\", _jsx(_components.a, {\n              href: \"https://github.com/explosion/spacy-transformers\",\n              children: _jsx(InlineCode, {\n                children: \"spacy-transformers\"\n              })\n            })]\n          }), \"\\n\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"features-training\",\n        children: \"New training workflow and config system \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"[training]\\naccumulate_gradient = 3\\n\\n[training.optimizer]\\n@optimizers = \\\"Adam.v1\\\"\\n\\n[training.optimizer.learn_rate]\\n@schedules = \\\"warmup_linear.v1\\\"\\nwarmup_steps = 250\\ntotal_steps = 20000\\ninitial_rate = 0.01\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"spaCy v3.0 introduces a comprehensive and extensible system for \", _jsx(_components.strong, {\n          children: \"configuring\\nyour training runs\"\n        }), \". A single configuration file describes every detail of your\\ntraining run, with no hidden defaults, making it easy to rerun your experiments\\nand track changes. You can use the\\n\", _jsx(_components.a, {\n          href: \"/usage/training#quickstart\",\n          children: \"quickstart widget\"\n        }), \" or the \", _jsx(InlineCode, {\n          children: \"init config\"\n        }), \" command to\\nget started. Instead of providing lots of arguments on the command line, you\\nonly need to pass your \", _jsx(InlineCode, {\n          children: \"config.cfg\"\n        }), \" file to \", _jsx(_components.a, {\n          href: \"/api/cli#train\",\n          children: _jsx(InlineCode, {\n            children: \"spacy train\"\n          })\n        }), \".\\nTraining config files include all \", _jsx(_components.strong, {\n          children: \"settings and hyperparameters\"\n        }), \" for training\\nyour pipeline. Some settings can also be registered \", _jsx(_components.strong, {\n          children: \"functions\"\n        }), \" that you can\\nswap out and customize, making it easy to implement your own custom models and\\narchitectures.\"]\n      }), _jsx(_components.img, {\n        src: \"/images/lifecycle.svg\",\n        alt: \"Illustration of pipeline lifecycle\"\n      }), _jsx(Infobox, {\n        title: \"Details & Documentation\",\n        emoji: \"📖\",\n        list: true,\n        children: _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"Usage:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/usage/training\",\n              children: \"Training pipelines and models\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"Thinc:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"https://thinc.ai/docs/usage-config\",\n              children: \"Thinc’s config system\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"https://thinc.ai/docs/api-config#config\",\n              children: _jsx(InlineCode, {\n                children: \"Config\"\n              })\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"CLI:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/api/cli#init-config\",\n              children: _jsx(InlineCode, {\n                children: \"init config\"\n              })\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/cli#init-fill-config\",\n              children: _jsx(InlineCode, {\n                children: \"init fill-config\"\n              })\n            }), \", \", _jsx(_components.a, {\n              href: \"/api/cli#train\",\n              children: _jsx(InlineCode, {\n                children: \"train\"\n              })\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/cli#pretrain\",\n              children: _jsx(InlineCode, {\n                children: \"pretrain\"\n              })\n            }), \", \", _jsx(_components.a, {\n              href: \"/api/cli#evaluate\",\n              children: _jsx(InlineCode, {\n                children: \"evaluate\"\n              })\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"API:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/api/data-formats#config\",\n              children: \"Config format\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/top-level#registry\",\n              children: _jsx(InlineCode, {\n                children: \"registry\"\n              })\n            })]\n          }), \"\\n\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"features-custom-models\",\n        children: \"Custom models using any framework \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from torch import nn\\nfrom thinc.api import PyTorchWrapper\\n\\ntorch_model = nn.Sequential(\\n    nn.Linear(32, 32),\\n    nn.ReLU(),\\n    nn.Softmax(dim=1)\\n)\\nmodel = PyTorchWrapper(torch_model)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"spaCy’s new configuration system makes it easy to customize the neural network\\nmodels used by the different pipeline components. You can also implement your\\nown architectures via spaCy’s machine learning library \", _jsx(_components.a, {\n          href: \"https://thinc.ai\",\n          children: \"Thinc\"\n        }), \"\\nthat provides various layers and utilities, as well as thin wrappers around\\nframeworks like \", _jsx(_components.strong, {\n          children: \"PyTorch\"\n        }), \", \", _jsx(_components.strong, {\n          children: \"TensorFlow\"\n        }), \" and \", _jsx(_components.strong, {\n          children: \"MXNet\"\n        }), \". Component models all\\nfollow the same unified \", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/api-model\",\n          children: _jsx(InlineCode, {\n            children: \"Model\"\n          })\n        }), \" API and each\\n\", _jsx(InlineCode, {\n          children: \"Model\"\n        }), \" can also be used as a sublayer of a larger network, allowing you to\\nfreely combine implementations from different frameworks into a single model.\"]\n      }), _jsx(_components.img, {\n        src: \"/images/trainable_component.svg\",\n        alt: \"Illustration of Pipe methods\"\n      }), _jsx(Infobox, {\n        title: \"Details & Documentation\",\n        emoji: \"📖\",\n        list: true,\n        children: _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"**Usage: ** \", _jsx(_components.a, {\n              href: \"/usage/layers-architectures\",\n              children: \"Layers and architectures\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/processing-pipelines#trainable-components\",\n              children: \"Trainable component API\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/layers-architectures#components\",\n              children: \"Trainable components and models\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"**Thinc: **\\n\", _jsx(_components.a, {\n              href: \"https://thinc.ai/docs/usage-frameworks\",\n              children: \"Wrapping PyTorch, TensorFlow & MXNet\"\n            }), \",\\n\", _jsxs(_components.a, {\n              href: \"https://thinc.ai/docs/api-model\",\n              children: [_jsx(InlineCode, {\n                children: \"Model\"\n              }), \" API\"]\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"API:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/api/architectures\",\n              children: \"Model architectures\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/pipe\",\n              children: _jsx(InlineCode, {\n                children: \"TrainablePipe\"\n              })\n            })]\n          }), \"\\n\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"features-projects\",\n        children: \"Manage end-to-end workflows with projects \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            lang: \"bash\",\n            children: \"# Clone a project template\\n$ python -m spacy project clone pipelines/tagger_parser_ud\\n$ cd tagger_parser_ud\\n# Download data assets\\n$ python -m spacy project assets\\n# Run a workflow\\n$ python -m spacy project run all\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"spaCy projects let you manage and share \", _jsx(_components.strong, {\n          children: \"end-to-end spaCy workflows\"\n        }), \" for\\ndifferent \", _jsx(_components.strong, {\n          children: \"use cases and domains\"\n        }), \", and orchestrate training, packaging and\\nserving your custom pipelines. You can start off by cloning a pre-defined\\nproject template, adjust it to fit your needs, load in your data, train a\\npipeline, export it as a Python package, upload your outputs to a remote storage\\nand share your results with your team.\"]\n      }), _jsx(_components.img, {\n        src: \"/images/projects.svg\",\n        alt: \"Illustration of project workflow and commands\"\n      }), _jsxs(_components.p, {\n        children: [\"spaCy projects also make it easy to \", _jsx(_components.strong, {\n          children: \"integrate with other tools\"\n        }), \" in the data\\nscience and machine learning ecosystem, including \", _jsx(_components.a, {\n          href: \"/usage/projects#dvc\",\n          children: \"DVC\"\n        }), \" for\\ndata version control, \", _jsx(_components.a, {\n          href: \"/usage/projects#prodigy\",\n          children: \"Prodigy\"\n        }), \" for creating labelled\\ndata, \", _jsx(_components.a, {\n          href: \"/usage/projects#streamlit\",\n          children: \"Streamlit\"\n        }), \" for building interactive apps,\\n\", _jsx(_components.a, {\n          href: \"/usage/projects#fastapi\",\n          children: \"FastAPI\"\n        }), \" for serving models in production,\\n\", _jsx(_components.a, {\n          href: \"/usage/projects#ray\",\n          children: \"Ray\"\n        }), \" for parallel training,\\n\", _jsx(_components.a, {\n          href: \"/usage/projects#wandb\",\n          children: \"Weights & Biases\"\n        }), \" for experiment tracking, and more!\"]\n      }), _jsx(Infobox, {\n        title: \"Details & Documentation\",\n        emoji: \"📖\",\n        list: true,\n        children: _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"Usage:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/usage/projects\",\n              children: \"spaCy projects\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/training\",\n              children: \"Training pipelines and models\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"CLI:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/api/cli#project\",\n              children: _jsx(InlineCode, {\n                children: \"project\"\n              })\n            }), \", \", _jsx(_components.a, {\n              href: \"/api/cli#train\",\n              children: _jsx(InlineCode, {\n                children: \"train\"\n              })\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"Templates:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"https://github.com/explosion/projects\",\n              children: _jsx(InlineCode, {\n                children: \"projects\"\n              })\n            })]\n          }), \"\\n\"]\n        })\n      }), _jsx(Project, {\n        id: \"pipelines/tagger_parser_ud\",\n        children: _jsxs(_components.p, {\n          children: [\"The easiest way to get started is to clone a \", _jsx(_components.a, {\n            href: \"/usage/projects\",\n            children: \"project template\"\n          }), \"\\nand run it – for example, this end-to-end template that lets you train a\\n\", _jsx(_components.strong, {\n            children: \"part-of-speech tagger\"\n          }), \" and \", _jsx(_components.strong, {\n            children: \"dependency parser\"\n          }), \" on a Universal Dependencies\\ntreebank.\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"features-parallel-training\",\n        children: \"Parallel and distributed training with Ray \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            lang: \"bash\",\n            children: \"$ pip install -U spacy[ray]\\n# Check that the CLI is registered\\n$ python -m spacy ray --help\\n# Train a pipeline\\n$ python -m spacy ray train config.cfg --n-workers 2\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          href: \"https://ray.io/\",\n          children: \"Ray\"\n        }), \" is a fast and simple framework for building and running\\n\", _jsx(_components.strong, {\n          children: \"distributed applications\"\n        }), \". You can use Ray to train spaCy on one or more\\nremote machines, potentially speeding up your training process. The Ray\\nintegration is powered by a lightweight extension package,\\n\", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spacy-ray\",\n          children: _jsx(InlineCode, {\n            children: \"spacy-ray\"\n          })\n        }), \", that automatically adds\\nthe \", _jsx(_components.a, {\n          href: \"/api/cli#ray\",\n          children: _jsx(InlineCode, {\n            children: \"ray\"\n          })\n        }), \" command to your spaCy CLI if it’s installed in the\\nsame environment. You can then run \", _jsx(_components.a, {\n          href: \"/api/cli#ray-train\",\n          children: _jsx(InlineCode, {\n            children: \"spacy ray train\"\n          })\n        }), \" for\\nparallel training.\"]\n      }), _jsx(_components.img, {\n        src: \"/images/spacy-ray.svg\",\n        alt: \"Illustration of setup\"\n      }), _jsx(Infobox, {\n        title: \"Details & Documentation\",\n        emoji: \"📖\",\n        list: true,\n        children: _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"**Usage: **\\n\", _jsx(_components.a, {\n              href: \"/usage/training#parallel-training\",\n              children: \"Parallel and distributed training\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/projects#ray\",\n              children: \"spaCy Projects integration\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"CLI:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/api/cli#ray\",\n              children: _jsx(InlineCode, {\n                children: \"ray\"\n              })\n            }), \", \", _jsx(_components.a, {\n              href: \"/api/cli#ray-train\",\n              children: _jsx(InlineCode, {\n                children: \"ray train\"\n              })\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"Implementation:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"https://github.com/explosion/spacy-ray\",\n              children: _jsx(InlineCode, {\n                children: \"spacy-ray\"\n              })\n            })]\n          }), \"\\n\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"features-pipeline-components\",\n        children: \"New built-in pipeline components \"\n      }), _jsx(_components.p, {\n        children: \"spaCy v3.0 includes several new trainable and rule-based components that you can\\nadd to your pipeline and customize for your use case:\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"# pip install -U spacy[lookups]\\nnlp = spacy.blank(\\\"en\\\")\\nnlp.add_pipe(\\\"lemmatizer\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/sentencerecognizer\",\n                children: _jsx(InlineCode, {\n                  children: \"SentenceRecognizer\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Trainable component for sentence segmentation.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/morphologizer\",\n                children: _jsx(InlineCode, {\n                  children: \"Morphologizer\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Trainable component to predict morphological features.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/lemmatizer\",\n                children: _jsx(InlineCode, {\n                  children: \"Lemmatizer\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Standalone component for rule-based and lookup lemmatization.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/attributeruler\",\n                children: _jsx(InlineCode, {\n                  children: \"AttributeRuler\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Component for setting token attributes using match patterns.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/transformer\",\n                children: _jsx(InlineCode, {\n                  children: \"Transformer\"\n                })\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Component for using \", _jsx(_components.a, {\n                href: \"/usage/embeddings-transformers\",\n                children: \"transformer models\"\n              }), \" in your pipeline, accessing outputs and aligning tokens. Provided via \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/spacy-transformers\",\n                children: _jsx(InlineCode, {\n                  children: \"spacy-transformers\"\n                })\n              }), \".\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/pipe\",\n                children: _jsx(InlineCode, {\n                  children: \"TrainablePipe\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Base class for trainable pipeline components.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/textcategorizer\",\n                children: _jsx(InlineCode, {\n                  children: \"Multi-label TextCategorizer\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Trainable component for multi-label text classification.\"\n            })]\n          })]\n        })]\n      }), _jsx(Infobox, {\n        title: \"Details & Documentation\",\n        emoji: \"📖\",\n        list: true,\n        children: _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"Usage:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/usage/processing-pipelines\",\n              children: \"Processing pipelines\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"API:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/api#architecture-pipeline\",\n              children: \"Built-in pipeline components\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"Implementation:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"https://github.com/explosion/spaCy/tree/master/spacy/pipeline\",\n              children: _jsx(InlineCode, {\n                children: \"spacy/pipeline\"\n              })\n            })]\n          }), \"\\n\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"features-components\",\n        children: \"New and improved pipeline component APIs \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"@Language.component(\\\"my_component\\\")\\ndef my_component(doc):\\n    return doc\\n\\nnlp.add_pipe(\\\"my_component\\\")\\nnlp.add_pipe(\\\"ner\\\", source=other_nlp)\\nnlp.analyze_pipes(pretty=True)\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"Defining, configuring, reusing, training and analyzing pipeline components is\\nnow easier and more convenient. The \", _jsx(InlineCode, {\n          children: \"@Language.component\"\n        }), \" and\\n\", _jsx(InlineCode, {\n          children: \"@Language.factory\"\n        }), \" decorators let you register your component, define its\\ndefault configuration and meta data, like the attribute values it assigns and\\nrequires. Any custom component can be included during training, and sourcing\\ncomponents from existing trained pipelines lets you \", _jsx(_components.strong, {\n          children: \"mix and match custom\\npipelines\"\n        }), \". The \", _jsx(InlineCode, {\n          children: \"nlp.analyze_pipes\"\n        }), \" method outputs structured information about\\nthe current pipeline and its components, including the attributes they assign,\\nthe scores they compute during training and whether any required attributes\\naren’t set.\"]\n      }), _jsx(Infobox, {\n        title: \"Details & Documentation\",\n        emoji: \"📖\",\n        list: true,\n        children: _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"Usage:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/usage/processing-pipelines#custom_components\",\n              children: \"Custom components\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/training#config-components\",\n              children: \"Defining components for training\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"API:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/api/language#component\",\n              children: _jsx(InlineCode, {\n                children: \"@Language.component\"\n              })\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/language#factory\",\n              children: _jsx(InlineCode, {\n                children: \"@Language.factory\"\n              })\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/language#add_pipe\",\n              children: _jsx(InlineCode, {\n                children: \"Language.add_pipe\"\n              })\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/language#analyze_pipes\",\n              children: _jsx(InlineCode, {\n                children: \"Language.analyze_pipes\"\n              })\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"Implementation:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"https://github.com/explosion/spaCy/tree/master/spacy/language.py\",\n              children: _jsx(InlineCode, {\n                children: \"spacy/language.py\"\n              })\n            })]\n          }), \"\\n\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"features-dep-matcher\",\n        children: \"Dependency matching \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.matcher import DependencyMatcher\\n\\nmatcher = DependencyMatcher(nlp.vocab)\\npattern = [\\n    {\\\"RIGHT_ID\\\": \\\"anchor_founded\\\", \\\"RIGHT_ATTRS\\\": {\\\"ORTH\\\": \\\"founded\\\"}},\\n    {\\\"LEFT_ID\\\": \\\"anchor_founded\\\", \\\"REL_OP\\\": \\\">\\\", \\\"RIGHT_ID\\\": \\\"subject\\\", \\\"RIGHT_ATTRS\\\": {\\\"DEP\\\": \\\"nsubj\\\"}}\\n]\\nmatcher.add(\\\"FOUNDED\\\", [pattern])\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"The new \", _jsx(_components.a, {\n          href: \"/api/dependencymatcher\",\n          children: _jsx(InlineCode, {\n            children: \"DependencyMatcher\"\n          })\n        }), \" lets you match patterns\\nwithin the dependency parse using\\n\", _jsx(_components.a, {\n          href: \"https://nlp.stanford.edu/nlp/javadoc/javanlp/edu/stanford/nlp/semgraph/semgrex/SemgrexPattern.html\",\n          children: \"Semgrex\"\n        }), \"\\noperators. It follows the same API as the token-based \", _jsx(_components.a, {\n          href: \"/api/matcher\",\n          children: _jsx(InlineCode, {\n            children: \"Matcher\"\n          })\n        }), \".\\nA pattern added to the dependency matcher consists of a \", _jsx(_components.strong, {\n          children: \"list of\\ndictionaries\"\n        }), \", with each dictionary describing a \", _jsx(_components.strong, {\n          children: \"token to match\"\n        }), \" and its\\n\", _jsx(_components.strong, {\n          children: \"relation to an existing token\"\n        }), \" in the pattern.\"]\n      }), _jsx(_components.img, {\n        src: \"/images/dep-match-diagram.svg\",\n        alt: \"Dependency matcher pattern\"\n      }), _jsx(Infobox, {\n        title: \"Details & Documentation\",\n        emoji: \"📖\",\n        list: true,\n        children: _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"Usage:\"\n            }), \"\\n\", _jsx(_components.a, {\n              href: \"/usage/rule-based-matching#dependencymatcher\",\n              children: \"Dependency matching\"\n            }), \",\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"API:\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/api/dependencymatcher\",\n              children: _jsx(InlineCode, {\n                children: \"DependencyMatcher\"\n              })\n            }), \",\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"Implementation:\"\n            }), \"\\n\", _jsx(_components.a, {\n              href: \"https://github.com/explosion/spaCy/tree/master/spacy/matcher/dependencymatcher.pyx\",\n              children: _jsx(InlineCode, {\n                children: \"spacy/matcher/dependencymatcher.pyx\"\n              })\n            })]\n          }), \"\\n\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"features-types\",\n        children: \"Type hints and type-based data validation \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            lang: \"python\",\n            children: \"from spacy.language import Language\\nfrom pydantic import StrictBool\\n\\n@Language.factory(\\\"my_component\\\")\\ndef create_my_component(\\n    nlp: Language,\\n    name: str,\\n    custom: StrictBool\\n):\\n   ...\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"spaCy v3.0 officially drops support for Python 2 and now requires \", _jsx(_components.strong, {\n          children: \"Python\\n3.6+\"\n        }), \". This also means that the code base can take full advantage of\\n\", _jsx(_components.a, {\n          href: \"https://docs.python.org/3/library/typing.html\",\n          children: \"type hints\"\n        }), \". spaCy’s user-facing\\nAPI that’s implemented in pure Python (as opposed to Cython) now comes with type\\nhints. The new version of spaCy’s machine learning library\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai\",\n          children: \"Thinc\"\n        }), \" also features extensive\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/usage-type-checking/\",\n          children: \"type support\"\n        }), \", including custom\\ntypes for models and arrays, and a custom \", _jsx(InlineCode, {\n          children: \"mypy\"\n        }), \" plugin that can be used to\\ntype-check model definitions.\"]\n      }), _jsxs(_components.p, {\n        children: [\"For data validation, spaCy v3.0 adopts\\n\", _jsx(_components.a, {\n          href: \"https://github.com/samuelcolvin/pydantic\",\n          children: _jsx(InlineCode, {\n            children: \"pydantic\"\n          })\n        }), \". It also powers the data\\nvalidation of Thinc’s \", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/usage-config\",\n          children: \"config system\"\n        }), \", which\\nlets you register \", _jsx(_components.strong, {\n          children: \"custom functions with typed arguments\"\n        }), \", reference them in\\nyour config and see validation errors if the argument values don’t match.\"]\n      }), _jsx(Infobox, {\n        title: \"Details & Documentation\",\n        emoji: \"📖\",\n        list: true,\n        children: _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"**Usage: **\\n\", _jsx(_components.a, {\n              href: \"/usage/processing-pipelines#type-hints\",\n              children: \"Component type hints and validation\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/training#custom-code\",\n              children: \"Training with custom code\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"**Thinc: **\\n\", _jsx(_components.a, {\n              href: \"https://thinc.ai/docs/usage-type-checking\",\n              children: \"Type checking in Thinc\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"https://thinc.ai/docs/usage-config\",\n              children: \"Thinc’s config system\"\n            })]\n          }), \"\\n\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"new-methods\",\n        children: \"New methods, attributes and commands \"\n      }), _jsx(_components.p, {\n        children: \"The following methods, attributes and commands are new in spaCy v3.0.\"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/token#attributes\",\n                children: _jsx(InlineCode, {\n                  children: \"Token.lex\"\n                })\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Access a token’s \", _jsx(_components.a, {\n                href: \"/api/lexeme\",\n                children: _jsx(InlineCode, {\n                  children: \"Lexeme\"\n                })\n              }), \".\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/token#attributes\",\n                children: _jsx(InlineCode, {\n                  children: \"Token.morph\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Access a token’s morphological analysis.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/doc#spans\",\n                children: _jsx(InlineCode, {\n                  children: \"Doc.spans\"\n                })\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Named span groups to store and access collections of potentially overlapping spans. Uses the new \", _jsx(_components.a, {\n                href: \"/api/spangroup\",\n                children: _jsx(InlineCode, {\n                  children: \"SpanGroup\"\n                })\n              }), \" data structure.\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/doc#has_annotation\",\n                children: _jsx(InlineCode, {\n                  children: \"Doc.has_annotation\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Check whether a doc has annotation on a token attribute.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/language#select_pipes\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.select_pipes\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Context manager for enabling or disabling specific pipeline components for a block.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(_components.a, {\n                href: \"/api/language#disable_pipe\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.disable_pipe\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/language#enable_pipe\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.enable_pipe\"\n                })\n              })]\n            }), _jsx(_components.td, {\n              children: \"Disable or enable a loaded pipeline component (but don’t remove it).\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/language#analyze_pipes\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.analyze_pipes\"\n                })\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(_components.a, {\n                href: \"/usage/processing-pipelines#analysis\",\n                children: \"Analyze\"\n              }), \" components and their interdependencies.\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/language#resume_training\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.resume_training\"\n                })\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Experimental: continue training a trained pipeline and initialize “rehearsal” for components that implement a \", _jsx(InlineCode, {\n                children: \"rehearse\"\n              }), \" method to prevent catastrophic forgetting.\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(_components.a, {\n                href: \"/api/language#factory\",\n                children: _jsx(InlineCode, {\n                  children: \"@Language.factory\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/language#component\",\n                children: _jsx(InlineCode, {\n                  children: \"@Language.component\"\n                })\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"Decorators for \", _jsx(_components.a, {\n                href: \"/usage/processing-pipelines#custom-components\",\n                children: \"registering\"\n              }), \" pipeline component factories and simple stateless component functions.\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/language#has_factory\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.has_factory\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Check whether a component factory is registered on a language class.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(_components.a, {\n                href: \"/api/language#get_factory_meta\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.get_factory_meta\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/language#get_factory_meta\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.get_pipe_meta\"\n                })\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"Get the \", _jsx(_components.a, {\n                href: \"/api/language#factorymeta\",\n                children: _jsx(InlineCode, {\n                  children: \"FactoryMeta\"\n                })\n              }), \" with component metadata for a factory or instance name.\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/language#config\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.config\"\n                })\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The \", _jsx(_components.a, {\n                href: \"/usage/training#config\",\n                children: \"config\"\n              }), \" used to create the current \", _jsx(InlineCode, {\n                children: \"nlp\"\n              }), \" object. An instance of \", _jsx(_components.a, {\n                href: \"https://thinc.ai/docs/api-config#config\",\n                children: _jsx(InlineCode, {\n                  children: \"Config\"\n                })\n              }), \" and can be saved to disk and used for training.\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(_components.a, {\n                href: \"/api/language#attributes\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.components\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/language#attributes\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.component_names\"\n                })\n              })]\n            }), _jsx(_components.td, {\n              children: \"All available components and component names, including disabled components that are not run as part of the pipeline.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/language#attributes\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.disabled\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Names of disabled components that are not run as part of the pipeline.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/pipe#score\",\n                children: _jsx(InlineCode, {\n                  children: \"TrainablePipe.score\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Method on pipeline components that returns a dictionary of evaluation scores.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/top-level#registry\",\n                children: _jsx(InlineCode, {\n                  children: \"registry\"\n                })\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Function registry to map functions to string names that can be referenced in \", _jsx(_components.a, {\n                href: \"/usage/training#config\",\n                children: \"configs\"\n              }), \".\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(_components.a, {\n                href: \"/api/top-level#util.load_meta\",\n                children: _jsx(InlineCode, {\n                  children: \"util.load_meta\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/top-level#util.load_config\",\n                children: _jsx(InlineCode, {\n                  children: \"util.load_config\"\n                })\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"Updated helpers for loading a pipeline’s \", _jsx(_components.a, {\n                href: \"/api/data-formats#meta\",\n                children: _jsx(InlineCode, {\n                  children: \"meta.json\"\n                })\n              }), \" and \", _jsx(_components.a, {\n                href: \"/api/data-formats#config\",\n                children: _jsx(InlineCode, {\n                  children: \"config.cfg\"\n                })\n              }), \".\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/top-level#util.get_installed_models\",\n                children: _jsx(InlineCode, {\n                  children: \"util.get_installed_models\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Names of all pipeline packages installed in the environment.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(_components.a, {\n                href: \"/api/cli#init-config\",\n                children: _jsx(InlineCode, {\n                  children: \"init config\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/cli#init-fill-config\",\n                children: _jsx(InlineCode, {\n                  children: \"init fill-config\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/cli#debug-config\",\n                children: _jsx(InlineCode, {\n                  children: \"debug config\"\n                })\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"CLI commands for initializing, auto-filling and debugging \", _jsx(_components.a, {\n                href: \"/usage/training\",\n                children: \"training configs\"\n              }), \".\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/cli#init-vectors\",\n                children: _jsx(InlineCode, {\n                  children: \"init vectors\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Convert word vectors for use with spaCy.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/cli#init-labels\",\n                children: _jsx(InlineCode, {\n                  children: \"init labels\"\n                })\n              })\n            }), _jsx(_components.td, {\n              children: \"Generate JSON files for the labels in the data to speed up training.\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/cli#project\",\n                children: _jsx(InlineCode, {\n                  children: \"project\"\n                })\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Suite of CLI commands for cloning, running and managing \", _jsx(_components.a, {\n                href: \"/usage/projects\",\n                children: \"spaCy projects\"\n              }), \".\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/cli#ray\",\n                children: _jsx(InlineCode, {\n                  children: \"ray\"\n                })\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Suite of CLI commands for parallel training with \", _jsx(_components.a, {\n                href: \"https://ray.io/\",\n                children: \"Ray\"\n              }), \", provided by the \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/spacy-ray\",\n                children: _jsx(InlineCode, {\n                  children: \"spacy-ray\"\n                })\n              }), \" extension package.\"]\n            })]\n          })]\n        })]\n      }), _jsx(_components.h3, {\n        id: \"new-docs\",\n        children: \"New and updated documentation \"\n      }), _jsxs(Grid, {\n        cols: 2,\n        gutterBottom: false,\n        children: [_jsx(\"div\", {\n          children: _jsxs(_components.p, {\n            children: [\"To help you get started with spaCy v3.0 and the new features, we’ve added\\nseveral new or rewritten documentation pages, including a new usage guide on\\n\", _jsx(_components.a, {\n              href: \"/usage/embeddings-transformers\",\n              children: \"embeddings, transformers and transfer learning\"\n            }), \",\\na guide on \", _jsx(_components.a, {\n              href: \"/usage/training\",\n              children: \"training pipelines and models\"\n            }), \" rewritten from\\nscratch, a page explaining the new \", _jsx(_components.a, {\n              href: \"/usage/projects\",\n              children: \"spaCy projects\"\n            }), \" and updated\\nusage documentation on\\n\", _jsx(_components.a, {\n              href: \"/usage/processing-pipelines#custom-components\",\n              children: \"custom pipeline components\"\n            }), \".\\nWe’ve also added a bunch of new illustrations and new API reference pages\\ndocumenting spaCy’s machine learning \", _jsx(_components.a, {\n              href: \"/api/architectures\",\n              children: \"model architectures\"\n            }), \"\\nand the expected \", _jsx(_components.a, {\n              href: \"/api/data-formats\",\n              children: \"data formats\"\n            }), \". API pages about\\n\", _jsx(_components.a, {\n              href: \"/api/#architecture-pipeline\",\n              children: \"pipeline components\"\n            }), \" now include more information,\\nlike the default config and implementation, and we’ve adopted a more detailed\\nformat for documenting argument and return types.\"]\n          })\n        }), _jsx(Image, {\n          src: \"/images/architecture.svg\",\n          href: \"/api\",\n          alt: \"Library architecture\"\n        })]\n      }), _jsx(Infobox, {\n        title: \"New or reworked documentation\",\n        emoji: \"📖\",\n        list: true,\n        children: _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"**Usage: ** \", _jsx(_components.a, {\n              href: \"/usage/embeddings-transformers\",\n              children: \"Embeddings & Transformers\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/training\",\n              children: \"Training models\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/layers-architectures\",\n              children: \"Layers & Architectures\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/projects\",\n              children: \"Projects\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/processing-pipelines#custom-components\",\n              children: \"Custom pipeline components\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/linguistic-features#custom-tokenizer\",\n              children: \"Custom tokenizers\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/linguistic-features#morphology\",\n              children: \"Morphology\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/linguistic-features#lemmatization\",\n              children: \"Lemmatization\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/linguistic-features#mappings-exceptions\",\n              children: \"Mapping & Exceptions\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/usage/rule-based-matching#dependencymatcher\",\n              children: \"Dependency matching\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"**API Reference: ** \", _jsx(_components.a, {\n              href: \"/api\",\n              children: \"Library architecture\"\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/architectures\",\n              children: \"Model architectures\"\n            }), \", \", _jsx(_components.a, {\n              href: \"/api/data-formats\",\n              children: \"Data formats\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"**New Classes: ** \", _jsx(_components.a, {\n              href: \"/api/example\",\n              children: _jsx(InlineCode, {\n                children: \"Example\"\n              })\n            }), \", \", _jsx(_components.a, {\n              href: \"/api/tok2vec\",\n              children: _jsx(InlineCode, {\n                children: \"Tok2Vec\"\n              })\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/transformer\",\n              children: _jsx(InlineCode, {\n                children: \"Transformer\"\n              })\n            }), \", \", _jsx(_components.a, {\n              href: \"/api/lemmatizer\",\n              children: _jsx(InlineCode, {\n                children: \"Lemmatizer\"\n              })\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/morphologizer\",\n              children: _jsx(InlineCode, {\n                children: \"Morphologizer\"\n              })\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/attributeruler\",\n              children: _jsx(InlineCode, {\n                children: \"AttributeRuler\"\n              })\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/sentencerecognizer\",\n              children: _jsx(InlineCode, {\n                children: \"SentenceRecognizer\"\n              })\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/dependencymatcher\",\n              children: _jsx(InlineCode, {\n                children: \"DependencyMatcher\"\n              })\n            }), \", \", _jsx(_components.a, {\n              href: \"/api/pipe\",\n              children: _jsx(InlineCode, {\n                children: \"TrainablePipe\"\n              })\n            }), \",\\n\", _jsx(_components.a, {\n              href: \"/api/corpus\",\n              children: _jsx(InlineCode, {\n                children: \"Corpus\"\n              })\n            }), \", \", _jsx(_components.a, {\n              href: \"/api/spangroup\",\n              children: _jsx(InlineCode, {\n                children: \"SpanGroup\"\n              })\n            }), \",\"]\n          }), \"\\n\"]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-incompat\",\n      children: [_jsx(_components.h2, {\n        id: \"incompat\",\n        children: \"Backwards Incompatibilities \"\n      }), _jsxs(_components.p, {\n        children: [\"As always, we’ve tried to keep the breaking changes to a minimum and focus on\\nchanges that were necessary to support the new features, fix problems or improve\\nusability. The following section lists the relevant changes to the user-facing\\nAPI. For specific examples of how to rewrite your code, check out the\\n\", _jsx(_components.a, {\n          href: \"#migrating\",\n          children: \"migration guide\"\n        }), \".\"]\n      }), _jsx(Infobox, {\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"Note that spaCy v3.0 now requires \", _jsx(_components.strong, {\n            children: \"Python 3.6+\"\n          }), \".\"]\n        })\n      }), _jsx(_components.h3, {\n        id: \"incompat-api\",\n        children: \"API changes \"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Pipeline package symlinks, the \", _jsx(InlineCode, {\n            children: \"link\"\n          }), \" command and shortcut names are now\\ndeprecated. There can be many \", _jsx(_components.a, {\n            href: \"/models\",\n            children: \"different trained pipelines\"\n          }), \" and not\\njust one “English model”, so you should always use the full package name like\\n\", _jsx(InlineCode, {\n            children: \"en_core_web_sm\"\n          }), \" explicitly.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"A pipeline’s \", _jsx(InlineCode, {\n            children: \"meta.json\"\n          }), \" is now only used to provide meta information like the\\npackage name, author, license and labels. It’s \", _jsx(_components.strong, {\n            children: \"not\"\n          }), \" used to construct the\\nprocessing pipeline anymore. This is all defined in the\\n\", _jsx(_components.a, {\n            href: \"/api/data-formats#config\",\n            children: _jsx(InlineCode, {\n              children: \"config.cfg\"\n            })\n          }), \", which also includes all settings\\nused to train the pipeline.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The \", _jsx(InlineCode, {\n            children: \"train\"\n          }), \", \", _jsx(InlineCode, {\n            children: \"pretrain\"\n          }), \" and \", _jsx(InlineCode, {\n            children: \"debug data\"\n          }), \" commands now only take a\\n\", _jsx(InlineCode, {\n            children: \"config.cfg\"\n          }), \".\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.a, {\n            href: \"/api/language#add_pipe\",\n            children: _jsx(InlineCode, {\n              children: \"Language.add_pipe\"\n            })\n          }), \" now takes the \", _jsx(_components.strong, {\n            children: \"string name\"\n          }), \" of\\nthe component factory instead of the component function.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.strong, {\n            children: \"Custom pipeline components\"\n          }), \" now need to be decorated with the\\n\", _jsx(_components.a, {\n            href: \"/api/language#component\",\n            children: _jsx(InlineCode, {\n              children: \"@Language.component\"\n            })\n          }), \" or\\n\", _jsx(_components.a, {\n            href: \"/api/language#factory\",\n            children: _jsx(InlineCode, {\n              children: \"@Language.factory\"\n            })\n          }), \" decorator.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The \", _jsx(_components.a, {\n            href: \"/api/language#update\",\n            children: _jsx(InlineCode, {\n              children: \"Language.update\"\n            })\n          }), \",\\n\", _jsx(_components.a, {\n            href: \"/api/language#evaluate\",\n            children: _jsx(InlineCode, {\n              children: \"Language.evaluate\"\n            })\n          }), \" and\\n\", _jsx(_components.a, {\n            href: \"/api/pipe#update\",\n            children: _jsx(InlineCode, {\n              children: \"TrainablePipe.update\"\n            })\n          }), \" methods now all take batches of\\n\", _jsx(_components.a, {\n            href: \"/api/example\",\n            children: _jsx(InlineCode, {\n              children: \"Example\"\n            })\n          }), \" objects instead of \", _jsx(InlineCode, {\n            children: \"Doc\"\n          }), \" and \", _jsx(InlineCode, {\n            children: \"GoldParse\"\n          }), \" objects, or\\nraw text and a dictionary of annotations.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The \", _jsx(InlineCode, {\n            children: \"begin_training\"\n          }), \" methods have been renamed to \", _jsx(InlineCode, {\n            children: \"initialize\"\n          }), \" and now take a\\nfunction that returns a sequence of \", _jsx(InlineCode, {\n            children: \"Example\"\n          }), \" objects to initialize the model\\ninstead of a list of tuples.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.a, {\n            href: \"/api/matcher#add\",\n            children: _jsx(InlineCode, {\n              children: \"Matcher.add\"\n            })\n          }), \" and\\n\", _jsx(_components.a, {\n            href: \"/api/phrasematcher#add\",\n            children: _jsx(InlineCode, {\n              children: \"PhraseMatcher.add\"\n            })\n          }), \" now only accept a list of\\npatterns as the second argument (instead of a variable number of arguments).\\nThe \", _jsx(InlineCode, {\n            children: \"on_match\"\n          }), \" callback becomes an optional keyword argument.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The \", _jsx(InlineCode, {\n            children: \"Doc\"\n          }), \" flags like \", _jsx(InlineCode, {\n            children: \"Doc.is_parsed\"\n          }), \" or \", _jsx(InlineCode, {\n            children: \"Doc.is_tagged\"\n          }), \" have been replaced by\\n\", _jsx(_components.a, {\n            href: \"/api/doc#has_annotation\",\n            children: _jsx(InlineCode, {\n              children: \"Doc.has_annotation\"\n            })\n          }), \".\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The \", _jsx(InlineCode, {\n            children: \"spacy.gold\"\n          }), \" module has been renamed to\\n\", _jsx(_components.a, {\n            href: \"https://github.com/explosion/spaCy/tree/master/spacy/training\",\n            children: _jsx(InlineCode, {\n              children: \"spacy.training\"\n            })\n          }), \".\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The \", _jsx(InlineCode, {\n            children: \"PRON_LEMMA\"\n          }), \" symbol and \", _jsx(InlineCode, {\n            children: \"-PRON-\"\n          }), \" as an indicator for pronoun lemmas has\\nbeen removed.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The \", _jsx(InlineCode, {\n            children: \"TAG_MAP\"\n          }), \" and \", _jsx(InlineCode, {\n            children: \"MORPH_RULES\"\n          }), \" in the language data have been replaced by the\\nmore flexible \", _jsx(_components.a, {\n            href: \"/api/attributeruler\",\n            children: _jsx(InlineCode, {\n              children: \"AttributeRuler\"\n            })\n          }), \".\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The \", _jsx(_components.a, {\n            href: \"/api/lemmatizer\",\n            children: _jsx(InlineCode, {\n              children: \"Lemmatizer\"\n            })\n          }), \" is now a standalone pipeline component and\\ndoesn’t provide lemmas by default or switch automatically between lookup and\\nrule-based lemmas. You can now add it to your pipeline explicitly and set its\\nmode on initialization.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Various keyword arguments across functions and methods are now explicitly\\ndeclared as \", _jsx(_components.strong, {\n            children: \"keyword-only\"\n          }), \" arguments. Those arguments are documented\\naccordingly across the API reference using the \", _jsx(Tag, {\n            children: \"keyword-only\"\n          }), \" tag.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"The \", _jsx(InlineCode, {\n            children: \"textcat\"\n          }), \" pipeline component is now only applicable for classification of\\nmutually exclusives classes - i.e. one predicted class per input sentence or\\ndocument. To perform multi-label classification, use the new\\n\", _jsx(InlineCode, {\n            children: \"textcat_multilabel\"\n          }), \" component instead.\"]\n        }), \"\\n\"]\n      }), _jsx(_components.h3, {\n        id: \"incompat-removed\",\n        children: \"Removed or renamed API \"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Removed\"\n            }), _jsx(_components.th, {\n              children: \"Replacement\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"Language.disable_pipes\"\n              })\n            }), _jsxs(_components.td, {\n              children: [_jsx(_components.a, {\n                href: \"/api/language#select_pipes\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.select_pipes\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/language#disable_pipe\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.disable_pipe\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/language#enable_pipe\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.enable_pipe\"\n                })\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"Language.begin_training\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"Pipe.begin_training\"\n              }), \", …\"]\n            }), _jsxs(_components.td, {\n              children: [_jsx(_components.a, {\n                href: \"/api/language#initialize\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.initialize\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/pipe#initialize\",\n                children: _jsx(InlineCode, {\n                  children: \"Pipe.initialize\"\n                })\n              }), \", …\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"Doc.is_tagged\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"Doc.is_parsed\"\n              }), \", …\"]\n            }), _jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/doc#has_annotation\",\n                children: _jsx(InlineCode, {\n                  children: \"Doc.has_annotation\"\n                })\n              })\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"GoldParse\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/example\",\n                children: _jsx(InlineCode, {\n                  children: \"Example\"\n                })\n              })\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"GoldCorpus\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/corpus\",\n                children: _jsx(InlineCode, {\n                  children: \"Corpus\"\n                })\n              })\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"KnowledgeBase.load_bulk\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"KnowledgeBase.dump\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [_jsx(_components.a, {\n                href: \"/api/kb#from_disk\",\n                children: _jsx(InlineCode, {\n                  children: \"KnowledgeBase.from_disk\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/kb#to_disk\",\n                children: _jsx(InlineCode, {\n                  children: \"KnowledgeBase.to_disk\"\n                })\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"KnowledgeBase.get_candidates\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/kb#get_alias_candidates\",\n                children: _jsx(InlineCode, {\n                  children: \"KnowledgeBase.get_alias_candidates\"\n                })\n              })\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"Matcher.pipe\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"PhraseMatcher.pipe\"\n              })]\n            }), _jsx(_components.td, {\n              children: \"not needed\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"gold.offsets_from_biluo_tags\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"gold.spans_from_biluo_tags\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"gold.biluo_tags_from_offsets\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [_jsx(_components.a, {\n                href: \"/api/top-level#biluo_tags_to_offsets\",\n                children: _jsx(InlineCode, {\n                  children: \"training.biluo_tags_to_offsets\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/top-level#biluo_tags_to_spans\",\n                children: _jsx(InlineCode, {\n                  children: \"training.biluo_tags_to_spans\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/top-level#offsets_to_biluo_tags\",\n                children: _jsx(InlineCode, {\n                  children: \"training.offsets_to_biluo_tags\"\n                })\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"spacy init-model\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/cli#init-vectors\",\n                children: _jsx(InlineCode, {\n                  children: \"spacy init vectors\"\n                })\n              })\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"spacy debug-data\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/cli#debug-data\",\n                children: _jsx(InlineCode, {\n                  children: \"spacy debug data\"\n                })\n              })\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"spacy profile\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/cli#debug-profile\",\n                children: _jsx(InlineCode, {\n                  children: \"spacy debug profile\"\n                })\n              })\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"spacy link\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"util.set_data_path\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"util.get_data_path\"\n              })]\n            }), _jsx(_components.td, {\n              children: \"not needed, symlinks are deprecated\"\n            })]\n          })]\n        })]\n      }), _jsxs(_components.p, {\n        children: [\"The following methods, attributes and arguments were removed in v3.0. Most of\\nthem have been \", _jsx(_components.strong, {\n          children: \"deprecated for a while\"\n        }), \" and many would previously raise\\nerrors. Many of them were also mostly internals. If you’ve been working with\\nmore recent versions of spaCy v2.x, it’s \", _jsx(_components.strong, {\n          children: \"unlikely\"\n        }), \" that your code relied on\\nthem.\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Removed\"\n            }), _jsx(_components.th, {\n              children: \"Replacement\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"Doc.tokens_from_list\"\n              })\n            }), _jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/doc#init\",\n                children: _jsx(InlineCode, {\n                  children: \"Doc.__init__\"\n                })\n              })\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"Doc.merge\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"Span.merge\"\n              })]\n            }), _jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/doc#retokenize\",\n                children: _jsx(InlineCode, {\n                  children: \"Doc.retokenize\"\n                })\n              })\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"Token.string\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"Span.string\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"Span.upper\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"Span.lower\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [_jsx(_components.a, {\n                href: \"/api/span#attributes\",\n                children: _jsx(InlineCode, {\n                  children: \"Span.text\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/token#attributes\",\n                children: _jsx(InlineCode, {\n                  children: \"Token.text\"\n                })\n              })]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"Language.tagger\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"Language.parser\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"Language.entity\"\n              })]\n            }), _jsx(_components.td, {\n              children: _jsx(_components.a, {\n                href: \"/api/language#get_pipe\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.get_pipe\"\n                })\n              })\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [\"keyword-arguments like \", _jsx(InlineCode, {\n                children: \"vocab=False\"\n              }), \" on \", _jsx(InlineCode, {\n                children: \"to_disk\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"from_disk\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"to_bytes\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"from_bytes\"\n              })]\n            }), _jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"exclude=[\\\"vocab\\\"]\"\n              })\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"n_threads\"\n              }), \" argument on \", _jsx(_components.a, {\n                href: \"/api/tokenizer\",\n                children: _jsx(InlineCode, {\n                  children: \"Tokenizer\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/matcher\",\n                children: _jsx(InlineCode, {\n                  children: \"Matcher\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/phrasematcher\",\n                children: _jsx(InlineCode, {\n                  children: \"PhraseMatcher\"\n                })\n              })]\n            }), _jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"n_process\"\n              })\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"verbose\"\n              }), \" argument on \", _jsx(_components.a, {\n                href: \"/api/language#evaluate\",\n                children: _jsx(InlineCode, {\n                  children: \"Language.evaluate\"\n                })\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"logging (\", _jsx(InlineCode, {\n                children: \"DEBUG\"\n              }), \")\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"SentenceSegmenter\"\n              }), \" hook, \", _jsx(InlineCode, {\n                children: \"SimilarityHook\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [_jsx(_components.a, {\n                href: \"/usage/processing-pipelines#custom-components-user-hooks\",\n                children: \"user hooks\"\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/sentencizer\",\n                children: _jsx(InlineCode, {\n                  children: \"Sentencizer\"\n                })\n              }), \", \", _jsx(_components.a, {\n                href: \"/api/sentencerecognizer\",\n                children: _jsx(InlineCode, {\n                  children: \"SentenceRecognizer\"\n                })\n              })]\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-migrating\",\n      children: [_jsx(_components.h2, {\n        id: \"migrating\",\n        children: \"Migrating from v2.x \"\n      }), _jsx(_components.h3, {\n        id: \"migrating-downloading-models\",\n        children: \"Downloading and loading trained pipelines \"\n      }), _jsxs(_components.p, {\n        children: [\"Symlinks and shortcuts like \", _jsx(InlineCode, {\n          children: \"en\"\n        }), \" have been deprecated for a while, and are now\\nnot supported anymore. There are \", _jsx(_components.a, {\n          href: \"/models\",\n          children: \"many different trained pipelines\"\n        }), \"\\nwith different capabilities and not just one “English model”. In order to\\ndownload and load a package, you should always use its full name – for instance,\\n\", _jsx(_components.a, {\n          href: \"/models/en#en_core_web_sm\",\n          children: _jsx(InlineCode, {\n            children: \"en_core_web_sm\"\n          })\n        }), \".\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"- python -m spacy download en\\n+ python -m spacy download en_core_web_sm\\n\"\n        })\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"- nlp = spacy.load(\\\"en\\\")\\n+ nlp = spacy.load(\\\"en_core_web_sm\\\")\\n\"\n        })\n      }), _jsx(_components.h3, {\n        id: \"migrating-pipeline-components\",\n        children: \"Custom pipeline components and factories \"\n      }), _jsxs(_components.p, {\n        children: [\"Custom pipeline components now have to be registered explicitly using the\\n\", _jsx(_components.a, {\n          href: \"/api/language#component\",\n          children: _jsx(InlineCode, {\n            children: \"@Language.component\"\n          })\n        }), \" or\\n\", _jsx(_components.a, {\n          href: \"/api/language#factory\",\n          children: _jsx(InlineCode, {\n            children: \"@Language.factory\"\n          })\n        }), \" decorator. For simple functions\\nthat take a \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" and return it, all you have to do is add the\\n\", _jsx(InlineCode, {\n          children: \"@Language.component\"\n        }), \" decorator to it and assign it a name:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          title: \"Stateless function components\",\n          children: \"+ from spacy.language import Language\\n\\n+ @Language.component(\\\"my_component\\\")\\ndef my_component(doc):\\n    return doc\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"For class components that are initialized with settings and/or the shared \", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \"\\nobject, you can use the \", _jsx(InlineCode, {\n          children: \"@Language.factory\"\n        }), \" decorator. Also make sure that that\\nthe method used to initialize the factory has \", _jsx(_components.strong, {\n          children: \"two named arguments\"\n        }), \": \", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \"\\n(the current \", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \" object) and \", _jsx(InlineCode, {\n          children: \"name\"\n        }), \" (the string name of the component\\ninstance).\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          title: \"Stateful class components\",\n          children: \"+ from spacy.language import Language\\n\\n+ @Language.factory(\\\"my_component\\\")\\nclass MyComponent:\\n-   def __init__(self, nlp):\\n+   def __init__(self, nlp, name):\\n        self.nlp = nlp\\n\\n    def __call__(self, doc):\\n        return doc\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Instead of decorating your class, you could also add a factory function that\\ntakes the arguments \", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"name\"\n        }), \" and returns an instance of your component:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          title: \"Stateful class components with factory function\",\n          children: \"+ from spacy.language import Language\\n\\n+ @Language.factory(\\\"my_component\\\")\\n+ def create_my_component(nlp, name):\\n+     return MyComponent(nlp)\\n\\nclass MyComponent:\\n    def __init__(self, nlp):\\n        self.nlp = nlp\\n\\n    def __call__(self, doc):\\n        return doc\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"@Language.component\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"@Language.factory\"\n        }), \" decorators now take care of\\nadding an entry to the component factories, so spaCy knows how to load a\\ncomponent back in from its string name. You won’t have to write to\\n\", _jsx(InlineCode, {\n          children: \"Language.factories\"\n        }), \" manually anymore.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"- Language.factories[\\\"my_component\\\"] = lambda nlp, **cfg: MyComponent(nlp)\\n\"\n        })\n      }), _jsx(_components.h4, {\n        id: \"migrating-add-pipe\",\n        children: \"Adding components to the pipeline \"\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.a, {\n          href: \"/api/language#add_pipe\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.add_pipe\"\n          })\n        }), \" method now takes the \", _jsx(_components.strong, {\n          children: \"string\\nname\"\n        }), \" of the component factory instead of a callable component. This allows\\nspaCy to track and serialize components that have been added and their settings.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"+ @Language.component(\\\"my_component\\\")\\ndef my_component(doc):\\n    return doc\\n\\n- nlp.add_pipe(my_component)\\n+ nlp.add_pipe(\\\"my_component\\\")\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          href: \"/api/language#add_pipe\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.add_pipe\"\n          })\n        }), \" now also returns the pipeline component\\nitself, so you can access its attributes. The\\n\", _jsx(_components.a, {\n          href: \"/api/language#create_pipe\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.create_pipe\"\n          })\n        }), \" method is now mostly internals\\nand you typically shouldn’t have to use it in your code.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"- parser = nlp.create_pipe(\\\"parser\\\")\\n- nlp.add_pipe(parser)\\n+ parser = nlp.add_pipe(\\\"parser\\\")\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"If you need to add a component from an existing trained pipeline, you can now\\nuse the \", _jsx(InlineCode, {\n          children: \"source\"\n        }), \" argument on \", _jsx(_components.a, {\n          href: \"/api/language#add_pipe\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.add_pipe\"\n          })\n        }), \". This will\\ncheck that the component is compatible, and take care of porting over all\\nconfig. During training, you can also reference existing trained components in\\nyour \", _jsx(_components.a, {\n          href: \"/usage/training#config-components\",\n          children: \"config\"\n        }), \" and decide whether or not they\\nshould be updated with more data.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"config.cfg (excerpt)\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"[components.ner]\\nsource = \\\"en_core_web_sm\\\"\\ncomponent = \\\"ner\\\"\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"source_nlp = spacy.load(\\\"en_core_web_sm\\\")\\nnlp = spacy.blank(\\\"en\\\")\\n- ner = source_nlp.get_pipe(\\\"ner\\\")\\n- nlp.add_pipe(ner)\\n+ nlp.add_pipe(\\\"ner\\\", source=source_nlp)\\n\"\n        })\n      }), _jsx(_components.h4, {\n        id: \"migrating-configure-pipe\",\n        children: \"Configuring pipeline components with settings \"\n      }), _jsxs(_components.p, {\n        children: [\"Because pipeline components are now added using their string names, you won’t\\nhave to instantiate the \", _jsx(_components.a, {\n          href: \"/api/#architecture-pipeline\",\n          children: \"component classes\"\n        }), \"\\ndirectly anymore. To configure the component, you can now use the \", _jsx(InlineCode, {\n          children: \"config\"\n        }), \"\\nargument on \", _jsx(_components.a, {\n          href: \"/api/language#add_pipe\",\n          children: _jsx(InlineCode, {\n            children: \"nlp.add_pipe\"\n          })\n        }), \".\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"config.cfg (excerpt)\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"[components.sentencizer]\\nfactory = \\\"sentencizer\\\"\\npunct_chars = [\\\"!\\\", \\\".\\\", \\\"?\\\"]\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"punct_chars = [\\\"!\\\", \\\".\\\", \\\"?\\\"]\\n- sentencizer = Sentencizer(punct_chars=punct_chars)\\n+ sentencizer = nlp.add_pipe(\\\"sentencizer\\\", config={\\\"punct_chars\\\": punct_chars})\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"config\"\n        }), \" corresponds to the component settings in the\\n\", _jsx(_components.a, {\n          href: \"/usage/training#config-components\",\n          children: _jsx(InlineCode, {\n            children: \"config.cfg\"\n          })\n        }), \" and will overwrite the default\\nconfig defined by the components.\"]\n      }), _jsxs(Infobox, {\n        variant: \"warning\",\n        title: \"Important note on config values\",\n        children: [_jsxs(_components.p, {\n          children: [\"Config values you pass to components \", _jsx(_components.strong, {\n            children: \"need to be JSON-serializable\"\n          }), \" and can’t\\nbe arbitrary Python objects. Otherwise, the settings you provide can’t be\\nrepresented in the \", _jsx(InlineCode, {\n            children: \"config.cfg\"\n          }), \" and spaCy has no way of knowing how to re-create\\nyour component with the same settings when you load the pipeline back in. If you\\nneed to pass arbitrary objects to a component, use a\\n\", _jsx(_components.a, {\n            href: \"/usage/processing-pipelines#example-stateful-components\",\n            children: \"registered function\"\n          }), \":\"]\n        }), _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-diff\",\n            lang: \"diff\",\n            children: \"- config = {\\\"model\\\": MyTaggerModel()}\\n+ config= {\\\"model\\\": {\\\"@architectures\\\": \\\"MyTaggerModel\\\"}}\\ntagger = nlp.add_pipe(\\\"tagger\\\", config=config)\\n\"\n          })\n        })]\n      }), _jsx(_components.h3, {\n        id: \"migrating-matcher\",\n        children: \"Adding match patterns \"\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.a, {\n          href: \"/api/matcher#add\",\n          children: _jsx(InlineCode, {\n            children: \"Matcher.add\"\n          })\n        }), \",\\n\", _jsx(_components.a, {\n          href: \"/api/phrasematcher#add\",\n          children: _jsx(InlineCode, {\n            children: \"PhraseMatcher.add\"\n          })\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"/api/dependencymatcher#add\",\n          children: _jsx(InlineCode, {\n            children: \"DependencyMatcher.add\"\n          })\n        }), \" methods now only accept a\\n\", _jsx(_components.strong, {\n          children: \"list of patterns\"\n        }), \" as the second argument (instead of a variable number of\\narguments). The \", _jsx(InlineCode, {\n          children: \"on_match\"\n        }), \" callback becomes an optional keyword argument.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"matcher = Matcher(nlp.vocab)\\npatterns = [[{\\\"TEXT\\\": \\\"Google\\\"}, {\\\"TEXT\\\": \\\"Now\\\"}], [{\\\"TEXT\\\": \\\"GoogleNow\\\"}]]\\n- matcher.add(\\\"GoogleNow\\\", on_match, *patterns)\\n+ matcher.add(\\\"GoogleNow\\\", patterns, on_match=on_match)\\n\"\n        })\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"matcher = PhraseMatcher(nlp.vocab)\\npatterns = [nlp(\\\"health care reform\\\"), nlp(\\\"healthcare reform\\\")]\\n- matcher.add(\\\"HEALTH\\\", on_match, *patterns)\\n+ matcher.add(\\\"HEALTH\\\", patterns, on_match=on_match)\\n\"\n        })\n      }), _jsx(_components.h3, {\n        id: \"migrating-tokenizer-exceptions\",\n        children: \"Migrating attributes in tokenizer exceptions \"\n      }), _jsxs(_components.p, {\n        children: [\"Tokenizer exceptions are now only allowed to set \", _jsx(InlineCode, {\n          children: \"ORTH\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"NORM\"\n        }), \" values as\\npart of the token attributes. Exceptions for other attributes such as \", _jsx(InlineCode, {\n          children: \"TAG\"\n        }), \" and\\n\", _jsx(InlineCode, {\n          children: \"LEMMA\"\n        }), \" should be moved to an \", _jsx(_components.a, {\n          href: \"/api/attributeruler\",\n          children: _jsx(InlineCode, {\n            children: \"AttributeRuler\"\n          })\n        }), \" component:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"nlp = spacy.blank(\\\"en\\\")\\n- nlp.tokenizer.add_special_case(\\\"don't\\\", [{\\\"ORTH\\\": \\\"do\\\"}, {\\\"ORTH\\\": \\\"n't\\\", \\\"LEMMA\\\": \\\"not\\\"}])\\n+ nlp.tokenizer.add_special_case(\\\"don't\\\", [{\\\"ORTH\\\": \\\"do\\\"}, {\\\"ORTH\\\": \\\"n't\\\"}])\\n+ ruler = nlp.add_pipe(\\\"attribute_ruler\\\")\\n+ ruler.add(patterns=[[{\\\"ORTH\\\": \\\"n't\\\"}]], attrs={\\\"LEMMA\\\": \\\"not\\\"})\\n\"\n        })\n      }), _jsx(_components.h3, {\n        id: \"migrating-training-mappings-exceptions\",\n        children: \"Migrating tag maps and morph rules \"\n      }), _jsxs(_components.p, {\n        children: [\"Instead of defining a \", _jsx(InlineCode, {\n          children: \"tag_map\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"morph_rules\"\n        }), \" in the language data, spaCy\\nv3.0 now manages mappings and exceptions with a separate and more flexible\\npipeline component, the \", _jsx(_components.a, {\n          href: \"/api/attributeruler\",\n          children: _jsx(InlineCode, {\n            children: \"AttributeRuler\"\n          })\n        }), \". See the\\n\", _jsx(_components.a, {\n          href: \"/usage/linguistic-features#mappings-exceptions\",\n          children: \"usage guide\"\n        }), \" for examples. If\\nyou have tag maps and morph rules in the v2.x format, you can load them into the\\nattribute ruler before training using the \", _jsx(InlineCode, {\n          children: \"[initialize]\"\n        }), \" block of your config.\"]\n      }), _jsx(_components.h3, {\n        children: \"Using Lexeme Tables\"\n      }), _jsxs(_components.p, {\n        children: [\"To use tables like \", _jsx(InlineCode, {\n          children: \"lexeme_prob\"\n        }), \" when training a model from scratch, you need to\\nadd an entry to the \", _jsx(InlineCode, {\n          children: \"initialize\"\n        }), \" block in your config. Here’s what that looks\\nlike for the existing trained pipelines:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ini\",\n          lang: \"ini\",\n          children: \"[initialize.lookups]\\n@misc = \\\"spacy.LookupsDataLoader.v1\\\"\\nlang = ${nlp.lang}\\ntables = [\\\"lexeme_norm\\\"]\\n\"\n        })\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"What does the initialization do?\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"The \", _jsx(InlineCode, {\n            children: \"[initialize]\"\n          }), \" block is used when\\n\", _jsx(_components.a, {\n            href: \"/api/language#initialize\",\n            children: _jsx(InlineCode, {\n              children: \"nlp.initialize\"\n            })\n          }), \" is called (usually right before\\ntraining). It lets you define data resources for initializing the pipeline in\\nyour \", _jsx(InlineCode, {\n            children: \"config.cfg\"\n          }), \". After training, the rules are saved to disk with the\\nexported pipeline, so your runtime model doesn’t depend on local data. For\\ndetails see the \", _jsx(_components.a, {\n            href: \"/usage/training/#config-lifecycle\",\n            children: \"config lifecycle\"\n          }), \" and\\n\", _jsx(_components.a, {\n            href: \"/usage/training/#initialization\",\n            children: \"initialization\"\n          }), \" docs.\"]\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ini\",\n          lang: \"ini\",\n          title: \"config.cfg (excerpt)\",\n          children: \"[initialize.components.attribute_ruler]\\n\\n[initialize.components.attribute_ruler.tag_map]\\n@readers = \\\"srsly.read_json.v1\\\"\\npath = \\\"./corpus/tag_map.json\\\"\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"AttributeRuler\"\n        }), \" also provides two handy helper methods\\n\", _jsx(_components.a, {\n          href: \"/api/attributeruler#load_from_tag_map\",\n          children: _jsx(InlineCode, {\n            children: \"load_from_tag_map\"\n          })\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"/api/attributeruler#load_from_morph_rules\",\n          children: _jsx(InlineCode, {\n            children: \"load_from_morph_rules\"\n          })\n        }), \" that let\\nyou load in your existing tag map or morph rules:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"nlp = spacy.blank(\\\"en\\\")\\n- nlp.vocab.morphology.load_tag_map(YOUR_TAG_MAP)\\n+ ruler = nlp.add_pipe(\\\"attribute_ruler\\\")\\n+ ruler.load_from_tag_map(YOUR_TAG_MAP)\\n\"\n        })\n      }), _jsx(_components.h3, {\n        id: \"migrating-doc-flags\",\n        children: \"Migrating Doc flags \"\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.a, {\n          href: \"/api/doc\",\n          children: _jsx(InlineCode, {\n            children: \"Doc\"\n          })\n        }), \" flags \", _jsx(InlineCode, {\n          children: \"Doc.is_tagged\"\n        }), \", \", _jsx(InlineCode, {\n          children: \"Doc.is_parsed\"\n        }), \", \", _jsx(InlineCode, {\n          children: \"Doc.is_nered\"\n        }), \" and\\n\", _jsx(InlineCode, {\n          children: \"Doc.is_sentenced\"\n        }), \" are deprecated in v3.0 and replaced by\\n\", _jsx(_components.a, {\n          href: \"/api/doc#has_annotation\",\n          children: _jsx(InlineCode, {\n            children: \"Doc.has_annotation\"\n          })\n        }), \" method, which refers to the\\ntoken attribute symbols (the same symbols used in \", _jsx(_components.a, {\n          href: \"/api/matcher\",\n          children: _jsx(InlineCode, {\n            children: \"Matcher\"\n          })\n        }), \"\\npatterns):\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"doc = nlp(text)\\n- doc.is_parsed\\n+ doc.has_annotation(\\\"DEP\\\")\\n- doc.is_tagged\\n+ doc.has_annotation(\\\"TAG\\\")\\n- doc.is_sentenced\\n+ doc.has_annotation(\\\"SENT_START\\\")\\n- doc.is_nered\\n+ doc.has_annotation(\\\"ENT_IOB\\\")\\n\"\n        })\n      }), _jsx(_components.h3, {\n        id: \"migrating-training\",\n        children: \"Training pipelines and models \"\n      }), _jsxs(_components.p, {\n        children: [\"To train your pipelines, you should now pretty much always use the\\n\", _jsx(_components.a, {\n          href: \"/api/cli#train\",\n          children: _jsx(InlineCode, {\n            children: \"spacy train\"\n          })\n        }), \" CLI. You shouldn’t have to put together your own\\ntraining scripts anymore, unless you \", _jsx(_components.em, {\n          children: \"really\"\n        }), \" want to. The training commands now\\nuse a \", _jsx(_components.a, {\n          href: \"/usage/training#config\",\n          children: \"flexible config file\"\n        }), \" that describes all training\\nsettings and hyperparameters, as well as your pipeline, components and\\narchitectures to use. The \", _jsx(InlineCode, {\n          children: \"--code\"\n        }), \" argument lets you pass in code containing\\n\", _jsx(_components.a, {\n          href: \"/usage/training#custom-code\",\n          children: \"custom registered functions\"\n        }), \" that you can\\nreference in your config. To get started, check out the\\n\", _jsx(_components.a, {\n          href: \"/usage/training#quickstart\",\n          children: \"quickstart widget\"\n        }), \".\"]\n      }), _jsx(_components.h4, {\n        id: \"migrating-training-format\",\n        children: \"Binary .spacy training data format \"\n      }), _jsxs(_components.p, {\n        children: [\"spaCy v3.0 uses a new\\n\", _jsx(_components.a, {\n          href: \"/api/data-formats#binary-training\",\n          children: \"binary training data format\"\n        }), \" created by\\nserializing a \", _jsx(_components.a, {\n          href: \"/api/docbin\",\n          children: _jsx(InlineCode, {\n            children: \"DocBin\"\n          })\n        }), \", which represents a collection of \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \"\\nobjects. This means that you can train spaCy pipelines using the same format it\\noutputs: annotated \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" objects. The binary format is extremely \", _jsx(_components.strong, {\n          children: \"efficient in\\nstorage\"\n        }), \", especially when packing multiple documents together. You can convert\\nyour existing JSON-formatted data using the \", _jsx(_components.a, {\n          href: \"/api/cli#convert\",\n          children: _jsx(InlineCode, {\n            children: \"spacy convert\"\n          })\n        }), \"\\ncommand, which outputs \", _jsx(InlineCode, {\n          children: \".spacy\"\n        }), \" files:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ python -m spacy convert ./training.json ./output\\n\"\n        })\n      }), _jsx(_components.h4, {\n        id: \"migrating-training-config\",\n        children: \"Training config \"\n      }), _jsxs(_components.p, {\n        children: [\"The easiest way to get started with a training config is to use the\\n\", _jsx(_components.a, {\n          href: \"/api/cli#init-config\",\n          children: _jsx(InlineCode, {\n            children: \"init config\"\n          })\n        }), \" command or the\\n\", _jsx(_components.a, {\n          href: \"/usage/training#quickstart\",\n          children: \"quickstart widget\"\n        }), \". You can define your\\nrequirements, and it will auto-generate a starter config with the best-matching\\ndefault settings.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ python -m spacy init config ./config.cfg --lang en --pipeline tagger,parser\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"If you’ve exported a starter config from our\\n\", _jsx(_components.a, {\n          href: \"/usage/training#quickstart\",\n          children: \"quickstart widget\"\n        }), \", you can use the\\n\", _jsx(_components.a, {\n          href: \"/api/cli#init-fill-config\",\n          children: _jsx(InlineCode, {\n            children: \"init fill-config\"\n          })\n        }), \" to fill it with all default\\nvalues. You can then use the auto-generated \", _jsx(InlineCode, {\n          children: \"config.cfg\"\n        }), \" for training:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"- python -m spacy train en ./output ./train.json ./dev.json\\n--pipeline tagger,parser --cnn-window 1 --bilstm-depth 0\\n+ python -m spacy train ./config.cfg --output ./output\\n\"\n        })\n      }), _jsx(Project, {\n        id: \"pipelines/tagger_parser_ud\",\n        children: _jsxs(_components.p, {\n          children: [\"The easiest way to get started is to clone a \", _jsx(_components.a, {\n            href: \"/usage/projects\",\n            children: \"project template\"\n          }), \"\\nand run it – for example, this end-to-end template that lets you train a\\n\", _jsx(_components.strong, {\n            children: \"part-of-speech tagger\"\n          }), \" and \", _jsx(_components.strong, {\n            children: \"dependency parser\"\n          }), \" on a Universal Dependencies\\ntreebank.\"]\n        })\n      }), _jsx(_components.h4, {\n        children: \"Modifying tokenizer settings\"\n      }), _jsxs(_components.p, {\n        children: [\"If you were using a base model with \", _jsx(InlineCode, {\n          children: \"spacy train\"\n        }), \" to customize the tokenizer\\nsettings in v2, your modifications can be provided in the\\n\", _jsx(InlineCode, {\n          children: \"[initialize.before_init]\"\n        }), \" callback.\"]\n      }), _jsx(_components.p, {\n        children: \"Write a registered callback that modifies the tokenizer settings and specify\\nthis callback in your config:\"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"config.cfg\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"[initialize]\\n\\n[initialize.before_init]\\n@callbacks = \\\"customize_tokenizer\\\"\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"functions.py\",\n          children: \"from spacy.util import registry, compile_suffix_regex\\n\\n@registry.callbacks(\\\"customize_tokenizer\\\")\\ndef make_customize_tokenizer():\\n    def customize_tokenizer(nlp):\\n        # remove a suffix\\n        suffixes = list(nlp.Defaults.suffixes)\\n        suffixes.remove(\\\"\\\\\\\\[\\\")\\n        suffix_regex = compile_suffix_regex(suffixes)\\n        nlp.tokenizer.suffix_search = suffix_regex.search\\n\\n        # add a special case\\n        nlp.tokenizer.add_special_case(\\\"_SPECIAL_\\\", [{\\\"ORTH\\\": \\\"_SPECIAL_\\\"}])\\n    return customize_tokenizer\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"When training, provide the function above with the \", _jsx(InlineCode, {\n          children: \"--code\"\n        }), \" option:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ python -m spacy train config.cfg --code ./functions.py\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"The train step requires the \", _jsx(InlineCode, {\n          children: \"--code\"\n        }), \" option with your registered functions from\\nthe \", _jsx(InlineCode, {\n          children: \"[initialize]\"\n        }), \" block, but since those callbacks are only required during the\\ninitialization step, you don’t need to provide them with the final pipeline\\npackage. However, to make it easier for others to replicate your training setup,\\nyou can choose to package the initialization callbacks with the pipeline package\\nor to publish them separately.\"]\n      }), _jsx(_components.h4, {\n        id: \"migrating-training-python\",\n        children: \"Training via the Python API \"\n      }), _jsxs(_components.p, {\n        children: [\"For most use cases, you \", _jsx(_components.strong, {\n          children: \"shouldn’t\"\n        }), \" have to write your own training scripts\\nanymore. Instead, you can use \", _jsx(_components.a, {\n          href: \"/api/cli#train\",\n          children: _jsx(InlineCode, {\n            children: \"spacy train\"\n          })\n        }), \" with a\\n\", _jsx(_components.a, {\n          href: \"/usage/training#config\",\n          children: \"config file\"\n        }), \" and custom\\n\", _jsx(_components.a, {\n          href: \"/usage/training#custom-code\",\n          children: \"registered functions\"\n        }), \" if needed. You can even\\nregister callbacks that can modify the \", _jsx(InlineCode, {\n          children: \"nlp\"\n        }), \" object at different stages of its\\nlifecycle to fully customize it before training.\"]\n      }), _jsxs(_components.p, {\n        children: [\"If you do decide to use the \", _jsx(_components.a, {\n          href: \"/usage/training#api\",\n          children: \"internal training API\"\n        }), \" from\\nPython, you should only need a few small modifications to convert your scripts\\nfrom spaCy v2.x to v3.x. The \", _jsx(_components.a, {\n          href: \"/api/example#from_dict\",\n          children: _jsx(InlineCode, {\n            children: \"Example.from_dict\"\n          })\n        }), \"\\nclassmethod takes a reference \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" and a\\n\", _jsx(_components.a, {\n          href: \"/api/data-formats#dict-input\",\n          children: \"dictionary of annotations\"\n        }), \", similar to the\\n“simple training style” in spaCy v2.x:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          title: \"Migrating Doc and GoldParse\",\n          children: \"doc = nlp.make_doc(\\\"Mark Zuckerberg is the CEO of Facebook\\\")\\nentities = [(0, 15, \\\"PERSON\\\"), (30, 38, \\\"ORG\\\")]\\n- gold = GoldParse(doc, entities=entities)\\n+ example = Example.from_dict(doc, {\\\"entities\\\": entities})\\n\"\n        })\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          title: \"Migrating simple training style\",\n          children: \"text = \\\"Mark Zuckerberg is the CEO of Facebook\\\"\\nannotations = {\\\"entities\\\": [(0, 15, \\\"PERSON\\\"), (30, 38, \\\"ORG\\\")]}\\n+ doc = nlp.make_doc(text)\\n+ example = Example.from_dict(doc, annotations)\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.a, {\n          href: \"/api/language#update\",\n          children: _jsx(InlineCode, {\n            children: \"Language.update\"\n          })\n        }), \",\\n\", _jsx(_components.a, {\n          href: \"/api/language#evaluate\",\n          children: _jsx(InlineCode, {\n            children: \"Language.evaluate\"\n          })\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"/api/pipe#update\",\n          children: _jsx(InlineCode, {\n            children: \"TrainablePipe.update\"\n          })\n        }), \" methods now all take batches of\\n\", _jsx(_components.a, {\n          href: \"/api/example\",\n          children: _jsx(InlineCode, {\n            children: \"Example\"\n          })\n        }), \" objects instead of \", _jsx(InlineCode, {\n          children: \"Doc\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"GoldParse\"\n        }), \" objects, or\\nraw text and a dictionary of annotations.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          title: \"Training loop\",\n          highlight: \"5-8,12\",\n          children: \"TRAIN_DATA = [\\n    (\\\"Who is Shaka Khan?\\\", {\\\"entities\\\": [(7, 17, \\\"PERSON\\\")]}),\\n    (\\\"I like London.\\\", {\\\"entities\\\": [(7, 13, \\\"LOC\\\")]}),\\n]\\nexamples = []\\nfor text, annots in TRAIN_DATA:\\n    examples.append(Example.from_dict(nlp.make_doc(text), annots))\\nnlp.initialize(lambda: examples)\\nfor i in range(20):\\n    random.shuffle(examples)\\n    for batch in minibatch(examples, size=8):\\n        nlp.update(batch)\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [_jsx(InlineCode, {\n          children: \"Language.begin_training\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"TrainablePipe.begin_training\"\n        }), \" have been renamed\\nto \", _jsx(_components.a, {\n          href: \"/api/language#initialize\",\n          children: _jsx(InlineCode, {\n            children: \"Language.initialize\"\n          })\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"/api/pipe#initialize\",\n          children: _jsx(InlineCode, {\n            children: \"TrainablePipe.initialize\"\n          })\n        }), \", and the methods now take a\\nfunction that returns a sequence of \", _jsx(InlineCode, {\n          children: \"Example\"\n        }), \" objects to initialize the model\\ninstead of a list of tuples. The data examples are used to \", _jsx(_components.strong, {\n          children: \"initialize the\\nmodels\"\n        }), \" of trainable pipeline components, which includes validating the\\nnetwork,\\n\", _jsx(_components.a, {\n          href: \"https://thinc.ai/docs/usage-models#validation\",\n          children: \"inferring missing shapes\"\n        }), \" and\\nsetting up the label scheme.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"- nlp.begin_training()\\n+ nlp.initialize(lambda: examples)\\n\"\n        })\n      }), _jsx(_components.h4, {\n        id: \"migrating-training-packaging\",\n        children: \"Packaging trained pipelines \"\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.a, {\n          href: \"/api/cli#package\",\n          children: _jsx(InlineCode, {\n            children: \"spacy package\"\n          })\n        }), \" command now automatically builds the\\ninstallable \", _jsx(InlineCode, {\n          children: \".tar.gz\"\n        }), \" sdist of the Python package, so you don’t have to run this\\nstep manually anymore. To disable the behavior, you can set \", _jsx(InlineCode, {\n          children: \"--build none\"\n        }), \". You\\ncan also choose to build a binary wheel (which installs more efficiently) by\\nsetting \", _jsx(InlineCode, {\n          children: \"--build wheel\"\n        }), \", or to build both the sdist and wheel by setting\\n\", _jsx(InlineCode, {\n          children: \"--build sdist,wheel\"\n        }), \".\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"python -m spacy package ./output ./packages\\n- cd /output/en_pipeline-0.0.0\\n- python setup.py sdist\\n\"\n        })\n      }), _jsx(_components.h4, {\n        id: \"migrating-gold\",\n        children: \"Data utilities and gold module \"\n      }), _jsxs(_components.p, {\n        children: [\"The \", _jsx(InlineCode, {\n          children: \"spacy.gold\"\n        }), \" module has been renamed to \", _jsx(InlineCode, {\n          children: \"spacy.training\"\n        }), \" and the conversion\\nutilities now follow the naming format of \", _jsx(InlineCode, {\n          children: \"x_to_y\"\n        }), \". This mostly affects\\ninternals, but if you’ve been using the span offset conversion utilities\\n\", _jsx(_components.a, {\n          href: \"/api/top-level#offsets_to_biluo_tags\",\n          children: _jsx(InlineCode, {\n            children: \"offsets_to_biluo_tags\"\n          })\n        }), \",\\n\", _jsx(_components.a, {\n          href: \"/api/top-level#biluo_tags_to_offsets\",\n          children: _jsx(InlineCode, {\n            children: \"biluo_tags_to_offsets\"\n          })\n        }), \" or\\n\", _jsx(_components.a, {\n          href: \"/api/top-level#biluo_tags_to_spans\",\n          children: _jsx(InlineCode, {\n            children: \"biluo_tags_to_spans\"\n          })\n        }), \", you’ll have to\\nchange your names and imports:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"- from spacy.gold import biluo_tags_from_offsets, offsets_from_biluo_tags, spans_from_biluo_tags\\n+ from spacy.training import offsets_to_biluo_tags, biluo_tags_to_offsets, biluo_tags_to_spans\\n\"\n        })\n      }), _jsx(_components.h4, {\n        id: \"migrating-plugins\",\n        children: \"Migration notes for plugin maintainers \"\n      }), _jsxs(_components.p, {\n        children: [\"Thanks to everyone who’s been contributing to the spaCy ecosystem by developing\\nand maintaining one of the many awesome \", _jsx(_components.a, {\n          href: \"/universe\",\n          children: \"plugins and extensions\"\n        }), \".\\nWe’ve tried to make it as easy as possible for you to upgrade your packages for\\nspaCy v3.0. The most common use case for plugins is providing pipeline\\ncomponents and extension attributes. When migrating your plugin, double-check\\nthe following:\"]\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Use the \", _jsx(_components.a, {\n            href: \"/api/language#factory\",\n            children: _jsx(InlineCode, {\n              children: \"@Language.factory\"\n            })\n          }), \" decorator to register\\nyour component and assign it a name. This allows users to refer to your\\ncomponents by name and serialize pipelines referencing them. Remove all manual\\nentries to the \", _jsx(InlineCode, {\n            children: \"Language.factories\"\n          }), \".\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Make sure your component factories take at least two \", _jsx(_components.strong, {\n            children: \"named arguments\"\n          }), \":\\n\", _jsx(InlineCode, {\n            children: \"nlp\"\n          }), \" (the current \", _jsx(InlineCode, {\n            children: \"nlp\"\n          }), \" object) and \", _jsx(InlineCode, {\n            children: \"name\"\n          }), \" (the instance name of the added\\ncomponent so you can identify multiple instances of the same component).\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Update all references to \", _jsx(_components.a, {\n            href: \"/api/language#add_pipe\",\n            children: _jsx(InlineCode, {\n              children: \"nlp.add_pipe\"\n            })\n          }), \" in your docs\\nto use \", _jsx(_components.strong, {\n            children: \"string names\"\n          }), \" instead of the component functions.\"]\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          highlight: \"1-5\",\n          children: \"from spacy.language import Language\\n\\n@Language.factory(\\\"my_component\\\", default_config={\\\"some_setting\\\": False})\\ndef create_component(nlp: Language, name: str, some_setting: bool):\\n    return MyCoolComponent(some_setting=some_setting)\\n\\n\\nclass MyCoolComponent:\\n    def __init__(self, some_setting):\\n        self.some_setting = some_setting\\n\\n    def __call__(self, doc):\\n        # Do something to the doc\\n        return doc\\n\"\n        })\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Result in config.cfg\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-ini\",\n            lang: \"ini\",\n            children: \"[components.my_component]\\nfactory = \\\"my_component\\\"\\nsome_setting = true\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-diff\",\n          lang: \"diff\",\n          children: \"import spacy\\nfrom your_plugin import MyCoolComponent\\n\\nnlp = spacy.load(\\\"en_core_web_sm\\\")\\n- component = MyCoolComponent(some_setting=True)\\n- nlp.add_pipe(component)\\n+ nlp.add_pipe(\\\"my_component\\\", config={\\\"some_setting\\\": True})\\n\"\n        })\n      }), _jsx(Infobox, {\n        title: \"Important note on registering factories\",\n        variant: \"warning\",\n        children: _jsxs(_components.p, {\n          children: [\"The \", _jsx(_components.a, {\n            href: \"/api/language#factory\",\n            children: _jsx(InlineCode, {\n              children: \"@Language.factory\"\n            })\n          }), \" decorator takes care of letting\\nspaCy know that a component of that name is available. This means that your\\nusers can add it to the pipeline using its \", _jsx(_components.strong, {\n            children: \"string name\"\n          }), \". However, this\\nrequires the decorator to be executed – so users will still have to \", _jsx(_components.strong, {\n            children: \"import\\nyour plugin\"\n          }), \". Alternatively, your plugin could expose an\\n\", _jsx(_components.a, {\n            href: \"/usage/saving-loading#entry-points\",\n            children: \"entry point\"\n          }), \", which spaCy can read from.\\nThis means that spaCy knows how to initialize \", _jsx(InlineCode, {\n            children: \"my_component\"\n          }), \", even if your\\npackage isn’t imported.\"]\n        })\n      }), _jsx(_components.h4, {\n        id: \"jupyter-notebook-gpu\",\n        children: \"Using GPUs in Jupyter notebooks \"\n      }), _jsxs(_components.p, {\n        children: [\"In Jupyter notebooks, run \", _jsx(_components.a, {\n          href: \"/api/top-level#spacy.prefer_gpu\",\n          children: _jsx(InlineCode, {\n            children: \"prefer_gpu\"\n          })\n        }), \",\\n\", _jsx(_components.a, {\n          href: \"/api/top-level#spacy.require_gpu\",\n          children: _jsx(InlineCode, {\n            children: \"require_gpu\"\n          })\n        }), \" or\\n\", _jsx(_components.a, {\n          href: \"/api/top-level#spacy.require_cpu\",\n          children: _jsx(InlineCode, {\n            children: \"require_cpu\"\n          })\n        }), \" in the same cell as\\n\", _jsx(_components.a, {\n          href: \"/api/top-level#spacy.load\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.load\"\n          })\n        }), \" to ensure that the model is loaded on\\nthe correct device.\"]\n      }), _jsxs(_components.p, {\n        children: [\"Due to a bug related to \", _jsx(InlineCode, {\n          children: \"contextvars\"\n        }), \" (see the\\n\", _jsx(_components.a, {\n          href: \"https://github.com/ipython/ipython/issues/11565\",\n          children: \"bug report\"\n        }), \"), the GPU settings\\nmay not be preserved correctly across cells, resulting in models being loaded on\\nthe wrong device or only partially on GPU.\"]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"What's New in v3.0","teaser":"New features, backwards incompatibilities and migration guide","menu":[["Summary","summary"],["New Features","features"],["Backwards Incompatibilities","incompat"],["Migrating from v2.x","migrating"]]},"scope":{}},"sectionTitle":"Usage Documentation","theme":"blue","section":"usage","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":false,"next":{"slug":"/usage/v3-1","title":"New in v3.1"}},"__N_SSG":true}