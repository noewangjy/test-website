{"pageProps":{"title":"Install spaCy","next":{"slug":"/usage/models","title":"Models & Languages"},"menu":[["Quickstart","quickstart"],["Instructions","installation"],["Troubleshooting","troubleshooting"],["Changelog","changelog"]],"slug":"/usage","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    ul: \"ul\",\n    li: \"li\",\n    em: \"em\"\n  }, _provideComponents(), props.components), {QuickstartInstall, InlineCode, Accordion, Changelog} = _components;\n  if (!Accordion) _missingMdxReference(\"Accordion\", true);\n  if (!Changelog) _missingMdxReference(\"Changelog\", true);\n  if (!InlineCode) _missingMdxReference(\"InlineCode\", true);\n  if (!QuickstartInstall) _missingMdxReference(\"QuickstartInstall\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.section, {\n      children: [_jsx(_components.h2, {\n        hidden: \"true\",\n        children: \"Quickstart \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"📖 Looking for the old docs?\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"To help you make the transition from v2.x to v3.0, we’ve uploaded the old\\nwebsite to \", _jsx(_components.a, {\n            href: \"https://v2.spacy.io/docs\",\n            children: _jsx(_components.strong, {\n              children: \"v2.spacy.io\"\n            })\n          }), \". To see what’s changed\\nand how to migrate, see the \", _jsx(_components.a, {\n            href: \"/usage/v3\",\n            children: \"v3.0 guide\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), _jsx(QuickstartInstall, {\n        id: \"quickstart\"\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-installation\",\n      children: [_jsx(_components.h2, {\n        id: \"installation\",\n        children: \"Installation instructions \"\n      }), _jsxs(_components.p, {\n        children: [\"spaCy is compatible with \", _jsx(_components.strong, {\n          children: \"64-bit CPython 3.6+\"\n        }), \" and runs on \", _jsx(_components.strong, {\n          children: \"Unix/Linux\"\n        }), \",\\n\", _jsx(_components.strong, {\n          children: \"macOS/OS X\"\n        }), \" and \", _jsx(_components.strong, {\n          children: \"Windows\"\n        }), \". The latest spaCy releases are available over\\n\", _jsx(_components.a, {\n          href: \"https://pypi.python.org/pypi/spacy\",\n          children: \"pip\"\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"https://anaconda.org/conda-forge/spacy\",\n          children: \"conda\"\n        }), \".\"]\n      }), _jsx(_components.h3, {\n        id: \"pip\",\n        children: \"pip \"\n      }), _jsxs(_components.p, {\n        children: [\"Using pip, spaCy releases are available as source packages and binary wheels.\\nBefore you install spaCy and its dependencies, make sure that your \", _jsx(InlineCode, {\n          children: \"pip\"\n        }), \",\\n\", _jsx(InlineCode, {\n          children: \"setuptools\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"wheel\"\n        }), \" are up to date.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Download pipelines\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"After installation you typically want to download a trained pipeline. For more\\ninfo and available packages, see the \", _jsx(_components.a, {\n            href: \"/models\",\n            children: \"models directory\"\n          }), \".\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            lang: \"bash\",\n            children: \"$ python -m spacy download en_core_web_sm\\n\\n>>> import spacy\\n>>> nlp = spacy.load(\\\"en_core_web_sm\\\")\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ pip install -U pip setuptools wheel\\n$ pip install -U spacy\\n\"\n        })\n      }), _jsx(_components.p, {\n        children: \"When using pip it is generally recommended to install packages in a virtual\\nenvironment to avoid modifying system state:\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ python -m venv .env\\n$ source .env/bin/activate\\n$ pip install -U pip setuptools wheel\\n$ pip install -U spacy\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"spaCy also lets you install extra dependencies by specifying the following\\nkeywords in brackets, e.g. \", _jsx(InlineCode, {\n          children: \"spacy[ja]\"\n        }), \" or \", _jsx(InlineCode, {\n          children: \"spacy[lookups,transformers]\"\n        }), \" (with\\nmultiple comma-separated extras). See the \", _jsx(InlineCode, {\n          children: \"[options.extras_require]\"\n        }), \" section in\\nspaCy’s \", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spaCy/tree/master/setup.cfg\",\n          children: _jsx(InlineCode, {\n            children: \"setup.cfg\"\n          })\n        }), \" for details on what’s included.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Example\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            lang: \"bash\",\n            children: \"$ pip install spacy[lookups,transformers]\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Name\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"lookups\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Install \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/spacy-lookups-data\",\n                children: _jsx(InlineCode, {\n                  children: \"spacy-lookups-data\"\n                })\n              }), \" for data tables for lemmatization and lexeme normalization. The data is serialized with trained pipelines, so you only need this package if you want to train your own models.\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"transformers\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Install \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/spacy-transformers\",\n                children: _jsx(InlineCode, {\n                  children: \"spacy-transformers\"\n                })\n              }), \". The package will be installed automatically when you install a transformer-based pipeline.\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"cuda\"\n              }), \", …\"]\n            }), _jsxs(_components.td, {\n              children: [\"Install spaCy with GPU support provided by \", _jsx(_components.a, {\n                href: \"https://cupy.chainer.org\",\n                children: \"CuPy\"\n              }), \" for your given CUDA version. See the GPU \", _jsx(_components.a, {\n                href: \"#gpu\",\n                children: \"installation instructions\"\n              }), \" for details and options.\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"apple\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Install \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/thinc-apple-ops\",\n                children: _jsx(InlineCode, {\n                  children: \"thinc-apple-ops\"\n                })\n              }), \" to improve performance on an Apple M1.\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsxs(_components.td, {\n              children: [_jsx(InlineCode, {\n                children: \"ja\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"ko\"\n              }), \", \", _jsx(InlineCode, {\n                children: \"th\"\n              })]\n            }), _jsxs(_components.td, {\n              children: [\"Install additional dependencies required for tokenization for the \", _jsx(_components.a, {\n                href: \"/usage/models#languages\",\n                children: \"languages\"\n              }), \".\"]\n            })]\n          })]\n        })]\n      }), _jsx(_components.h3, {\n        id: \"conda\",\n        children: \"conda \"\n      }), _jsxs(_components.p, {\n        children: [\"Thanks to our great community, we’ve been able to re-add conda support. You can\\nalso install spaCy via \", _jsx(InlineCode, {\n          children: \"conda-forge\"\n        }), \":\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ conda install -c conda-forge spacy\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"For the feedstock including the build recipe and configuration, check out\\n\", _jsx(_components.a, {\n          href: \"https://github.com/conda-forge/spacy-feedstock\",\n          children: \"this repository\"\n        }), \". Note that we\\ncurrently don’t publish any \", _jsx(_components.a, {\n          href: \"#changelog-pre\",\n          children: \"pre-releases\"\n        }), \" on conda.\"]\n      }), _jsx(_components.h3, {\n        id: \"upgrading\",\n        children: \"Upgrading spaCy \"\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Upgrading from v2 to v3\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"Although we’ve tried to keep breaking changes to a minimum, upgrading from\\nspaCy v2.x to v3.x may still require some changes to your code base. For\\ndetails see the sections on \", _jsx(_components.a, {\n            href: \"/usage/v3#incompat\",\n            children: \"backwards incompatibilities\"\n          }), \"\\nand \", _jsx(_components.a, {\n            href: \"/usage/v3#migrating\",\n            children: \"migrating\"\n          }), \". Also remember to download the new\\ntrained pipelines, and retrain your own pipelines.\"]\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"When updating to a newer version of spaCy, it’s generally recommended to start\\nwith a clean virtual environment. If you’re upgrading to a new major version,\\nmake sure you have the latest \", _jsx(_components.strong, {\n          children: \"compatible trained pipelines\"\n        }), \" installed, and\\nthat there are no old and incompatible packages left over in your environment,\\nas this can often lead to unexpected results and errors. If you’ve trained your\\nown models, keep in mind that your train and runtime inputs must match. This\\nmeans you’ll have to \", _jsx(_components.strong, {\n          children: \"retrain your pipelines\"\n        }), \" with the new version.\"]\n      }), _jsxs(_components.p, {\n        children: [\"spaCy also provides a \", _jsx(_components.a, {\n          href: \"/api/cli#validate\",\n          children: _jsx(InlineCode, {\n            children: \"validate\"\n          })\n        }), \" command, which lets you\\nverify that all installed pipeline packages are compatible with your spaCy\\nversion. If incompatible packages are found, tips and installation instructions\\nare printed. It’s recommended to run the command with \", _jsx(InlineCode, {\n          children: \"python -m\"\n        }), \" to make sure\\nyou’re executing the correct version of spaCy.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ pip install -U spacy\\n$ python -m spacy validate\\n\"\n        })\n      }), _jsx(_components.h3, {\n        id: \"gpu\",\n        version: \"2.0.14\",\n        children: \"Run spaCy with GPU \"\n      }), _jsxs(_components.p, {\n        children: [\"As of v2.0, spaCy comes with neural network models that are implemented in our\\nmachine learning library, \", _jsx(_components.a, {\n          href: \"https://thinc.ai\",\n          children: \"Thinc\"\n        }), \". For GPU support, we’ve been\\ngrateful to use the work of Chainer’s \", _jsx(_components.a, {\n          href: \"https://cupy.chainer.org\",\n          children: \"CuPy\"\n        }), \" module,\\nwhich provides a numpy-compatible interface for GPU arrays.\"]\n      }), _jsxs(_components.p, {\n        children: [\"spaCy can be installed for a CUDA-compatible GPU by specifying \", _jsx(InlineCode, {\n          children: \"spacy[cuda]\"\n        }), \",\\n\", _jsx(InlineCode, {\n          children: \"spacy[cuda102]\"\n        }), \", \", _jsx(InlineCode, {\n          children: \"spacy[cuda112]\"\n        }), \", \", _jsx(InlineCode, {\n          children: \"spacy[cuda113]\"\n        }), \", etc. If you know your CUDA\\nversion, using the more explicit specifier allows CuPy to be installed via\\nwheel, saving some compilation time. The specifiers should install\\n\", _jsx(_components.a, {\n          href: \"https://cupy.chainer.org\",\n          children: _jsx(InlineCode, {\n            children: \"cupy\"\n          })\n        }), \".\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ pip install -U spacy[cuda113]\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Once you have a GPU-enabled installation, the best way to activate it is to call\\n\", _jsx(_components.a, {\n          href: \"/api/top-level#spacy.prefer_gpu\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.prefer_gpu\"\n          })\n        }), \" or\\n\", _jsx(_components.a, {\n          href: \"/api/top-level#spacy.require_gpu\",\n          children: _jsx(InlineCode, {\n            children: \"spacy.require_gpu()\"\n          })\n        }), \" somewhere in your\\nscript before any pipelines have been loaded. \", _jsx(InlineCode, {\n          children: \"require_gpu\"\n        }), \" will raise an error\\nif no GPU is available.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-python\",\n          lang: \"python\",\n          children: \"import spacy\\n\\nspacy.prefer_gpu()\\nnlp = spacy.load(\\\"en_core_web_sm\\\")\\n\"\n        })\n      }), _jsx(_components.h3, {\n        id: \"source\",\n        children: \"Compile from source \"\n      }), _jsxs(_components.p, {\n        children: [\"The other way to install spaCy is to clone its\\n\", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spaCy\",\n          children: \"GitHub repository\"\n        }), \" and build it from\\nsource. That is the common way if you want to make changes to the code base.\\nYou’ll need to make sure that you have a development environment consisting of a\\nPython distribution including header files, a compiler,\\n\", _jsx(_components.a, {\n          href: \"https://pip.pypa.io/en/stable/\",\n          children: \"pip\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"https://git-scm.com\",\n          children: \"git\"\n        }), \" installed.\\nThe compiler part is the trickiest. How to do that depends on your system. See\\nnotes on \", _jsx(_components.a, {\n          href: \"#source-ubuntu\",\n          children: \"Ubuntu\"\n        }), \", \", _jsx(_components.a, {\n          href: \"#source-osx\",\n          children: \"macOS / OS X\"\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"#source-windows\",\n          children: \"Windows\"\n        }), \" for details.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ python -m pip install -U pip setuptools wheel # install/update build tools\\n$ git clone https://github.com/explosion/spaCy  # clone spaCy\\n$ cd spaCy                                      # navigate into dir\\n$ python -m venv .env                           # create environment in .env\\n$ source .env/bin/activate                      # activate virtual env\\n$ pip install -r requirements.txt               # install requirements\\n$ pip install --no-build-isolation --editable . # compile and install spaCy\\n\"\n        })\n      }), _jsx(_components.p, {\n        children: \"To install with extras:\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ pip install --no-build-isolation --editable .[lookups,cuda102]\\n\"\n        })\n      }), _jsx(_components.p, {\n        children: \"How to install compilers and related build tools:\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(\"strong\", {\n            id: \"source-ubuntu\",\n            children: \"Ubuntu:\"\n          }), \" Install system-level dependencies via\\n\", _jsx(InlineCode, {\n            children: \"apt-get\"\n          }), \": \", _jsx(InlineCode, {\n            children: \"sudo apt-get install build-essential python-dev git\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(\"strong\", {\n            id: \"source-osx\",\n            children: \"macOS / OS X:\"\n          }), \" Install a recent version of \", _jsx(_components.a, {\n            href: \"https://developer.apple.com/xcode/\",\n            children: \"XCode\"\n          }), \",\\nincluding the so-called “Command Line Tools”. macOS and OS X ship with Python and\\nGit preinstalled.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(\"strong\", {\n            id: \"source-windows\",\n            children: \"Windows:\"\n          }), \" Install a version of the \", _jsx(_components.a, {\n            href: \"https://visualstudio.microsoft.com/visual-cpp-build-tools/\",\n            children: \"Visual\\nC++ Build Tools\"\n          }), \" or\\n\", _jsx(_components.a, {\n            href: \"https://www.visualstudio.com/vs/visual-studio-express/\",\n            children: \"Visual Studio Express\"\n          }), \"\\nthat matches the version that was used to compile your Python interpreter.\"]\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        children: \"Using build constraints when compiling from source\"\n      }), _jsxs(_components.p, {\n        children: [\"If you install spaCy from source or with \", _jsx(InlineCode, {\n          children: \"pip\"\n        }), \" for platforms where there are not\\nbinary wheels on PyPI, you may need to use build constraints if any package in\\nyour environment requires an older version of \", _jsx(InlineCode, {\n          children: \"numpy\"\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [\"If \", _jsx(InlineCode, {\n          children: \"numpy\"\n        }), \" gets downgraded from the most recent release at any point after\\nyou’ve compiled \", _jsx(InlineCode, {\n          children: \"spacy\"\n        }), \", you might see an error that looks like this:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          lang: \"none\",\n          children: \"numpy.ndarray size changed, may indicate binary incompatibility.\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"To fix this, create a new virtual environment and install \", _jsx(InlineCode, {\n          children: \"spacy\"\n        }), \" and all of its\\ndependencies using build constraints.\\n\", _jsx(_components.a, {\n          href: \"https://pip.pypa.io/en/stable/user_guide/#constraints-files\",\n          children: \"Build constraints\"\n        }), \"\\nspecify an older version of \", _jsx(InlineCode, {\n          children: \"numpy\"\n        }), \" that is only used while compiling \", _jsx(InlineCode, {\n          children: \"spacy\"\n        }), \",\\nand then your runtime environment can use any newer version of \", _jsx(InlineCode, {\n          children: \"numpy\"\n        }), \" and still\\nbe compatible. In addition, use \", _jsx(InlineCode, {\n          children: \"--no-cache-dir\"\n        }), \" to ignore any previously cached\\nwheels so that all relevant packages are recompiled from scratch:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-shell\",\n          lang: \"shell\",\n          children: \"PIP_CONSTRAINT=https://raw.githubusercontent.com/explosion/spacy/master/build-constraints.txt \\\\\\npip install spacy --no-cache-dir\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Our build constraints currently specify the oldest supported \", _jsx(InlineCode, {\n          children: \"numpy\"\n        }), \" available\\non PyPI for \", _jsx(InlineCode, {\n          children: \"x86_64\"\n        }), \" and \", _jsx(InlineCode, {\n          children: \"aarch64\"\n        }), \". Depending on your platform and environment,\\nyou may want to customize the specific versions of \", _jsx(InlineCode, {\n          children: \"numpy\"\n        }), \". For other platforms,\\nyou can have a look at SciPy’s\\n\", _jsx(_components.a, {\n          href: \"https://github.com/scipy/oldest-supported-numpy/blob/main/setup.cfg\",\n          children: _jsx(InlineCode, {\n            children: \"oldest-supported-numpy\"\n          })\n        }), \"\\npackage to see what the oldest recommended versions of \", _jsx(InlineCode, {\n          children: \"numpy\"\n        }), \" are.\"]\n      }), _jsxs(_components.p, {\n        children: [\"(\", _jsx(_components.em, {\n          children: \"Warning\"\n        }), \": don’t use \", _jsx(InlineCode, {\n          children: \"pip install -c constraints.txt\"\n        }), \" instead of\\n\", _jsx(InlineCode, {\n          children: \"PIP_CONSTRAINT\"\n        }), \", since this isn’t applied to the isolated build environments.)\"]\n      }), _jsx(_components.h4, {\n        id: \"source-developers\",\n        children: \"Additional options for developers \"\n      }), _jsx(_components.p, {\n        children: \"Some additional options may be useful for spaCy developers who are editing the\\nsource code and recompiling frequently.\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"Install in editable mode. Changes to \", _jsx(InlineCode, {\n              children: \".py\"\n            }), \" files will be reflected as soon as\\nthe files are saved, but edits to Cython files (\", _jsx(InlineCode, {\n              children: \".pxd\"\n            }), \", \", _jsx(InlineCode, {\n              children: \".pyx\"\n            }), \") will require\\nthe \", _jsx(InlineCode, {\n              children: \"pip install\"\n            }), \" command below to be run again. Before installing in editable\\nmode, be sure you have removed any previous installs with\\n\", _jsx(InlineCode, {\n              children: \"pip uninstall spacy\"\n            }), \", which you may need to run multiple times to remove all\\ntraces of earlier installs.\"]\n          }), \"\\n\", _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-bash\",\n              lang: \"bash\",\n              children: \"$ pip install -r requirements.txt\\n$ pip install --no-build-isolation --editable .\\n\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"Build in parallel. Starting in v3.4.0, you can specify the number of build\\njobs with the environment variable \", _jsx(InlineCode, {\n              children: \"SPACY_NUM_BUILD_JOBS\"\n            }), \":\"]\n          }), \"\\n\", _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-bash\",\n              lang: \"bash\",\n              children: \"$ pip install -r requirements.txt\\n$ SPACY_NUM_BUILD_JOBS=4 pip install --no-build-isolation --editable .\\n\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"For editable mode and parallel builds with \", _jsx(InlineCode, {\n              children: \"python setup.py\"\n            }), \" instead of \", _jsx(InlineCode, {\n              children: \"pip\"\n            }), \"\\n(no longer recommended):\"]\n          }), \"\\n\", _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-bash\",\n              lang: \"bash\",\n              children: \"$ pip install -r requirements.txt\\n$ python setup.py build_ext --inplace -j 4\\n$ python setup.py develop\\n\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), _jsx(_components.h3, {\n        id: \"executable\",\n        children: \"Building an executable \"\n      }), _jsxs(_components.p, {\n        children: [\"The spaCy repository includes a \", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spaCy/tree/master/Makefile\",\n          children: _jsx(InlineCode, {\n            children: \"Makefile\"\n          })\n        }), \" that\\nbuilds an executable zip file using \", _jsx(_components.a, {\n          href: \"https://github.com/pantsbuild/pex\",\n          children: _jsx(InlineCode, {\n            children: \"pex\"\n          })\n        }), \"\\n(\", _jsx(_components.strong, {\n          children: \"P\"\n        }), \"ython \", _jsx(_components.strong, {\n          children: \"Ex\"\n        }), \"ecutable). The executable includes spaCy and all its package\\ndependencies and only requires the system Python at runtime. Building an\\nexecutable \", _jsx(InlineCode, {\n          children: \".pex\"\n        }), \" file is often the most convenient way to deploy spaCy, as it\\nlets you separate the build from the deployment process.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Usage\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"To use a \", _jsx(InlineCode, {\n            children: \".pex\"\n          }), \" file, just replace \", _jsx(InlineCode, {\n            children: \"python\"\n          }), \" with the path to the file when you\\nexecute your code or CLI commands. This is equivalent to running Python in a\\nvirtual environment with spaCy installed.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-bash\",\n            lang: \"bash\",\n            children: \"$ ./spacy.pex my_script.py\\n$ ./spacy.pex -m spacy info\\n\"\n          })\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ git clone https://github.com/explosion/spaCy\\n$ cd spaCy\\n$ make\\n\"\n        })\n      }), _jsx(_components.p, {\n        children: \"You can configure the build process with the following environment variables:\"\n      }), _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Variable\"\n            }), _jsx(_components.th, {\n              children: \"Description\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"SPACY_EXTRAS\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Additional Python packages to install alongside spaCy with optional version specifications. Should be a string that can be passed to \", _jsx(InlineCode, {\n                children: \"pip install\"\n              }), \". See \", _jsx(_components.a, {\n                href: \"https://github.com/explosion/spaCy/tree/master/Makefile\",\n                children: _jsx(InlineCode, {\n                  children: \"Makefile\"\n                })\n              }), \" for defaults.\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"PYVER\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"The Python version to build against. This version needs to be available on your build and runtime machines. Defaults to \", _jsx(InlineCode, {\n                children: \"3.6\"\n              }), \".\"]\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(InlineCode, {\n                children: \"WHEELHOUSE\"\n              })\n            }), _jsxs(_components.td, {\n              children: [\"Directory to store the wheel files during compilation. Defaults to \", _jsx(InlineCode, {\n                children: \"./wheelhouse\"\n              }), \".\"]\n            })]\n          })]\n        })]\n      }), _jsx(_components.h3, {\n        id: \"run-tests\",\n        children: \"Run tests \"\n      }), _jsxs(_components.p, {\n        children: [\"spaCy comes with an \", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spaCy/tree/master/spacy/tests\",\n          children: \"extensive test suite\"\n        }), \". In order\\nto run the tests, you’ll usually want to clone the \", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spaCy/tree/master\",\n          children: \"repository\"\n        }), \"\\nand \", _jsx(_components.a, {\n          href: \"#source\",\n          children: \"build spaCy from source\"\n        }), \". This will also install the required\\ndevelopment dependencies and test utilities defined in the \", _jsx(InlineCode, {\n          children: \"requirements.txt\"\n        }), \".\"]\n      }), _jsxs(_components.p, {\n        children: [\"Alternatively, you can find out where spaCy is installed and run \", _jsx(InlineCode, {\n          children: \"pytest\"\n        }), \" on\\nthat directory. Don’t forget to also install the test utilities via spaCy’s\\n\", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spaCy/tree/master/requirements.txt\",\n          children: _jsx(InlineCode, {\n            children: \"requirements.txt\"\n          })\n        }), \":\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ python -c \\\"import os; import spacy; print(os.path.dirname(spacy.__file__))\\\"\\n$ pip install -r path/to/requirements.txt\\n$ python -m pytest --pyargs spacy\\n\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Calling \", _jsx(InlineCode, {\n          children: \"pytest\"\n        }), \" on the spaCy directory will run only the basic tests. The flag\\n\", _jsx(InlineCode, {\n          children: \"--slow\"\n        }), \" is optional and enables additional tests that take longer.\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          lang: \"bash\",\n          children: \"$ python -m pip install -U pytest               # update pytest\\n$ python -m pytest --pyargs spacy               # basic tests\\n$ python -m pytest --pyargs spacy --slow        # basic and slow tests\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-troubleshooting\",\n      children: [_jsx(_components.h2, {\n        id: \"troubleshooting\",\n        children: \"Troubleshooting guide \"\n      }), _jsxs(_components.p, {\n        children: [\"This section collects some of the most common errors you may come across when\\ninstalling, loading and using spaCy, as well as their solutions. Also see the\\n\", _jsx(_components.a, {\n          href: \"https://github.com/explosion/spaCy/discussions/8226\",\n          children: \"Discussions FAQ Thread\"\n        }), \",\\nwhich is updated more frequently and covers more transitory issues.\"]\n      }), _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.h4, {\n          children: \"Help us improve this guide\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"Did you come across a problem like the ones listed here and want to share the\\nsolution? You can find the “Suggest edits” button at the bottom of this page\\nthat points you to the source. We always appreciate\\n\", _jsx(_components.a, {\n            href: \"https://github.com/explosion/spaCy/pulls\",\n            children: \"pull requests\"\n          }), \"!\"]\n        }), \"\\n\"]\n      }), _jsxs(Accordion, {\n        title: \"No compatible model found\",\n        id: \"compatible-model\",\n        children: [_jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            lang: \"none\",\n            children: \"No compatible package found for [lang] (spaCy vX.X.X).\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"This usually means that the trained pipeline you’re trying to download does not\\nexist, or isn’t available for your version of spaCy. Check the\\n\", _jsx(_components.a, {\n            href: \"https://github.com/explosion/spacy-models/tree/master/compatibility.json\",\n            children: \"compatibility table\"\n          }), \"\\nto see which packages are available for your spaCy version. If you’re using an\\nold version, consider upgrading to the latest release. Note that while spaCy\\nsupports tokenization for \", _jsx(_components.a, {\n            href: \"/usage/models#languages\",\n            children: \"a variety of languages\"\n          }), \", not\\nall of them come with trained pipelines. To only use the tokenizer, import the\\nlanguage’s \", _jsx(InlineCode, {\n            children: \"Language\"\n          }), \" class instead, for example\\n\", _jsx(InlineCode, {\n            children: \"from spacy.lang.fr import French\"\n          }), \".\"]\n        })]\n      }), _jsxs(Accordion, {\n        title: \"Import error: No module named spacy\",\n        id: \"import-error\",\n        children: [_jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            lang: \"none\",\n            children: \"Import Error: No module named spacy\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"This error means that the spaCy module can’t be located on your system, or in\\nyour environment. Make sure you have spaCy installed. If you’re using a virtual\\nenvironment, make sure it’s activated and check that spaCy is installed in that\\nenvironment – otherwise, you’re trying to load a system installation. You can\\nalso run \", _jsx(InlineCode, {\n            children: \"which python\"\n          }), \" to find out where your Python executable is located.\"]\n        })]\n      }), _jsxs(Accordion, {\n        title: \"Import error: No module named [name]\",\n        id: \"import-error-models\",\n        children: [_jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            lang: \"none\",\n            children: \"ImportError: No module named 'en_core_web_sm'\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"As of spaCy v1.7, all trained pipelines can be installed as Python packages.\\nThis means that they’ll become importable modules of your application. If this\\nfails, it’s usually a sign that the package is not installed in the current\\nenvironment. Run \", _jsx(InlineCode, {\n            children: \"pip list\"\n          }), \" or \", _jsx(InlineCode, {\n            children: \"pip freeze\"\n          }), \" to check which pipeline packages you\\nhave installed, and install the \", _jsx(_components.a, {\n            href: \"/models\",\n            children: \"correct package\"\n          }), \" if necessary. If\\nyou’re importing a package manually at the top of a file, make sure to use the\\nfull name of the package.\"]\n        })]\n      }), _jsxs(Accordion, {\n        title: \"Command not found: spacy\",\n        id: \"command-not-found\",\n        children: [_jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            lang: \"none\",\n            children: \"command not found: spacy\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"This error may occur when running the \", _jsx(InlineCode, {\n            children: \"spacy\"\n          }), \" command from the command line.\\nspaCy does not currently add an entry to your \", _jsx(InlineCode, {\n            children: \"PATH\"\n          }), \" environment variable, as\\nthis can lead to unexpected results, especially when using a virtual\\nenvironment. Instead, spaCy adds an auto-alias that maps \", _jsx(InlineCode, {\n            children: \"spacy\"\n          }), \" to\\n\", _jsx(InlineCode, {\n            children: \"python -m spacy\"\n          }), \". If this is not working as expected, run the command with\\n\", _jsx(InlineCode, {\n            children: \"python -m\"\n          }), \", yourself – for example \", _jsx(InlineCode, {\n            children: \"python -m spacy download en_core_web_sm\"\n          }), \".\\nFor more info on this, see the \", _jsx(_components.a, {\n            href: \"/api/cli#download\",\n            children: _jsx(InlineCode, {\n              children: \"download\"\n            })\n          }), \" command.\"]\n        })]\n      }), _jsxs(Accordion, {\n        title: \"'module' object has no attribute 'load'\",\n        id: \"module-load\",\n        children: [_jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            lang: \"none\",\n            children: \"AttributeError: 'module' object has no attribute 'load'\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"While this could technically have many causes, including spaCy being broken, the\\nmost likely one is that your script’s file or directory name is “shadowing” the\\nmodule – e.g. your file is called \", _jsx(InlineCode, {\n            children: \"spacy.py\"\n          }), \", or a directory you’re importing\\nfrom is called \", _jsx(InlineCode, {\n            children: \"spacy\"\n          }), \". So, when using spaCy, never call anything else \", _jsx(InlineCode, {\n            children: \"spacy\"\n          }), \".\"]\n        })]\n      }), _jsx(Accordion, {\n        title: \"NER model doesn't recognize other entities anymore after training\",\n        id: \"catastrophic-forgetting\",\n        children: _jsx(_components.p, {\n          children: \"If your training data only contained new entities and you didn’t mix in any\\nexamples the model previously recognized, it can cause the model to “forget”\\nwhat it had previously learned. This is also referred to as the “catastrophic\\nforgetting problem”. A solution is to pre-label some text, and mix it with the\\nnew text in your updates. You can also do this by running spaCy over some text,\\nextracting a bunch of entities the model previously recognized correctly, and\\nadding them to your training examples.\"\n        })\n      }), _jsxs(Accordion, {\n        title: \"Unhashable type: 'list'\",\n        id: \"unhashable-list\",\n        children: [_jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            lang: \"none\",\n            children: \"TypeError: unhashable type: 'list'\\n\"\n          })\n        }), _jsxs(_components.p, {\n          children: [\"If you’re training models, writing them to disk, and versioning them with git,\\nyou might encounter this error when trying to load them in a Windows\\nenvironment. This happens because a default install of Git for Windows is\\nconfigured to automatically convert Unix-style end-of-line characters (LF) to\\nWindows-style ones (CRLF) during file checkout (and the reverse when\\ncommitting). While that’s mostly fine for text files, a trained model written to\\ndisk has some binary files that should not go through this conversion. When they\\ndo, you get the error above. You can fix it by either changing your\\n\", _jsx(_components.a, {\n            href: \"https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration\",\n            children: _jsx(InlineCode, {\n              children: \"core.autocrlf\"\n            })\n          }), \"\\nsetting to \", _jsx(InlineCode, {\n            children: \"\\\"false\\\"\"\n          }), \", or by committing a\\n\", _jsx(_components.a, {\n            href: \"https://git-scm.com/docs/gitattributes\",\n            children: _jsx(InlineCode, {\n              children: \".gitattributes\"\n            })\n          }), \" file to your\\nrepository to tell Git on which files or folders it shouldn’t do LF-to-CRLF\\nconversion, with an entry like \", _jsx(InlineCode, {\n            children: \"path/to/spacy/model/** -text\"\n          }), \". After you’ve done\\neither of these, clone your repository again.\"]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.section, {\n      id: \"section-changelog\",\n      children: [_jsx(_components.h2, {\n        id: \"changelog\",\n        children: \"Changelog \"\n      }), _jsx(Changelog, {})]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Install spaCy","next":"/usage/models","menu":[["Quickstart","quickstart"],["Instructions","installation"],["Troubleshooting","troubleshooting"],["Changelog","changelog"]]},"scope":{}},"sectionTitle":"Usage Documentation","theme":"blue","section":"usage","apiDetails":{"stringName":null,"baseClass":null,"trainable":null},"isIndex":true},"__N_SSG":true}